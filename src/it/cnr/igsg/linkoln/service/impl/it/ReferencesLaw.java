/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
/* The following code was generated by JFlex 1.7.0 */

package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/ReferencesLaw.jflex</tt>
 */
public class ReferencesLaw extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int referenceState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\5\0\1\4"+
    "\1\0\1\1\1\1\2\0\1\1\1\2\1\0\1\41\1\40\1\40"+
    "\1\40\1\40\1\40\1\40\1\40\1\40\1\40\1\40\1\12\1\11"+
    "\5\0\1\21\1\6\1\31\1\47\1\27\1\16\1\23\1\16\1\16"+
    "\1\16\1\51\1\45\1\43\1\5\1\37\1\10\1\16\1\25\1\17"+
    "\1\35\1\33\1\16\1\57\1\16\1\55\1\16\1\52\1\0\1\53"+
    "\1\0\1\3\1\0\1\20\1\14\1\30\1\46\1\26\1\0\1\22"+
    "\1\0\1\0\1\0\1\50\1\44\1\42\1\13\1\36\1\15\1\0"+
    "\1\24\1\7\1\34\1\32\1\0\1\56\1\0\1\54\1\0\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0\1\0"+
    "\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0\2\0"+
    "\3\0\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0"+
    "\1\0\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0"+
    "\2\0\53\0\1\0\1\0\6\0\2\0\66\0\1\0\1\0\4\0"+
    "\1\0\1\0\17\0\1\7\u1c88\0\1\0\1\0\216\0\2\0\42\0"+
    "\1\0\1\0\u0144\0\1\1\20\0\1\2\1\2\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\50\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\2\3\12\0\1\4\35\0\1\5"+
    "\105\0\1\6\22\0\1\7\5\0\1\5\102\0\1\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\220\0\360\0\220"+
    "\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\220\0\u0330\0\u0360\0\u0390\0\u03c0"+
    "\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540"+
    "\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0"+
    "\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840"+
    "\0\u0870\0\220\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990"+
    "\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10"+
    "\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90"+
    "\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110"+
    "\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290"+
    "\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410"+
    "\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560\0\220"+
    "\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0"+
    "\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860"+
    "\0\u1890\0\u18c0\0\220\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0"+
    "\0\u1950\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00"+
    "\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80"+
    "\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00"+
    "\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80"+
    "\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100"+
    "\0\u2130\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280"+
    "\0\u22b0\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400"+
    "\0\u2430\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580"+
    "\0\u25b0\0\u25e0\0\u2610\0\u1e90";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\52\4\1\5\5\4\52\6\1\7\5\6\52\10\1\11"+
    "\5\10\124\0\2\12\53\0\1\13\62\0\2\14\62\0"+
    "\2\15\52\0\2\16\62\0\2\17\13\0\1\20\5\0"+
    "\1\20\114\0\2\21\13\0\1\22\5\0\1\22\56\0"+
    "\1\23\52\0\1\24\5\0\1\24\56\0\1\25\50\0"+
    "\1\26\1\0\2\26\1\0\1\26\5\0\2\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\27\1\30\1\0\1\26\1\0\1\26\3\0"+
    "\1\26\1\0\1\26\5\0\1\31\1\0\1\32\3\0"+
    "\1\31\3\0\1\32\24\0\2\33\2\34\13\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\35\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\26\0\2\36\33\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\35\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\36\1\37"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\32\0\2\40\60\0\2\41"+
    "\50\0\2\42\66\0\2\43\22\0\2\35\1\0\2\35"+
    "\1\0\1\35\1\0\1\44\3\0\2\35\1\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\2\35\2\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\3\0\1\35"+
    "\1\0\1\35\22\0\2\45\37\0\1\26\1\0\2\26"+
    "\1\0\1\26\1\0\1\35\3\0\2\26\1\0\1\26"+
    "\1\45\1\46\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\42\0\2\47\24\0\1\50\4\0\1\50"+
    "\64\0\2\51\64\0\2\52\66\0\1\53\22\0\1\54"+
    "\57\0\1\55\1\0\2\26\1\0\1\26\1\0\1\35"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\6\0\1\56"+
    "\5\0\1\56\121\0\2\57\3\0\1\60\57\0\1\61"+
    "\114\0\1\53\12\0\1\62\52\0\2\63\13\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\35\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\1\63\1\64\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\26\0\2\65\42\0\1\66"+
    "\113\0\2\67\56\0\2\70\46\0\2\71\23\0\1\26"+
    "\1\0\2\26\1\0\1\26\1\0\1\35\3\0\2\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\71\1\72"+
    "\3\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\3\0\1\26\1\0\1\26\24\0\2\73\34\0\2\66"+
    "\1\0\2\66\1\0\1\66\1\0\1\74\3\0\2\66"+
    "\1\0\1\66\1\0\1\66\1\0\1\66\1\0\1\66"+
    "\1\0\1\66\1\0\1\66\1\0\1\66\1\0\2\66"+
    "\2\0\1\66\1\0\1\66\1\0\1\66\1\0\1\66"+
    "\3\0\1\66\1\0\1\66\36\0\2\75\40\0\2\76"+
    "\66\0\2\77\31\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\35\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\77\1\100\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\12\0\1\101\105\0\1\102\47\0\2\103\62\0\2\104"+
    "\56\0\2\105\25\0\1\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\35\3\0\2\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\105\1\106\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\3\0\1\26\1\0\1\26"+
    "\2\0\2\101\1\0\2\101\1\0\1\101\1\0\1\107"+
    "\3\0\2\101\1\0\1\101\1\0\1\101\1\0\1\101"+
    "\1\0\1\101\1\0\1\101\1\0\1\101\1\0\1\101"+
    "\1\0\2\101\2\0\1\101\1\0\1\101\1\0\1\101"+
    "\1\0\1\101\3\0\1\101\1\0\1\101\40\0\1\102"+
    "\12\0\1\110\40\0\2\111\50\0\2\73\104\0\2\112"+
    "\5\0\1\26\1\0\2\26\1\0\1\26\1\0\1\35"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\2\0\1\112\1\113\1\0\1\26\40\0"+
    "\1\114\17\0\52\115\1\0\5\115\54\0\2\116\12\0"+
    "\1\117\4\0\1\117\45\0\1\26\1\0\2\26\1\0"+
    "\1\120\1\0\1\35\2\0\1\117\2\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\3\0\1\26"+
    "\1\0\1\26\40\0\1\114\12\0\1\121\4\0\52\115"+
    "\1\122\5\115\10\0\1\123\4\0\1\123\70\0\2\124"+
    "\33\0\1\26\1\0\2\26\1\0\1\26\1\0\1\35"+
    "\3\0\2\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\124\1\125\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\26\1\0\1\26\52\126\1\0"+
    "\5\126\41\0\1\127\44\0\2\130\42\0\1\131\50\0"+
    "\1\26\1\0\2\26\1\0\1\26\1\0\1\132\3\0"+
    "\2\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\3\0\1\26\1\0\1\26\52\126\1\133\5\126"+
    "\44\0\2\134\24\0\1\135\111\0\2\136\2\137\12\0"+
    "\2\35\1\0\2\35\1\0\1\35\1\0\1\44\3\0"+
    "\2\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\2\35\2\0\1\35\1\136\1\140\1\137\1\141\1\0"+
    "\1\35\3\0\1\35\1\0\1\35\41\0\1\142\66\0"+
    "\2\143\52\0\2\144\2\145\30\0\2\146\2\147\62\0"+
    "\2\150\32\0\2\35\1\0\2\35\1\0\1\35\1\0"+
    "\1\44\3\0\2\35\1\146\1\151\1\147\1\152\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\2\35\2\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\3\0\1\35\1\0\1\35\2\0"+
    "\2\35\1\0\2\35\1\0\1\35\1\0\1\44\3\0"+
    "\2\35\1\0\1\35\1\0\1\35\1\0\1\35\1\150"+
    "\1\153\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\2\35\2\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\3\0\1\35\1\0\1\35\44\0\2\154\17\0"+
    "\1\155\5\0\1\155\64\0\2\156\2\157\62\0\2\160"+
    "\106\0\2\161\7\0\1\162\7\0\1\162\70\0\2\163"+
    "\30\0\2\35\1\0\2\35\1\0\1\35\1\0\1\44"+
    "\3\0\2\35\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\2\35\2\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\3\0\1\35\1\161\1\164\2\0\2\35"+
    "\1\0\2\35\1\162\1\35\1\0\1\44\3\0\1\35"+
    "\1\165\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\2\35\2\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\3\0\1\35\1\0\1\35\2\0\2\35\1\0"+
    "\2\35\1\0\1\35\1\0\1\44\3\0\2\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\1\163"+
    "\1\166\1\0\1\35\1\0\1\35\1\0\2\35\2\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\3\0"+
    "\1\35\1\0\1\35\50\0\2\167\61\0\1\170\62\0"+
    "\2\171\7\0\1\172\7\0\1\172\70\0\2\173\40\0"+
    "\1\174\50\0\1\175\100\0\2\176\34\0\2\35\1\0"+
    "\2\35\1\0\1\35\1\0\1\177\3\0\2\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\2\35\2\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\3\0"+
    "\1\35\1\0\1\35\2\0\1\35\1\200\1\0\2\35"+
    "\1\0\1\35\1\0\1\44\3\0\2\35\1\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\2\35\2\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\3\0\1\35"+
    "\1\0\1\35\2\0\2\35\1\0\2\35\1\0\1\35"+
    "\1\0\1\44\3\0\2\35\1\0\1\35\1\0\1\35"+
    "\1\176\1\201\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\2\35\2\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\1\35\3\0\1\35\1\0\1\35"+
    "\5\0\1\202\5\0\1\202\56\0\1\107\50\0\1\203"+
    "\100\0\2\204\72\0\1\205\65\0\2\206\36\0\2\207"+
    "\70\0\1\210\21\0\2\35\1\0\2\35\1\0\1\35"+
    "\1\0\1\44\3\0\2\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\2\35\2\0\1\35\1\0\1\35"+
    "\1\206\1\211\1\0\1\35\3\0\1\35\1\0\1\35"+
    "\2\0\2\35\1\0\2\35\1\0\1\35\1\0\1\44"+
    "\3\0\2\35\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\207\1\212\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\2\35\2\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\3\0\1\35\1\0\1\35\53\0\1\213"+
    "\52\0\2\214\36\0\2\215\70\0\1\205\12\0\1\216"+
    "\32\0\2\217\56\0\2\220\70\0\1\210\12\0\1\221"+
    "\6\0\2\35\1\0\2\35\1\0\1\35\1\0\1\44"+
    "\3\0\2\35\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\217\1\222\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\2\35\2\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\3\0\1\35\1\0\1\35\2\0\2\35"+
    "\1\0\2\35\1\0\1\35\1\0\1\44\3\0\2\35"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\1\220\1\223"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\1\0\2\35"+
    "\2\0\1\35\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\3\0\1\35\1\0\1\35\26\0\2\224\56\0\2\225"+
    "\30\0\52\226\1\0\5\226\30\0\2\227\31\0\1\230"+
    "\56\0\2\35\1\0\2\35\1\0\1\35\1\0\1\44"+
    "\3\0\2\35\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\227\1\231\1\0\1\35\1\0\1\35"+
    "\1\0\2\35\2\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\3\0\1\35\1\0\1\35\2\0\1\35"+
    "\1\232\1\0\2\35\1\0\1\35\1\0\1\44\3\0"+
    "\2\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\2\35\2\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\3\0\1\35\1\0\1\35\30\0\2\233\31\0"+
    "\1\234\54\0\52\226\1\235\5\226\24\0\2\236\76\0"+
    "\2\237\14\0\2\35\1\0\2\35\1\0\1\35\1\0"+
    "\1\44\3\0\2\35\1\0\1\35\1\0\1\35\1\236"+
    "\1\240\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\2\35\2\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\3\0\1\35\1\0\1\35\2\0"+
    "\2\35\1\0\2\35\1\0\1\35\1\0\1\44\3\0"+
    "\2\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\2\35\2\0\1\35\1\237\1\241\1\0\1\35\1\0"+
    "\1\35\3\0\1\35\1\0\1\35\24\0\2\242\76\0"+
    "\2\243\53\0\1\244\44\0\2\245\50\0\2\146\40\0"+
    "\2\35\1\0\2\35\1\0\1\35\1\0\1\44\3\0"+
    "\2\35\1\0\1\35\1\0\1\35\1\0\1\35\1\245"+
    "\1\246\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\2\35\2\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\3\0\1\35\1\0\1\35\2\0\2\35\1\0"+
    "\2\35\1\0\1\35\1\0\1\44\3\0\2\35\1\146"+
    "\1\151\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\2\35\2\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\3\0"+
    "\1\35\1\0\1\35\26\0\2\247\50\0\2\156\102\0"+
    "\2\250\40\0\2\161\32\0\2\35\1\0\2\35\1\0"+
    "\1\35\1\0\1\44\3\0\2\35\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\161\1\164\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\2\35\2\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\3\0\1\35\1\0"+
    "\1\35\26\0\2\171\100\0\2\251\13\0\1\252\5\0"+
    "\1\252\117\0\1\253\5\0\3\253\1\254\4\0\2\253"+
    "\37\0\1\255\12\0\1\256\5\0\1\256\110\0\2\257"+
    "\20\0\1\260\5\0\1\260\113\0\2\261\15\0\1\262"+
    "\7\0\1\262\45\0\1\263\5\0\1\263\54\0\1\264"+
    "\4\0\1\264\54\0\1\265\56\0\1\253\53\0\1\266"+
    "\1\0\1\267\3\0\1\266\3\0\1\267\26\0\2\270"+
    "\42\0\2\271\60\0\2\272\60\0\2\273\62\0\2\274"+
    "\24\0\1\275\4\0\1\275\72\0\2\276\34\0\1\277"+
    "\5\0\1\277\121\0\2\300\3\0\1\301\30\0\2\302"+
    "\50\0\2\303\42\0\1\304\113\0\2\305\64\0\2\306"+
    "\26\0\2\307\34\0\2\304\1\0\2\304\1\0\1\304"+
    "\1\0\1\174\3\0\2\304\1\0\1\304\1\0\1\304"+
    "\1\0\1\304\1\0\1\304\1\0\1\304\1\0\1\304"+
    "\1\0\1\304\1\0\2\304\2\0\1\304\1\0\1\304"+
    "\1\0\1\304\1\0\1\304\3\0\1\304\1\0\1\304"+
    "\20\0\2\310\46\0\1\311\4\0\1\311\54\0\1\312"+
    "\101\0\2\311\50\0\2\307\32\0\2\312\1\0\2\312"+
    "\1\0\1\312\1\0\1\313\3\0\2\312\1\0\1\312"+
    "\1\0\1\312\1\0\1\312\1\0\1\312\1\0\1\312"+
    "\1\0\1\312\1\0\1\312\1\0\2\312\2\0\1\312"+
    "\1\0\1\312\1\0\1\312\1\0\1\312\3\0\1\312"+
    "\1\0\1\312\40\0\1\314\57\0\1\314\12\0\1\315"+
    "\4\0\52\316\1\0\57\316\1\317\5\316\41\0\1\320"+
    "\62\0\2\321\62\0\2\322\13\0\1\323\5\0\1\323"+
    "\117\0\1\324\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9792];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\1\11\1\1\12\0"+
    "\1\11\35\0\1\11\105\0\1\11\22\0\1\11\5\0"+
    "\1\1\102\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.1"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public ReferencesLaw() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
		//annotationEntity.setValue("value");
	}
	
	private void startReference() {
	
		annotationEntity = new LegislationReference();
		
		annotationEntity.setPosition(position);
		((Reference) annotationEntity).setText(Util.removeAllAnnotations(yytext()));
		((Reference) annotationEntity).setContext(Util.removeAllAnnotations(yytext()));
		
		length = yylength();		
	
		yypushback(length);
		offset = 0;
	
		yybegin(referenceState);	 
	}

	private void readFeature() {
	
		AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		offset += yylength();

		annotationEntity.addRelatedEntity(retrievedEntity);
		retrievedEntity.addRelatedEntity(annotationEntity);
		
		position += retrievedEntity.getText().length();
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ReferencesLaw(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 9: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 10: break;
          case 3: 
            { offset++;
		position++;
		
		if(offset >= length) {
			
			if(offset > length) {
				yypushback(1);
				position--;
			}
			
			addEntity(annotationEntity);
			
			yybegin(0);
		}
            } 
            // fall through
          case 11: break;
          case 4: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 12: break;
          case 5: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 13: break;
          case 6: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 14: break;
          case 7: 
            { readFeature();
            } 
            // fall through
          case 15: break;
          case 8: 
            { startReference();
            } 
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ReferencesLaw [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        ReferencesLaw scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new ReferencesLaw(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
