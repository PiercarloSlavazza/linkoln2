/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
/* The following code was generated by JFlex 1.6.1 */

package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>CaseLawAuthorities.jflex</tt>
 */
public class CaseLawAuthorities extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\104\1\105\1\1\22\0\1\13\5\0\1\5"+
    "\1\0\1\15\1\16\2\0\1\14\1\3\1\56\1\57\1\55\1\55"+
    "\1\55\1\55\1\55\1\55\1\55\1\55\1\55\1\55\1\17\1\12"+
    "\5\0\1\31\1\7\1\43\1\70\1\41\1\101\1\33\1\77\1\52"+
    "\1\66\1\73\1\63\1\61\1\6\1\54\1\11\1\65\1\35\1\26"+
    "\1\47\1\45\1\37\1\103\1\66\1\66\1\25\1\74\1\0\1\75"+
    "\1\0\1\4\1\0\1\30\1\22\1\42\1\67\1\40\1\100\1\32"+
    "\1\76\1\51\1\27\1\72\1\62\1\60\1\21\1\53\1\24\1\64"+
    "\1\34\1\23\1\46\1\44\1\36\1\102\1\27\1\27\1\20\12\0"+
    "\1\104\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\27\1\27\4\27\1\0\1\27\1\27\1\27\2\27\1\27\1\27"+
    "\2\27\1\0\1\27\1\27\1\27\3\27\2\0\1\27\1\27\2\27"+
    "\3\0\1\27\1\27\4\27\1\0\1\27\1\27\1\27\2\27\1\27"+
    "\1\27\2\27\1\0\1\27\1\27\1\27\3\27\2\0\1\27\1\27"+
    "\2\27\53\0\1\27\1\27\6\0\2\50\66\0\1\27\1\27\4\0"+
    "\1\27\1\27\17\0\1\10\u1c88\0\1\27\1\27\216\0\2\27\42\0"+
    "\1\27\1\27\u0144\0\1\13\20\0\1\3\1\3\4\0\1\0\16\0"+
    "\1\104\1\104\u0100\0\1\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\4\1\2\2\55\0\2\3\30\0\1\4\2\5"+
    "\2\0\1\5\6\0\2\6\1\0\1\6\2\7\2\10"+
    "\56\0\4\11\1\0\1\11\1\0\2\11\2\12\1\0"+
    "\1\12\30\0\1\6\31\0\3\13\1\0\1\13\13\0"+
    "\2\14\1\0\5\14\33\0\2\15\5\0\2\16\1\0"+
    "\1\16\31\0\1\11\1\0\1\11\3\0\3\7\3\0"+
    "\1\7\24\0\1\17\6\0\2\20\6\0\3\6\1\0"+
    "\1\6\64\0\1\7\10\0\1\13\12\0\2\21\1\0"+
    "\1\21\3\22\1\0\1\22\4\0\2\23\16\0\3\7"+
    "\14\0\2\24\1\0\1\24\150\0\4\3\60\0\2\25"+
    "\23\0\3\26\24\0\1\3\272\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[855];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u0118\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\214\0\u038e"+
    "\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be"+
    "\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee"+
    "\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e"+
    "\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e"+
    "\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0118\0\u0df2\0\u0e38"+
    "\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068"+
    "\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298"+
    "\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u0118"+
    "\0\u0118\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c"+
    "\0\u16b2\0\u16f8\0\u173e\0\u0118\0\u1784\0\u17ca\0\u1810\0\u0118"+
    "\0\u1856\0\u0118\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a"+
    "\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a"+
    "\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba"+
    "\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u0118\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u268e"+
    "\0\u26d4\0\u271a\0\u0118\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878"+
    "\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8"+
    "\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8"+
    "\0\u159a\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2e7c"+
    "\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac"+
    "\0\u30f2\0\u25bc\0\u2602\0\u271a\0\u3138\0\u317e\0\u31c4\0\u320a"+
    "\0\u3250\0\u3296\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a"+
    "\0\u0118\0\u3480\0\u34c6\0\u34c6\0\u350c\0\u3552\0\u3598\0\u35de"+
    "\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e"+
    "\0\u0118\0\u3854\0\u389a\0\u38e0\0\u3926\0\u15e0\0\u1626\0\u16f8"+
    "\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56"+
    "\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u26d4"+
    "\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70"+
    "\0\u3fb6\0\u3ffc\0\u4042\0\u0118\0\u4088\0\u40ce\0\u4114\0\u415a"+
    "\0\u41a0\0\u41e6\0\u0118\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344"+
    "\0\u438a\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574"+
    "\0\u45ba\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4"+
    "\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u49d4"+
    "\0\u4a1a\0\u4a60\0\u4aa6\0\u27ec\0\u4aec\0\u4b32\0\u4b78\0\u4bbe"+
    "\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u4dee"+
    "\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8\0\u501e"+
    "\0\u5064\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e"+
    "\0\u0118\0\u5294\0\u52da\0\u5320\0\u5366\0\u53ac\0\u1810\0\u0118"+
    "\0\u53f2\0\u5438\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc"+
    "\0\u5622\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u5780\0\u57c6\0\u580c"+
    "\0\u4b78\0\u4bbe\0\u4cd6\0\u5852\0\u5898\0\u58de\0\u5924\0\u596a"+
    "\0\u59b0\0\u59f6\0\u5a3c\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54\0\u5b9a"+
    "\0\u5be0\0\u5c26\0\u5c6c\0\u5cb2\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca"+
    "\0\u5e10\0\u5e56\0\u5e9c\0\u5ee2\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa"+
    "\0\u6040\0\u6086\0\u60cc\0\u6112\0\u6158\0\u619e\0\u61e4\0\u5622"+
    "\0\u5668\0\u56f4\0\u622a\0\u6270\0\u62b6\0\u62fc\0\u6342\0\u6388"+
    "\0\u0e7e\0\u63ce\0\u6414\0\u645a\0\u64a0\0\u64e6\0\u652c\0\u6572"+
    "\0\u65b8\0\u65fe\0\u65fe\0\u6644\0\u668a\0\u66d0\0\u6716\0\u675c"+
    "\0\u67a2\0\u67e8\0\u682e\0\u6874\0\u0118\0\u68ba\0\u6900\0\u6946"+
    "\0\u0118\0\u698c\0\u69d2\0\u69d2\0\u6a18\0\u6a5e\0\u6aa4\0\u6aea"+
    "\0\u6b30\0\u0118\0\u6b76\0\u6bbc\0\u6c02\0\u6c48\0\u6c8e\0\u6cd4"+
    "\0\u6d1a\0\u6d60\0\u6da6\0\u4a60\0\u6dec\0\u6e32\0\u6e78\0\u6ebe"+
    "\0\u6f04\0\u6f4a\0\u6f90\0\u6fd6\0\u701c\0\u7062\0\u70a8\0\u70ee"+
    "\0\u7134\0\u717a\0\u71c0\0\u7206\0\u724c\0\u7292\0\u72d8\0\u731e"+
    "\0\u0118\0\u7364\0\u73aa\0\u73f0\0\u7436\0\u747c\0\u74c2\0\u7508"+
    "\0\u754e\0\u7594\0\u75da\0\u7620\0\u7666\0\u76ac\0\u76f2\0\u7738"+
    "\0\u777e\0\u77c4\0\u780a\0\u7850\0\u7896\0\u78dc\0\u7922\0\u7968"+
    "\0\u79ae\0\u79f4\0\u7a3a\0\u7a80\0\u6f90\0\u6fd6\0\u7ac6\0\u7b0c"+
    "\0\u7b52\0\u7b98\0\u7bde\0\u7c24\0\u7c6a\0\u7cb0\0\u7cf6\0\u7d3c"+
    "\0\u7d82\0\u7dc8\0\u7e0e\0\u7e54\0\u7e9a\0\u7ee0\0\u7f26\0\u7f6c"+
    "\0\u6946\0\u7fb2\0\u7ff8\0\u38e0\0\u803e\0\u8084\0\u80ca\0\u8110"+
    "\0\u8156\0\u819c\0\u81e2\0\u8228\0\u826e\0\u82b4\0\u82fa\0\u8340"+
    "\0\u8386\0\u83cc\0\u8412\0\u8458\0\u849e\0\u84e4\0\u852a\0\u8570"+
    "\0\u85b6\0\u85fc\0\u8642\0\u8688\0\u86ce\0\u8714\0\u875a\0\u87a0"+
    "\0\u87e6\0\u882c\0\u8872\0\u88b8\0\u88fe\0\u8944\0\u898a\0\u89d0"+
    "\0\u8a16\0\u8a5c\0\u8aa2\0\u8ae8\0\u8b2e\0\u8b74\0\u8bba\0\u8c00"+
    "\0\u8c46\0\u8c8c\0\u8cd2\0\u8d18\0\u8d5e\0\u8da4\0\u8dea\0\u8e30"+
    "\0\u8e76\0\u8ebc\0\u8f02\0\u8f48\0\u8f8e\0\u8fd4\0\u901a\0\u9060"+
    "\0\u90a6\0\u42b8\0\u90ec\0\u9132\0\u9178\0\u91be\0\u9204\0\u924a"+
    "\0\u6a18\0\u9290\0\u92d6\0\u931c\0\u9362\0\u93a8\0\u93ee\0\u9434"+
    "\0\u947a\0\u94c0\0\u9506\0\u954c\0\u9592\0\u95d8\0\u961e\0\u9664"+
    "\0\u96aa\0\u96f0\0\u9736\0\u350c\0\u977c\0\u97c2\0\u9808\0\u984e"+
    "\0\u9894\0\u8fd4\0\u901a\0\u9060\0\u98da\0\u9920\0\u9966\0\u99ac"+
    "\0\u99f2\0\u9a38\0\u9a7e\0\u9ac4\0\u9b0a\0\u9b50\0\u9b96\0\u9bdc"+
    "\0\u0118\0\u9c22\0\u9c68\0\u9cae\0\u9cf4\0\u9d3a\0\u9d80\0\u9dc6"+
    "\0\u9e0c\0\u9e52\0\u9e98\0\u9ede\0\u9f24\0\u9f6a\0\u9fb0\0\u9ff6"+
    "\0\ua03c\0\ua082\0\ua0c8\0\ua10e\0\ua154\0\u0118\0\ua19a\0\ua1e0"+
    "\0\ua226\0\ua26c\0\ua2b2\0\ua2f8\0\ua33e\0\ua384\0\ua3ca\0\ua410"+
    "\0\ua456\0\ua49c\0\ua4e2\0\ua528\0\ua56e\0\ua5b4\0\ua5fa\0\ua640"+
    "\0\ua686\0\ua6cc\0\ua712\0\ua758\0\u0834\0\ua79e\0\ua7e4\0\ua82a"+
    "\0\ua870\0\ua8b6\0\ua8fc\0\ua942\0\ua988\0\ua9ce\0\uaa14\0\uaa5a"+
    "\0\uaaa0\0\uaae6\0\uab2c\0\uab72\0\uabb8\0\uabfe\0\uac44\0\uac8a"+
    "\0\uacd0\0\uad16\0\uad5c\0\u73f0\0\uada2\0\uade8\0\uae2e\0\uae74"+
    "\0\uaeba\0\uaf00\0\uaf46\0\uaf8c\0\uafd2\0\ub018\0\ub05e\0\ub0a4"+
    "\0\ub0ea\0\ub130\0\ub176\0\ub1bc\0\ub202\0\ub248\0\ub28e\0\ub2d4"+
    "\0\ub31a\0\ub360\0\ub3a6\0\ub3ec\0\ub432\0\ub478\0\ub4be\0\ub504"+
    "\0\ub54a\0\ub590\0\ub5d6\0\ub61c\0\ub662\0\ub6a8\0\ub6ee\0\ub734"+
    "\0\ua1e0\0\ub77a\0\ub7c0\0\ub806\0\ub84c\0\ub892\0\ub8d8\0\ub91e"+
    "\0\ub964\0\ub9aa\0\ub9f0\0\uba36\0\uba7c\0\ubac2\0\ubb08\0\ubb4e"+
    "\0\ubb94\0\ubbda\0\ubc20\0\ubc66\0\ubcac\0\ubcf2\0\ubd38\0\ubd7e"+
    "\0\ubdc4\0\ube0a\0\ube50\0\ube96\0\ubedc\0\ubf22\0\ubf68\0\ubfae"+
    "\0\ubff4\0\uc03a\0\uc080\0\uc0c6\0\uc10c\0\uc152\0\uc198\0\uc1de"+
    "\0\uc224\0\uc26a\0\uc2b0\0\uc2f6\0\uc33c\0\uc382\0\uc3c8\0\uc40e"+
    "\0\uc454\0\uc49a\0\uc4e0\0\uc526\0\uc56c\0\uc5b2\0\uc5f8\0\uc63e"+
    "\0\uc684\0\uc6ca\0\uc710\0\uc756\0\uc79c\0\uc7e2\0\uc828\0\uc86e"+
    "\0\uc8b4\0\uc8fa\0\uc940\0\uc986\0\uc9cc\0\uca12\0\uca58\0\uca9e"+
    "\0\ucae4\0\ucb2a\0\ucb70\0\ucbb6\0\ucbfc\0\ucc42\0\ucc88\0\uccce"+
    "\0\ucd14\0\ucd5a\0\ucda0\0\ucde6\0\uce2c\0\uce72\0\uceb8\0\ucefe"+
    "\0\ucf44\0\ucf8a\0\ucfd0\0\ud016\0\ud05c\0\ud0a2\0\ud0e8\0\ud12e"+
    "\0\ud174\0\ud1ba\0\ud200\0\ud246\0\ud28c\0\ud2d2\0\ud318\0\ud35e"+
    "\0\ud3a4\0\ud3ea\0\ud430\0\ud476\0\ud4bc\0\ud502\0\ud548\0\ud58e"+
    "\0\ud5d4\0\ud61a\0\ud660\0\ud6a6\0\ud6ec\0\ud732\0\ud778\0\ud7be"+
    "\0\ud804\0\ud84a\0\ud890\0\ud8d6\0\ud91c\0\ud962\0\ud9a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[855];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\4\3\2\5\1\3\1\5\6\3\30\5"+
    "\1\3\5\5\2\3\11\5\1\3\2\5\1\6\1\3"+
    "\6\5\2\3\74\7\1\10\11\7\11\0\1\11\12\0"+
    "\1\11\5\0\2\12\5\0\1\13\2\14\2\15\2\16"+
    "\40\0\1\17\6\0\1\11\12\0\1\11\5\0\2\12"+
    "\5\0\1\13\2\14\2\15\2\16\155\0\1\11\12\0"+
    "\1\11\5\0\2\12\5\0\1\13\2\14\2\15\2\16"+
    "\12\0\2\20\101\0\1\21\62\0\2\22\120\0\3\23"+
    "\44\0\1\24\124\0\2\25\2\26\4\0\2\27\11\0"+
    "\2\30\1\0\1\31\127\0\2\32\40\0\2\33\141\0"+
    "\3\34\74\0\2\35\62\0\2\36\11\0\2\37\75\0"+
    "\2\40\114\0\1\41\41\0\1\42\12\0\1\42\2\0"+
    "\1\42\121\0\4\43\127\0\2\44\23\0\1\45\12\0"+
    "\1\45\12\0\2\46\51\0\2\31\2\47\1\50\2\0"+
    "\1\51\1\0\1\47\1\31\4\47\3\0\1\51\2\0"+
    "\1\51\1\0\2\52\2\53\4\0\2\54\2\55\30\0"+
    "\1\56\10\0\1\31\100\0\2\57\54\0\3\60\41\0"+
    "\1\61\12\0\1\61\155\0\3\62\60\0\2\63\100\0"+
    "\2\64\131\0\2\65\15\0\1\66\1\67\4\66\2\0"+
    "\1\66\1\0\6\66\30\0\1\66\5\0\2\66\11\0"+
    "\1\66\2\0\2\66\6\0\2\66\10\0\1\70\12\0"+
    "\1\70\2\0\1\70\117\0\2\71\110\0\2\72\50\0"+
    "\1\73\12\0\1\73\2\0\1\73\125\0\2\74\37\0"+
    "\4\47\1\75\4\0\6\47\10\0\2\52\42\0\1\76"+
    "\10\0\1\47\6\0\1\77\12\0\1\77\130\0\2\100"+
    "\50\0\1\101\1\102\11\0\1\101\1\102\1\0\1\101"+
    "\127\0\3\103\77\0\2\104\21\0\2\44\45\0\2\25"+
    "\21\0\2\105\113\0\2\106\23\0\2\107\2\110\1\111"+
    "\1\0\1\112\1\113\1\0\1\110\1\107\4\110\2\0"+
    "\1\112\1\113\2\0\1\113\21\0\3\114\3\0\1\107"+
    "\15\0\1\115\10\0\1\107\7\0\1\116\12\0\1\116"+
    "\102\0\1\117\74\0\1\120\12\0\1\120\64\0\1\121"+
    "\1\122\4\121\2\0\1\121\1\0\6\121\24\0\2\123"+
    "\2\0\1\121\2\0\2\124\1\0\1\125\1\121\11\0"+
    "\1\121\2\0\2\121\6\0\2\121\1\0\4\126\1\127"+
    "\4\0\6\126\14\0\2\130\6\0\2\131\10\0\1\126"+
    "\15\0\1\132\10\0\1\126\50\0\3\133\35\0\1\66"+
    "\103\0\1\134\1\135\4\134\2\0\1\134\1\0\6\134"+
    "\10\0\2\136\16\0\1\134\5\0\1\137\1\134\11\0"+
    "\1\134\2\0\2\134\6\0\2\134\1\140\1\141\4\140"+
    "\2\0\1\140\1\0\6\140\30\0\1\140\5\0\2\140"+
    "\11\0\1\140\2\0\2\140\6\0\2\140\1\142\1\143"+
    "\4\142\2\0\1\142\1\0\6\142\30\0\1\142\5\0"+
    "\2\142\11\0\1\142\2\0\2\142\6\0\2\142\1\0"+
    "\2\144\2\0\1\145\2\0\1\146\2\0\1\144\7\0"+
    "\1\146\2\0\1\146\3\0\2\147\14\0\3\150\3\0"+
    "\1\144\15\0\1\151\10\0\1\144\40\0\2\31\52\0"+
    "\1\152\12\0\1\152\146\0\2\153\31\0\1\154\12\0"+
    "\1\154\74\0\1\155\12\0\1\155\71\0\1\156\12\0"+
    "\1\156\2\0\1\156\70\0\1\157\12\0\1\157\125\0"+
    "\2\160\74\0\2\161\20\0\1\162\35\0\1\163\1\0"+
    "\1\164\10\0\1\163\1\0\1\164\2\0\1\164\150\0"+
    "\3\165\13\0\2\107\2\110\1\111\1\0\1\112\1\113"+
    "\1\0\1\110\1\107\4\110\2\0\1\112\1\113\2\0"+
    "\1\113\45\0\1\115\10\0\1\107\1\0\4\110\1\166"+
    "\2\0\1\113\1\0\6\110\3\0\1\113\2\0\1\113"+
    "\45\0\1\115\10\0\1\110\6\0\1\167\12\0\1\167"+
    "\120\0\2\170\123\0\2\171\73\0\2\172\124\0\2\173"+
    "\23\0\2\174\2\0\1\175\5\0\1\174\30\0\2\176"+
    "\5\0\2\177\1\0\1\174\26\0\1\174\4\0\1\200"+
    "\1\0\2\200\1\0\1\200\13\0\2\200\2\0\1\200"+
    "\1\0\1\200\1\0\1\200\1\0\1\200\1\0\1\200"+
    "\1\0\1\200\1\0\1\200\1\0\1\200\2\0\1\200"+
    "\1\0\1\200\4\0\1\200\1\0\1\200\1\0\2\200"+
    "\1\0\1\200\2\0\1\200\3\0\1\200\1\0\1\200"+
    "\1\0\1\200\4\0\1\121\137\0\2\201\104\0\2\202"+
    "\50\0\1\121\1\122\4\121\2\0\1\121\1\0\6\121"+
    "\30\0\1\121\5\0\2\121\11\0\1\121\2\0\2\121"+
    "\6\0\2\121\1\0\4\126\1\127\4\0\6\126\14\0"+
    "\2\130\36\0\1\132\10\0\1\126\6\0\1\203\12\0"+
    "\1\203\124\0\2\204\100\0\2\205\132\0\2\206\64\0"+
    "\2\207\44\0\1\134\123\0\1\210\4\0\1\210\60\0"+
    "\1\134\1\135\4\134\2\0\1\134\1\0\6\134\30\0"+
    "\1\134\5\0\2\134\11\0\1\134\2\0\2\134\6\0"+
    "\2\134\2\0\1\140\105\0\1\142\104\0\2\144\2\0"+
    "\1\145\2\0\1\146\2\0\1\144\7\0\1\146\2\0"+
    "\1\146\3\0\2\147\40\0\1\151\10\0\1\144\6\0"+
    "\1\211\12\0\1\211\132\0\2\212\106\0\3\213\65\0"+
    "\2\214\134\0\2\215\31\0\1\216\12\0\1\216\154\0"+
    "\3\217\22\0\1\220\12\0\1\220\2\0\1\220\113\0"+
    "\2\221\50\0\1\222\1\223\3\224\1\225\2\0\1\222"+
    "\1\0\6\224\10\0\2\226\16\0\1\227\2\230\3\0"+
    "\1\231\1\222\11\0\1\222\2\0\1\232\1\222\6\0"+
    "\1\222\1\224\1\233\1\234\4\233\2\0\1\233\1\0"+
    "\6\233\20\0\2\235\6\0\1\233\5\0\1\236\1\233"+
    "\11\0\1\233\2\0\2\233\6\0\2\233\10\0\1\237"+
    "\12\0\1\237\2\0\1\237\132\0\2\240\1\0\1\162"+
    "\30\0\2\162\2\0\1\241\5\0\1\162\53\0\2\242"+
    "\3\0\1\243\10\0\1\162\46\0\2\244\104\0\2\245"+
    "\44\0\1\246\12\0\1\246\72\0\1\247\12\0\1\247"+
    "\73\0\1\250\12\0\1\250\123\0\2\251\100\0\2\252"+
    "\120\0\3\253\124\0\3\254\13\0\2\174\2\0\1\175"+
    "\5\0\1\174\37\0\2\177\30\0\1\174\6\0\1\255"+
    "\12\0\1\255\72\0\1\256\12\0\1\256\120\0\2\257"+
    "\54\0\1\200\1\0\2\200\1\0\1\200\5\0\1\260"+
    "\5\0\2\200\2\0\1\200\1\0\1\200\1\0\1\200"+
    "\1\0\1\200\1\0\1\200\1\0\1\200\1\0\1\200"+
    "\1\0\1\200\2\0\1\200\1\0\1\200\4\0\1\200"+
    "\1\0\1\200\1\0\2\200\1\0\1\200\2\0\1\200"+
    "\3\0\1\200\1\0\1\200\1\0\1\200\32\0\2\261"+
    "\114\0\2\261\53\0\1\262\12\0\1\262\74\0\1\263"+
    "\12\0\1\263\111\0\2\264\145\0\3\265\52\0\2\266"+
    "\44\0\1\134\1\135\4\134\2\0\1\134\1\0\6\134"+
    "\30\0\1\267\2\270\3\0\1\137\1\134\11\0\1\134"+
    "\2\0\2\134\6\0\2\134\7\0\1\271\12\0\1\271"+
    "\113\0\2\272\120\0\2\273\122\0\2\274\113\0\3\275"+
    "\22\0\1\276\12\0\1\276\2\0\1\276\65\0\1\277"+
    "\12\0\1\277\75\0\1\300\12\0\1\300\121\0\2\301"+
    "\45\0\1\302\1\224\2\302\1\303\4\0\6\302\10\0"+
    "\2\226\42\0\1\304\10\0\1\302\1\0\4\302\1\303"+
    "\4\0\6\302\10\0\2\226\42\0\1\304\10\0\1\302"+
    "\6\0\1\305\12\0\1\305\75\0\1\306\12\0\1\306"+
    "\71\0\1\307\12\0\1\307\2\0\1\307\57\0\1\222"+
    "\1\223\3\224\1\225\2\0\1\222\1\0\6\224\10\0"+
    "\2\226\16\0\1\222\5\0\2\222\11\0\1\222\2\0"+
    "\1\232\1\222\6\0\1\222\1\224\62\0\2\310\24\0"+
    "\1\233\165\0\2\311\22\0\1\233\1\234\4\233\2\0"+
    "\1\233\1\0\6\233\30\0\1\233\5\0\2\233\11\0"+
    "\1\233\2\0\2\233\6\0\2\233\46\0\2\312\47\0"+
    "\1\313\12\0\1\313\67\0\1\314\12\0\1\314\134\0"+
    "\3\315\3\0\1\316\111\0\2\317\72\0\3\320\33\0"+
    "\1\321\1\322\4\321\2\0\1\321\1\0\6\321\30\0"+
    "\1\323\2\324\3\0\1\325\1\321\11\0\1\321\2\0"+
    "\2\321\6\0\2\321\17\0\1\326\75\0\1\327\12\0"+
    "\1\327\73\0\1\330\12\0\1\330\2\0\1\330\115\0"+
    "\2\331\104\0\2\332\121\0\2\107\37\0\1\333\12\0"+
    "\1\333\73\0\1\334\12\0\1\334\113\0\2\335\143\0"+
    "\2\336\20\0\2\260\1\0\2\260\1\0\1\260\5\0"+
    "\1\337\5\0\2\260\2\0\1\260\1\0\1\260\1\0"+
    "\1\260\1\0\1\260\1\0\1\260\1\0\1\260\1\0"+
    "\1\260\1\0\1\260\2\0\1\260\1\0\2\260\3\0"+
    "\1\260\1\0\1\260\1\0\2\260\1\0\1\260\2\0"+
    "\1\260\3\0\1\260\1\0\1\260\1\0\1\260\12\0"+
    "\1\340\12\0\1\340\2\0\1\340\57\0\1\341\1\342"+
    "\4\341\2\0\1\341\1\0\6\341\24\0\2\343\2\0"+
    "\1\341\5\0\1\344\1\341\11\0\1\341\2\0\2\341"+
    "\6\0\3\341\1\345\3\346\1\347\2\0\1\341\1\0"+
    "\6\346\14\0\2\130\12\0\1\341\5\0\2\341\11\0"+
    "\1\341\2\0\1\350\1\341\6\0\1\341\1\346\6\0"+
    "\1\351\12\0\1\351\65\0\4\266\1\352\3\0\1\353"+
    "\6\266\4\0\1\353\47\0\1\354\10\0\1\266\53\0"+
    "\2\355\41\0\1\356\12\0\1\356\2\0\1\356\125\0"+
    "\2\357\46\0\1\360\12\0\1\360\2\0\1\360\127\0"+
    "\3\361\41\0\1\362\12\0\1\362\75\0\1\363\12\0"+
    "\1\363\100\0\1\364\100\0\1\31\153\0\2\365\33\0"+
    "\1\366\12\0\1\366\74\0\1\367\12\0\1\367\121\0"+
    "\2\370\135\0\3\371\74\0\2\372\72\0\3\373\3\0"+
    "\1\374\67\0\2\375\53\0\1\376\12\0\1\376\117\0"+
    "\2\377\51\0\2\316\2\0\1\u0100\5\0\1\316\30\0"+
    "\2\u0101\26\0\1\u0102\10\0\1\316\71\0\3\u0103\12\0"+
    "\1\u0104\1\u0105\4\u0104\2\0\1\u0104\1\0\6\u0104\30\0"+
    "\1\u0104\5\0\2\u0104\11\0\1\u0104\2\0\2\u0104\6\0"+
    "\2\u0104\2\0\1\321\151\0\2\u0106\36\0\1\321\1\322"+
    "\4\321\2\0\1\321\1\0\6\321\30\0\1\321\5\0"+
    "\2\321\11\0\1\321\2\0\2\321\6\0\2\321\10\0"+
    "\1\u0107\12\0\1\u0107\2\0\1\u0107\67\0\1\u0108\12\0"+
    "\1\u0108\2\0\1\u0108\70\0\1\u0109\12\0\1\u0109\121\0"+
    "\2\u010a\44\0\1\u010b\1\u010c\4\u010b\2\0\1\u010b\1\0"+
    "\6\u010b\20\0\2\u010d\6\0\1\u010b\5\0\1\u010e\1\u010b"+
    "\11\0\1\u010b\2\0\2\u010b\6\0\2\u010b\17\0\1\u010f"+
    "\76\0\1\u0110\12\0\1\u0110\2\0\1\u0110\141\0\2\u0111"+
    "\23\0\4\u0112\1\u0113\2\0\1\u0114\1\0\6\u0112\3\0"+
    "\1\u0114\2\0\1\u0114\1\0\2\u0115\16\0\3\u0116\3\0"+
    "\1\u0112\1\0\2\u0117\12\0\1\u0118\10\0\1\u0112\55\0"+
    "\1\u0119\41\0\1\u011a\12\0\1\u011a\63\0\1\341\112\0"+
    "\1\u011b\12\0\1\u011b\63\0\1\341\1\342\4\341\2\0"+
    "\1\341\1\0\6\341\30\0\1\341\5\0\2\341\11\0"+
    "\1\341\2\0\2\341\6\0\2\341\1\0\1\126\1\346"+
    "\2\126\1\127\4\0\6\126\14\0\2\130\36\0\1\132"+
    "\10\0\1\126\17\0\1\u011c\74\0\1\u011d\12\0\1\u011d"+
    "\114\0\2\u011e\136\0\2\u011f\30\0\1\u0120\12\0\1\u0120"+
    "\75\0\1\u0121\12\0\1\u0121\134\0\2\u0122\77\0\2\u0123"+
    "\111\0\2\144\50\0\1\u0124\100\0\1\47\103\0\1\u0125"+
    "\12\0\1\u0125\2\0\1\u0125\107\0\2\u0126\64\0\1\u0127"+
    "\12\0\1\u0127\2\0\1\u0127\57\0\1\222\1\u0128\4\222"+
    "\2\0\1\222\1\0\6\222\20\0\2\u0129\6\0\1\222"+
    "\5\0\1\u012a\1\222\11\0\1\222\2\0\2\222\6\0"+
    "\2\222\6\0\1\u012b\12\0\1\u012b\137\0\2\u012c\51\0"+
    "\1\u012d\4\0\1\u012d\60\0\1\140\1\u012e\1\u012f\2\140"+
    "\1\u0130\2\0\1\140\1\0\1\140\1\u012f\4\140\20\0"+
    "\2\u0131\2\u0132\2\u0133\2\0\1\140\5\0\2\140\11\0"+
    "\1\140\2\0\1\u0134\1\140\6\0\1\140\1\u012f\1\162"+
    "\2\0\101\162\12\0\1\u0135\12\0\1\u0135\2\0\1\u0135"+
    "\127\0\3\u0136\3\0\1\316\35\0\1\u0137\12\0\1\u0137"+
    "\137\0\2\u0138\1\0\1\72\111\0\2\u0139\30\0\1\u013a"+
    "\12\0\1\u013a\66\0\1\u0104\147\0\2\u013b\106\0\2\u013c"+
    "\47\0\1\u013d\12\0\1\u013d\73\0\1\107\141\0\2\u013e"+
    "\40\0\1\u010b\135\0\2\u013f\52\0\1\u010b\1\u010c\4\u010b"+
    "\2\0\1\u010b\1\0\6\u010b\30\0\1\u010b\5\0\2\u010b"+
    "\11\0\1\u010b\2\0\2\u010b\6\0\2\u010b\10\0\1\u0140"+
    "\12\0\1\u0140\2\0\1\u0140\70\0\1\u0141\12\0\1\u0141"+
    "\121\0\2\u0142\45\0\4\u0112\1\u0113\2\0\1\u0114\1\0"+
    "\6\u0112\3\0\1\u0114\2\0\1\u0114\1\0\2\u0115\26\0"+
    "\2\u0117\12\0\1\u0118\10\0\1\u0112\6\0\1\u0143\12\0"+
    "\1\u0143\137\0\2\u0144\73\0\2\u0145\50\0\1\u0146\12\0"+
    "\1\u0146\134\0\3\u0147\115\0\2\u0148\77\0\1\u0119\17\0"+
    "\1\u0149\22\0\1\126\102\0\1\u014a\12\0\1\u014a\73\0"+
    "\1\u014b\12\0\1\u014b\2\0\1\u014b\66\0\1\u014c\12\0"+
    "\1\u014c\125\0\2\u014d\133\0\3\u014e\52\0\2\u014f\56\0"+
    "\1\144\73\0\1\u0150\1\u0151\4\u0150\2\0\1\u0150\1\0"+
    "\6\u0150\30\0\1\u0150\5\0\2\u0150\11\0\1\u0150\2\0"+
    "\2\u0150\6\0\2\u0150\1\0\2\u0152\2\0\1\u0153\5\0"+
    "\1\u0152\14\0\2\u0154\16\0\3\u0155\3\0\1\u0152\26\0"+
    "\1\u0152\10\0\1\u0156\12\0\1\u0156\2\0\1\u0156\125\0"+
    "\2\u0157\36\0\1\134\1\u0158\1\u0159\2\134\1\u015a\2\0"+
    "\1\134\1\0\1\134\1\u0159\4\134\22\0\2\u015b\4\0"+
    "\1\134\5\0\2\134\11\0\1\134\2\0\1\u015c\1\134"+
    "\6\0\1\134\1\u0159\11\0\1\u015d\12\0\1\u015d\63\0"+
    "\1\222\165\0\2\u015e\22\0\1\222\1\u0128\4\222\2\0"+
    "\1\222\1\0\6\222\30\0\1\222\5\0\2\222\11\0"+
    "\1\222\2\0\2\222\6\0\2\222\17\0\1\u015f\136\0"+
    "\3\u0160\34\0\1\u0161\1\u012f\2\0\1\u0162\5\0\1\u0161"+
    "\24\0\2\u0131\2\u0132\2\u0133\26\0\1\u0163\10\0\1\u0161"+
    "\1\0\2\u0161\2\0\1\u0162\5\0\1\u0161\24\0\2\u0131"+
    "\2\u0132\2\u0133\26\0\1\u0163\10\0\1\u0161\6\0\1\u0164"+
    "\12\0\1\u0164\130\0\2\u0165\100\0\2\u0166\11\0\2\u0167"+
    "\1\0\1\u0168\35\0\1\u0169\12\0\1\u0169\16\0\2\u0166"+
    "\14\0\1\u0168\111\0\2\u016a\33\0\1\u016b\12\0\1\u016b"+
    "\127\0\2\u016c\45\0\1\u016d\12\0\1\u016d\143\0\2\u016e"+
    "\115\0\3\u016f\31\0\1\u0170\106\0\1\u0171\4\0\1\u0171"+
    "\71\0\1\u0172\12\0\1\u0172\73\0\1\110\141\0\2\u0173"+
    "\120\0\2\u0174\70\0\2\u0175\50\0\1\174\74\0\2\u0142"+
    "\2\u0112\1\u0176\2\0\1\u0114\1\0\1\u0112\1\u0142\4\u0112"+
    "\3\0\1\u0114\2\0\1\u0114\1\0\2\u0115\21\0\2\177"+
    "\3\0\2\u0117\12\0\1\u0118\10\0\1\u0142\7\0\1\u0177"+
    "\12\0\1\u0177\117\0\2\u0178\134\0\2\u0179\50\0\2\u017a"+
    "\62\0\1\u017b\12\0\1\u017b\40\0\2\u017c\113\0\3\u017d"+
    "\74\0\2\u017e\70\0\2\u017f\46\0\1\u0180\12\0\1\u0180"+
    "\2\0\1\u0180\117\0\2\u0181\52\0\1\u0182\12\0\1\u0182"+
    "\66\0\1\u0150\104\0\2\u0152\2\0\1\u0153\5\0\1\u0152"+
    "\14\0\2\u0154\53\0\1\u0152\6\0\1\u0183\12\0\1\u0183"+
    "\144\0\2\u0184\44\0\1\u0185\4\0\1\u0185\126\0\2\u0186"+
    "\47\0\1\u0187\12\0\1\u0187\62\0\1\u0188\1\u0159\2\0"+
    "\1\u0189\5\0\1\u0188\26\0\2\u015b\30\0\1\u018a\10\0"+
    "\1\u0188\1\0\2\u0188\2\0\1\u0189\5\0\1\u0188\26\0"+
    "\2\u015b\30\0\1\u018a\10\0\1\u0188\6\0\1\u018b\12\0"+
    "\1\u018b\114\0\2\25\136\0\2\u018c\34\0\1\302\155\0"+
    "\2\u018d\32\0\1\u018e\12\0\1\u018e\2\0\1\u018e\107\0"+
    "\2\374\63\0\1\u018f\12\0\1\u018f\117\0\2\u0190\20\0"+
    "\1\71\27\0\1\140\1\141\4\140\2\0\1\140\1\0"+
    "\6\140\30\0\1\140\5\0\1\u0191\1\140\11\0\1\140"+
    "\2\0\2\140\6\0\2\140\60\0\2\u0192\64\0\2\u0166"+
    "\114\0\3\u0193\3\0\1\u0194\120\0\3\u0195\24\0\1\162"+
    "\141\0\2\u0196\46\0\1\u0197\12\0\1\u0197\2\0\1\u0197"+
    "\132\0\2\72\37\0\1\u0198\12\0\1\u0198\74\0\1\u0199"+
    "\12\0\1\u0199\2\0\1\u0199\57\0\1\321\1\322\4\321"+
    "\2\0\1\321\1\0\6\321\30\0\1\u019a\2\u019b\3\0"+
    "\1\325\1\321\11\0\1\321\2\0\2\321\6\0\2\321"+
    "\102\0\2\u019c\52\0\3\u019d\103\0\3\u019e\44\0\1\u019f"+
    "\12\0\1\u019f\67\0\1\u01a0\12\0\1\u01a0\74\0\1\u01a1"+
    "\12\0\1\u01a1\2\0\1\u01a1\115\0\2\u01a2\112\0\2\u01a3"+
    "\74\0\2\u01a4\50\0\1\u01a5\1\u01a6\4\u01a5\2\0\1\u01a5"+
    "\1\0\6\u01a5\30\0\1\u01a5\2\0\2\u01a7\1\0\1\u01a8"+
    "\1\u01a5\11\0\1\u01a5\2\0\2\u01a5\6\0\2\u01a5\1\u01a9"+
    "\1\u01aa\4\u01a9\2\0\1\u01a9\1\0\6\u01a9\30\0\1\u01ab"+
    "\2\u01ac\3\0\1\u01ad\1\u01a9\11\0\1\u01a9\2\0\2\u01a9"+
    "\6\0\2\u01a9\6\0\1\u01ae\12\0\1\u01ae\134\0\3\u01af"+
    "\44\0\1\u01b0\12\0\1\u01b0\72\0\1\u01b1\12\0\1\u01b1"+
    "\61\0\1\u01b2\1\u01b3\4\u01b2\2\0\1\u01b2\1\0\6\u01b2"+
    "\30\0\1\u01b2\5\0\2\u01b2\11\0\1\u01b2\2\0\2\u01b2"+
    "\6\0\2\u01b2\17\0\1\u01b4\75\0\1\u01b5\12\0\1\u01b5"+
    "\143\0\2\u01b6\74\0\3\u01b7\44\0\1\u01b8\12\0\1\u01b8"+
    "\163\0\2\u01b9\11\0\1\u01ba\12\0\1\u01ba\154\0\3\u01bb"+
    "\65\0\2\u01bc\77\0\2\u01bd\46\0\1\u01be\12\0\1\u01be"+
    "\2\0\1\u01be\132\0\2\u01bf\1\0\1\71\73\0\2\u01c0"+
    "\113\0\2\u01c1\31\0\1\140\1\u01c2\1\u01c3\2\140\1\u01c4"+
    "\2\0\1\140\1\0\1\140\1\u01c3\4\140\20\0\2\u0131"+
    "\6\0\1\140\5\0\2\140\11\0\1\140\2\0\2\140"+
    "\6\0\1\140\1\u01c3\6\0\1\u01c5\12\0\1\u01c5\134\0"+
    "\3\316\44\0\1\u01c6\12\0\1\u01c6\100\0\1\u01c7\134\0"+
    "\2\u01c8\111\0\2\u01c9\50\0\1\u01ca\67\0\2\u019d\2\0"+
    "\1\u01cb\5\0\1\u019d\24\0\2\u01cc\43\0\1\u019d\30\0"+
    "\2\u01cd\156\0\2\u01ce\11\0\1\u01cf\12\0\1\u01cf\74\0"+
    "\1\u01d0\12\0\1\u01d0\61\0\1\u01d1\1\u01d2\4\u01d1\2\0"+
    "\1\u01d1\1\0\6\u01d1\20\0\2\u01d3\6\0\1\u01d1\5\0"+
    "\1\u01d4\1\u01d1\11\0\1\u01d1\2\0\2\u01d1\6\0\2\u01d1"+
    "\40\0\2\u01d5\114\0\3\u01d6\35\0\1\u01a5\137\0\2\u01d7"+
    "\50\0\1\u01a5\1\u01a6\4\u01a5\2\0\1\u01a5\1\0\6\u01a5"+
    "\30\0\1\u01a5\5\0\2\u01a5\11\0\1\u01a5\2\0\2\u01a5"+
    "\6\0\2\u01a5\2\0\1\u01a9\151\0\2\u01d8\36\0\1\u01a9"+
    "\1\u01aa\4\u01a9\2\0\1\u01a9\1\0\6\u01a9\30\0\1\u01a9"+
    "\5\0\2\u01a9\11\0\1\u01a9\2\0\2\u01a9\6\0\2\u01a9"+
    "\17\0\1\u01d9\130\0\2\u01da\144\0\2\u01db\14\0\1\266"+
    "\75\0\1\u01b2\113\0\1\u01dc\12\0\1\u01dc\2\0\1\u01dc"+
    "\67\0\1\u01dd\12\0\1\u01dd\2\0\1\u01dd\60\0\2\u01de"+
    "\2\0\1\u01df\2\0\1\u01e0\2\0\1\u01de\7\0\1\u01e0"+
    "\2\0\1\u01e0\5\0\2\u01e1\12\0\3\u01e2\3\0\1\u01de"+
    "\15\0\1\u01e3\10\0\1\u01de\30\0\2\u0152\156\0\2\u01e4"+
    "\21\0\1\u01e5\76\0\1\u01e6\12\0\1\u01e6\2\0\1\u01e6"+
    "\65\0\1\u01e7\12\0\1\u01e7\75\0\1\u01e8\12\0\1\u01e8"+
    "\72\0\1\u01e9\12\0\1\u01e9\72\0\1\u01ea\12\0\1\u01ea"+
    "\67\0\1\u01eb\12\0\1\u01eb\72\0\1\u01ec\12\0\1\u01ec"+
    "\65\0\1\u01ed\1\u01c3\2\0\1\u01ee\5\0\1\u01ed\24\0"+
    "\2\u0131\43\0\1\u01ed\1\0\2\u01ed\2\0\1\u01ee\5\0"+
    "\1\u01ed\24\0\2\u0131\43\0\1\u01ed\6\0\1\u01ef\12\0"+
    "\1\u01ef\103\0\1\u01f0\100\0\1\316\103\0\1\u01f1\12\0"+
    "\1\u01f1\2\0\1\u01f1\70\0\1\u01f2\12\0\1\u01f2\67\0"+
    "\1\u01f3\12\0\1\u01f3\67\0\2\u01e5\1\0\2\u01e5\1\0"+
    "\1\u01e5\5\0\1\u01f4\5\0\2\u01e5\2\0\1\u01e5\1\0"+
    "\1\u01e5\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5\1\0"+
    "\1\u01e5\1\0\1\u01e5\1\0\1\u01e5\2\0\1\u01e5\1\u01f5"+
    "\1\u01f6\1\u01e5\3\0\1\u01e5\1\0\1\u01e5\1\0\2\u01e5"+
    "\1\0\1\u01e5\2\0\1\u01e5\3\0\1\u01e5\1\0\1\u01e5"+
    "\1\0\1\u01e5\10\0\1\u01f7\12\0\1\u01f7\130\0\2\u01f8"+
    "\46\0\1\u01f9\12\0\1\u01f9\103\0\1\u01fa\76\0\1\u01fb"+
    "\12\0\1\u01fb\2\0\1\u01fb\71\0\1\u0112\75\0\1\u01d1"+
    "\135\0\2\u01fc\52\0\1\u01d1\1\u01d2\4\u01d1\2\0\1\u01d1"+
    "\1\0\6\u01d1\30\0\1\u01d1\5\0\2\u01d1\11\0\1\u01d1"+
    "\2\0\2\u01d1\6\0\2\u01d1\1\0\4\u01d5\1\u01fd\3\0"+
    "\1\u01fe\6\u01d5\4\0\1\u01fe\47\0\1\u01ff\10\0\1\u01d5"+
    "\53\0\2\u0112\31\0\1\u01a5\1\u01a6\4\u01a5\2\0\1\u01a5"+
    "\1\0\6\u01a5\20\0\2\u0200\6\0\1\u01a8\2\u0201\3\0"+
    "\1\u01a8\1\u01a5\11\0\1\u01a5\2\0\2\u01a5\6\0\2\u01a5"+
    "\1\u01a9\1\u01aa\4\u01a9\2\0\1\u01a9\1\0\6\u01a9\10\0"+
    "\2\u0202\16\0\1\u01a9\5\0\1\u01ad\1\u01a9\11\0\1\u01a9"+
    "\2\0\2\u01a9\6\0\2\u01a9\10\0\1\u0203\12\0\1\u0203"+
    "\2\0\1\u0203\107\0\2\u0204\73\0\1\u0205\134\0\2\u0206"+
    "\47\0\1\u0207\12\0\1\u0207\62\0\2\u01de\2\0\1\u01df"+
    "\2\0\1\u01e0\2\0\1\u01de\7\0\1\u01e0\2\0\1\u01e0"+
    "\5\0\2\u01e1\36\0\1\u01e3\10\0\1\u01de\6\0\1\u0208"+
    "\12\0\1\u0208\134\0\3\u0209\73\0\2\u020a\52\0\1\u020b"+
    "\12\0\1\u020b\146\0\2\u020c\41\0\1\u020d\71\0\2\u01e5"+
    "\1\0\2\u01e5\1\0\1\u01e5\5\0\1\u01f4\5\0\2\u01e5"+
    "\2\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5"+
    "\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5"+
    "\2\0\1\u01e5\1\0\2\u01e5\3\0\1\u01e5\1\0\1\u01e5"+
    "\1\0\2\u01e5\1\0\1\u01e5\2\0\1\u01e5\3\0\1\u01e5"+
    "\1\0\1\u01e5\1\0\1\u01e5\13\0\1\u020e\12\0\1\u020e"+
    "\100\0\1\u020f\170\0\2\u0210\14\0\1\u0161\133\0\2\u0211"+
    "\114\0\3\u0212\73\0\2\u0194\53\0\1\u0213\12\0\1\u0213"+
    "\73\0\1\u0214\12\0\1\u0214\2\0\1\u0214\125\0\2\u0215"+
    "\140\0\2\u0216\32\0\2\u0217\131\0\1\u0218\130\0\2\u0219"+
    "\7\0\2\u01e5\1\0\2\u01e5\1\0\1\u01e5\5\0\1\u01f4"+
    "\5\0\2\u01e5\2\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5"+
    "\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5"+
    "\1\0\1\u01e5\2\0\1\u01e5\1\0\2\u01e5\3\0\1\u01e5"+
    "\1\0\1\u01e5\1\0\2\u01e5\1\0\1\u01e5\2\0\1\u01e5"+
    "\3\0\1\u01e5\1\u0219\1\u021a\1\0\1\u01e5\11\0\1\u021b"+
    "\12\0\1\u021b\117\0\2\u021c\20\0\1\u021d\47\0\1\u021e"+
    "\4\0\1\u021e\63\0\2\u01fa\1\0\2\u01fa\1\0\1\u01fa"+
    "\5\0\1\u021f\5\0\2\u01fa\2\0\1\u01fa\1\0\1\u01fa"+
    "\1\0\1\u01fa\1\0\1\u01fa\1\0\1\u01fa\1\0\1\u01fa"+
    "\1\0\1\u01fa\1\0\1\u01fa\2\0\1\u01fa\1\0\2\u01fa"+
    "\3\0\1\u01fa\1\0\1\u01fa\1\0\2\u01fa\1\0\1\u01fa"+
    "\2\0\1\u01fa\3\0\1\u01fa\1\0\1\u01fa\1\0\1\u01fa"+
    "\13\0\1\u0220\12\0\1\u0220\143\0\2\u0221\30\0\1\u0222"+
    "\12\0\1\u0222\130\0\2\u0223\122\0\2\u0224\30\0\1\u0225"+
    "\12\0\1\u0225\120\0\2\u0226\116\0\2\u0227\41\0\2\u0205"+
    "\1\0\2\u0205\1\0\1\u0205\5\0\1\u0228\5\0\2\u0205"+
    "\2\0\1\u0205\1\0\1\u0205\1\0\1\u0205\1\0\1\u0205"+
    "\1\0\1\u0205\1\0\1\u0205\1\0\1\u0205\1\0\1\u0205"+
    "\2\0\1\u0205\1\0\2\u0205\3\0\1\u0205\1\0\1\u0205"+
    "\1\0\2\u0205\1\0\1\u0205\2\0\1\u0205\3\0\1\u0205"+
    "\1\0\1\u0205\1\0\1\u0205\13\0\1\u0229\12\0\1\u0229"+
    "\73\0\1\u0152\102\0\1\u022a\12\0\1\u022a\125\0\2\u022b"+
    "\74\0\2\u022c\122\0\3\u022d\124\0\3\u022e\65\0\2\u022f"+
    "\43\0\1\u0188\103\0\1\u0230\12\0\1\u0230\2\0\1\u0230"+
    "\76\0\1\u0231\66\0\1\71\2\0\101\71\50\0\2\u0232"+
    "\46\0\1\u0233\12\0\1\u0233\2\0\1\u0233\125\0\2\u0234"+
    "\47\0\1\u0235\12\0\1\u0235\100\0\1\u0236\150\0\2\u0237"+
    "\77\0\1\u0218\17\0\1\u0238\27\0\1\u0239\71\0\2\u01e5"+
    "\1\0\2\u01e5\1\0\1\u01e5\5\0\1\u023a\5\0\2\u01e5"+
    "\2\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5"+
    "\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5\1\0\1\u01e5"+
    "\2\0\1\u01e5\1\0\2\u01e5\3\0\1\u01e5\1\0\1\u01e5"+
    "\1\0\2\u01e5\1\0\1\u01e5\2\0\1\u01e5\3\0\1\u01e5"+
    "\1\0\1\u01e5\1\0\1\u01e5\12\0\1\u023b\12\0\1\u023b"+
    "\2\0\1\u023b\132\0\2\u023c\1\0\1\u021d\27\0\1\66"+
    "\1\u023d\3\u023e\1\u023f\2\0\1\66\1\0\1\66\1\u023e"+
    "\1\66\1\u0240\2\66\21\0\1\u0241\6\0\1\66\5\0"+
    "\2\66\11\0\1\66\2\0\2\66\6\0\1\66\1\u023e"+
    "\30\0\2\u0242\131\0\1\u0243\42\0\1\u0142\143\0\3\u0244"+
    "\42\0\1\u0245\12\0\1\u0245\72\0\1\u0246\12\0\1\u0246"+
    "\154\0\3\u0247\20\0\1\u0248\12\0\1\u0248\124\0\2\u0249"+
    "\55\0\1\u024a\12\0\1\u024a\136\0\1\u024b\132\0\2\u024c"+
    "\12\0\1\u024d\12\0\1\u024d\2\0\1\u024d\127\0\3\u024e"+
    "\3\0\1\u024f\30\0\2\u0250\2\0\1\u0251\2\0\1\u01e0"+
    "\2\0\1\u0250\7\0\1\u01e0\2\0\1\u01e0\21\0\3\u0252"+
    "\3\0\1\u0250\26\0\1\u0250\10\0\1\u0253\12\0\1\u0253"+
    "\2\0\1\u0253\65\0\1\u0254\12\0\1\u0254\164\0\2\u0255"+
    "\52\0\2\u0256\41\0\2\u0231\1\0\2\u0231\1\0\1\u0231"+
    "\5\0\1\u0257\5\0\2\u0231\2\0\1\u0231\1\0\1\u0231"+
    "\1\0\1\u0231\1\0\1\u0231\1\0\1\u0231\1\0\1\u0231"+
    "\1\0\1\u0231\1\0\1\u0231\2\0\1\u0231\1\0\2\u0231"+
    "\3\0\1\u0231\1\0\1\u0231\1\0\2\u0231\1\0\1\u0231"+
    "\2\0\1\u0231\3\0\1\u0231\1\0\1\u0231\1\0\1\u0231"+
    "\2\0\1\u01ed\2\0\101\u01ed\13\0\1\u0258\12\0\1\u0258"+
    "\72\0\1\u0259\12\0\1\u0259\163\0\2\u025a\55\0\2\u025b"+
    "\71\0\2\u025c\44\0\74\u025d\1\0\11\u025d\55\0\1\u025e"+
    "\105\0\1\u025f\41\0\1\u0260\12\0\1\u0260\72\0\1\u0261"+
    "\12\0\1\u0261\62\0\1\u0262\1\u023e\2\u0262\1\u0263\5\0"+
    "\1\u0262\1\0\1\u0264\23\0\1\u0241\43\0\1\u0262\1\0"+
    "\4\u0262\1\u0263\5\0\1\u0262\1\0\1\u0264\23\0\1\u0241"+
    "\43\0\1\u0262\6\0\1\u0265\12\0\1\u0265\125\0\1\u0241"+
    "\55\0\1\u0266\151\0\1\u0243\17\0\1\u0267\40\0\2\u0268"+
    "\64\0\1\u0269\12\0\1\u0269\2\0\1\u0269\66\0\1\u026a"+
    "\12\0\1\u026a\71\0\1\u026b\12\0\1\u026b\134\0\3\u0201"+
    "\135\0\2\u026c\57\0\1\u024b\17\0\1\u026d\27\0\1\u026e"+
    "\77\0\1\u026f\12\0\1\u026f\143\0\2\u0270\22\0\1\u0271"+
    "\1\u0272\4\u0271\2\0\1\u0271\1\0\6\u0271\30\0\1\u0271"+
    "\5\0\2\u0271\11\0\1\u0271\2\0\2\u0271\6\0\2\u0271"+
    "\1\0\2\u0250\2\0\1\u0251\2\0\1\u01e0\2\0\1\u0250"+
    "\7\0\1\u01e0\2\0\1\u01e0\56\0\1\u0250\6\0\1\u0273"+
    "\12\0\1\u0273\137\0\2\u0274\77\0\2\u0275\55\0\1\u0276"+
    "\105\0\1\u0277\77\0\1\u0278\12\0\1\u0278\136\0\1\u0279"+
    "\42\0\1\u01ed\175\0\2\u027a\21\0\1\u027b\74\0\1\u027c"+
    "\12\0\1\u027c\56\0\2\u027c\4\0\74\u025d\1\u027d\11\u025d"+
    "\55\0\1\u025e\17\0\1\u027e\65\0\1\u025f\17\0\1\u027f"+
    "\22\0\1\u019d\133\0\2\u0280\53\0\1\u0281\12\0\1\u0281"+
    "\137\0\1\u0282\31\0\74\u0283\1\0\11\u0283\6\0\1\u0284"+
    "\12\0\1\u0284\75\0\1\u0285\12\0\1\u0285\61\0\1\u0286"+
    "\1\u0287\4\u0286\2\0\1\u0286\1\0\6\u0286\30\0\1\u0286"+
    "\5\0\1\u0288\1\u0286\2\0\2\u0289\5\0\1\u0286\2\0"+
    "\2\u0286\6\0\2\u0286\17\0\1\u028a\105\0\1\u028b\66\0"+
    "\74\u028c\1\0\11\u028c\3\0\2\u026e\1\0\2\u026e\1\0"+
    "\1\u026e\5\0\1\u028d\5\0\2\u026e\2\0\1\u026e\1\0"+
    "\1\u026e\1\0\1\u026e\1\0\1\u026e\1\0\1\u026e\1\0"+
    "\1\u026e\1\0\1\u026e\1\0\1\u026e\2\0\1\u026e\1\0"+
    "\2\u026e\3\0\1\u026e\1\0\1\u026e\1\0\2\u026e\1\0"+
    "\1\u026e\2\0\1\u026e\3\0\1\u026e\1\0\1\u026e\1\0"+
    "\1\u026e\14\0\1\u01de\143\0\3\u028e\35\0\1\u0271\112\0"+
    "\1\u028f\12\0\1\u028f\71\0\1\u0290\12\0\1\u0290\120\0"+
    "\2\u0291\60\0\1\u0292\12\0\1\u0292\2\0\1\u0292\134\0"+
    "\1\u0293\132\0\2\u0294\57\0\1\u0279\17\0\1\u0295\27\0"+
    "\1\u0296\141\0\2\u0297\50\0\1\u0298\145\0\1\u0299\26\0"+
    "\74\u029a\1\0\11\u029a\74\u029b\1\0\11\u029b\1\u021d\2\0"+
    "\101\u021d\12\0\1\u029c\12\0\1\u029c\2\0\1\u029c\57\0"+
    "\1\66\1\67\4\66\2\0\1\66\1\0\4\66\1\u029d"+
    "\1\66\30\0\1\66\5\0\2\66\11\0\1\66\2\0"+
    "\2\66\6\0\2\66\74\u0283\1\u029e\11\u0283\20\0\1\u029f"+
    "\4\0\1\u029f\72\0\1\u01d5\75\0\1\u0286\103\0\1\u0286"+
    "\1\u0287\4\u0286\2\0\1\u0286\1\0\6\u0286\30\0\1\u0286"+
    "\5\0\2\u0286\11\0\1\u0286\2\0\2\u0286\6\0\2\u0286"+
    "\50\0\3\u02a0\43\0\1\u02a1\12\0\1\u02a1\2\0\1\u02a1"+
    "\62\0\2\u028b\1\0\2\u028b\1\0\1\u028b\5\0\1\u02a2"+
    "\5\0\2\u028b\2\0\1\u028b\1\0\1\u028b\1\0\1\u028b"+
    "\1\0\1\u028b\1\0\1\u028b\1\0\1\u028b\1\0\1\u028b"+
    "\1\0\1\u028b\2\0\1\u028b\1\0\2\u028b\3\0\1\u028b"+
    "\1\0\1\u028b\1\0\2\u028b\1\0\1\u028b\2\0\1\u028b"+
    "\3\0\1\u028b\1\0\1\u028b\1\0\1\u028b\2\0\74\u028c"+
    "\1\u02a3\11\u028c\55\0\1\u02a4\60\0\2\u02a5\64\0\1\u02a6"+
    "\12\0\1\u02a6\2\0\1\u02a6\117\0\2\u0250\74\0\2\u02a7"+
    "\122\0\2\u02a8\113\0\1\u0293\17\0\1\u02a9\27\0\1\u02aa"+
    "\66\0\74\u02ab\1\0\11\u02ab\53\0\2\u02ac\131\0\2\u02ad"+
    "\61\0\1\u02ae\112\0\2\u02af\22\0\74\u029a\1\u02b0\11\u029a"+
    "\74\u029b\1\u02b1\11\u029b\11\0\1\u02b2\12\0\1\u02b2\140\0"+
    "\1\u02b3\56\0\2\u02b4\116\0\2\u02b5\110\0\2\u02b6\113\0"+
    "\1\u02b7\107\0\1\u02b8\103\0\1\u02a4\17\0\1\u02b9\10\0"+
    "\1\u0271\1\u0272\4\u0271\1\u02ba\1\0\1\u0271\1\0\6\u0271"+
    "\1\0\1\u02ba\26\0\1\u0271\5\0\2\u0271\11\0\1\u0271"+
    "\2\0\2\u0271\6\0\2\u0271\11\0\1\u02bb\12\0\1\u02bb"+
    "\127\0\2\u02bc\47\0\1\u02bd\12\0\1\u02bd\61\0\74\u02be"+
    "\1\0\11\u02be\53\0\2\u02bf\31\0\74\u02ab\1\u02c0\11\u02ab"+
    "\100\0\2\u02c1\23\0\1\u02c2\143\0\1\u02ae\17\0\1\u02c3"+
    "\101\0\3\u02c4\71\0\1\u02c5\105\0\1\u02c6\40\0\1\u0262"+
    "\155\0\2\u02c7\120\0\2\u02c8\17\0\1\u02c9\12\0\1\u02c9"+
    "\136\0\1\u02b7\17\0\1\u02ca\72\0\2\u02cb\22\0\74\u02cc"+
    "\1\0\11\u02cc\30\0\2\u024f\66\0\1\u0250\143\0\3\u02cd"+
    "\135\0\2\u02ce\2\0\74\u02be\1\u02cf\11\u02be\100\0\2\u02d0"+
    "\63\0\1\u02d1\45\0\1\u02d2\143\0\1\u02d3\30\0\74\u02d4"+
    "\1\0\11\u02d4\6\0\1\u02d5\12\0\1\u02d5\146\0\2\u02d6"+
    "\104\0\2\u02d7\113\0\3\u02d8\52\0\2\u02d9\146\0\2\u02da"+
    "\2\0\74\u02db\1\0\11\u02db\71\0\3\u02dc\12\0\74\u02cc"+
    "\1\u02dd\11\u02cc\36\0\2\u02de\65\0\1\u02df\145\0\1\u02e0"+
    "\45\0\1\u02e1\150\0\2\u02e2\77\0\1\u02e3\105\0\1\u02d3"+
    "\17\0\1\u02e4\10\0\74\u02d4\1\u02e5\11\u02d4\75\0\1\47"+
    "\101\0\3\u02e6\103\0\3\u02e7\20\0\1\u02e8\12\0\1\u02e8"+
    "\103\0\1\u02e9\66\0\74\u02db\1\u02ea\11\u02db\6\0\1\u02eb"+
    "\12\0\1\u02eb\143\0\1\u02ec\56\0\2\u01de\57\0\2\u02df"+
    "\1\0\2\u02df\1\0\1\u02df\5\0\1\u02ed\5\0\2\u02df"+
    "\2\0\1\u02df\1\0\1\u02df\1\0\1\u02df\1\0\1\u02df"+
    "\1\0\1\u02df\1\0\1\u02df\1\0\1\u02df\1\0\1\u02df"+
    "\2\0\1\u02df\1\0\2\u02df\3\0\1\u02df\1\0\1\u02df"+
    "\1\0\2\u02df\1\0\1\u02df\2\0\1\u02df\3\0\1\u02df"+
    "\1\0\1\u02df\1\0\1\u02df\64\0\2\u02ee\77\0\1\u02ef"+
    "\121\0\3\u02f0\67\0\1\u02e3\17\0\1\u02f1\10\0\74\u02f2"+
    "\1\0\11\u02f2\57\0\1\u02f3\34\0\1\u02f4\12\0\1\u02f4"+
    "\72\0\1\u02f5\12\0\1\u02f5\161\0\1\110\13\0\2\u02e9"+
    "\1\0\2\u02e9\1\0\1\u02e9\5\0\1\u02f6\5\0\2\u02e9"+
    "\2\0\1\u02e9\1\0\1\u02e9\1\0\1\u02e9\1\0\1\u02e9"+
    "\1\0\1\u02e9\1\0\1\u02e9\1\0\1\u02e9\1\0\1\u02e9"+
    "\2\0\1\u02e9\1\0\2\u02e9\3\0\1\u02e9\1\0\1\u02e9"+
    "\1\0\2\u02e9\1\0\1\u02e9\2\0\1\u02e9\3\0\1\u02e9"+
    "\1\0\1\u02e9\1\0\1\u02e9\61\0\1\u02f7\123\0\1\126"+
    "\72\0\2\u02f8\77\0\1\u02f9\121\0\3\u02fa\67\0\1\u02ef"+
    "\17\0\1\u02fb\16\0\1\u02fc\12\0\1\u02fc\64\0\74\u02fd"+
    "\1\0\11\u02fd\74\u02f2\1\u02fe\11\u02f2\62\0\2\u02ff\117\0"+
    "\1\u0300\105\0\1\u0301\65\0\1\u0302\112\0\2\u0303\113\0"+
    "\3\u0304\67\0\1\u02f9\17\0\1\u0305\16\0\1\u0306\12\0"+
    "\1\u0306\64\0\74\u0307\1\0\11\u0307\75\0\1\302\10\0"+
    "\74\u02fd\1\u0308\11\u02fd\57\0\1\u0309\117\0\3\u030a\13\0"+
    "\2\u0300\2\0\1\u030b\5\0\1\u0300\16\0\2\53\6\0"+
    "\2\u030c\41\0\1\u0300\1\0\2\u0301\2\47\1\u030d\4\0"+
    "\1\47\1\u0301\4\47\10\0\2\52\2\53\6\0\2\u030c"+
    "\30\0\1\76\10\0\1\u0301\55\0\1\u0302\17\0\1\u030e"+
    "\101\0\3\u030f\20\0\1\u0310\12\0\1\u0310\64\0\74\u0311"+
    "\1\0\11\u0311\75\0\1\u0312\10\0\74\u0307\1\u0313\11\u0307"+
    "\57\0\1\u0314\110\0\2\u0315\30\0\1\u0316\12\0\1\u0316"+
    "\72\0\1\u0317\12\0\1\u0317\114\0\2\25\21\0\2\u0318"+
    "\37\0\1\u0319\12\0\1\u0319\64\0\74\u031a\1\0\11\u031a"+
    "\6\0\1\u031b\12\0\1\u031b\161\0\1\266\10\0\74\u0311"+
    "\1\u031c\11\u0311\1\0\2\u0312\2\0\1\u031d\2\0\1\146"+
    "\2\0\1\u0312\7\0\1\146\2\0\1\146\56\0\1\u0312"+
    "\57\0\1\u031e\110\0\2\u031f\113\0\3\u0320\107\0\1\u0321"+
    "\17\0\1\u0322\12\0\1\u0322\71\0\1\163\12\0\1\163"+
    "\73\0\1\u0323\12\0\1\u0323\63\0\74\u031a\1\u0324\11\u031a"+
    "\75\0\1\u0112\67\0\1\u0325\34\0\1\u0326\12\0\1\u0326"+
    "\146\0\2\u0327\113\0\3\u0328\20\0\1\u0329\12\0\1\u0329"+
    "\65\0\2\u0321\2\0\1\u032a\5\0\1\u0321\53\0\2\242"+
    "\14\0\1\u0321\10\0\1\u032b\12\0\1\u032b\2\0\1\u032b"+
    "\67\0\1\u032c\12\0\1\u032c\2\0\1\u032c\136\0\1\u032d"+
    "\110\0\2\u032e\31\0\1\u032f\12\0\1\u032f\154\0\3\u0330"+
    "\20\0\1\u0331\12\0\1\u0331\161\0\1\u0332\16\0\1\u0333"+
    "\12\0\1\u0333\75\0\1\u0334\12\0\1\u0334\72\0\1\u0335"+
    "\12\0\1\u0335\143\0\2\u0336\113\0\3\u0337\22\0\1\u0338"+
    "\12\0\1\u0338\2\0\1\u0338\65\0\1\u0339\12\0\1\u0339"+
    "\161\0\1\u033a\11\0\2\u0332\2\0\1\u033b\5\0\1\u0332"+
    "\30\0\2\u0101\37\0\1\u0332\7\0\1\u033c\12\0\1\u033c"+
    "\75\0\1\u0300\105\0\1\u0301\164\0\3\u033d\20\0\1\u033e"+
    "\12\0\1\u033e\75\0\1\u033f\12\0\1\u033f\156\0\1\u0340"+
    "\11\0\2\u033a\2\0\1\u0341\5\0\1\u033a\26\0\2\u0132"+
    "\2\u0133\37\0\1\u033a\6\0\1\u0342\12\0\1\u0342\74\0"+
    "\1\u0343\12\0\1\u0343\2\0\1\u0343\65\0\1\u0344\12\0"+
    "\1\u0344\161\0\1\u0345\22\0\1\u0312\74\0\2\u0340\2\0"+
    "\1\u0346\5\0\1\u0340\26\0\2\u015b\41\0\1\u0340\6\0"+
    "\1\u0347\12\0\1\u0347\73\0\1\u0348\12\0\1\u0348\74\0"+
    "\1\u0349\12\0\1\u0349\156\0\1\u01d5\11\0\2\u0345\2\0"+
    "\1\u034a\2\0\1\u01e0\2\0\1\u0345\7\0\1\u01e0\2\0"+
    "\1\u01e0\5\0\2\u01e1\47\0\1\u0345\6\0\1\u034b\12\0"+
    "\1\u034b\73\0\1\u034c\12\0\1\u034c\73\0\1\u034d\12\0"+
    "\1\u034d\2\0\1\u034d\71\0\1\u0321\101\0\1\u034e\12\0"+
    "\1\u034e\73\0\1\u034f\12\0\1\u034f\73\0\1\u0350\12\0"+
    "\1\u0350\2\0\1\u0350\70\0\1\u0351\12\0\1\u0351\70\0"+
    "\1\u0352\12\0\1\u0352\73\0\1\u0353\12\0\1\u0353\2\0"+
    "\1\u0353\70\0\1\u0354\12\0\1\u0354\73\0\1\u0332\103\0"+
    "\1\u0355\12\0\1\u0355\2\0\1\u0355\70\0\1\u0356\12\0"+
    "\1\u0356\73\0\1\u033a\104\0\1\u0357\12\0\1\u0357\73\0"+
    "\1\u0340\105\0\1\u0345\73\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[55790];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\11\1\1\1\11\1\1\55\0\1\11"+
    "\1\1\30\0\2\11\1\1\2\0\1\1\6\0\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\1\56\0"+
    "\1\11\3\1\1\0\1\1\1\0\2\1\1\11\1\1"+
    "\1\0\1\1\30\0\1\1\31\0\1\11\2\1\1\0"+
    "\1\1\13\0\1\11\1\1\1\0\5\1\33\0\1\11"+
    "\1\1\5\0\1\11\1\1\1\0\1\1\31\0\1\1"+
    "\1\0\1\1\3\0\3\1\3\0\1\1\24\0\1\11"+
    "\6\0\1\11\1\1\6\0\3\1\1\0\1\1\64\0"+
    "\1\1\10\0\1\1\12\0\1\11\1\1\1\0\1\1"+
    "\1\11\2\1\1\0\1\1\4\0\1\11\1\1\16\0"+
    "\3\1\14\0\1\11\1\1\1\0\1\1\150\0\4\1"+
    "\60\0\1\11\1\1\23\0\1\11\2\1\24\0\1\1"+
    "\272\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[855];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "1.2"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public CaseLawAuthorities() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
		//annotationEntity.setValue("value");
	} 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaseLawAuthorities(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            }
          case 23: break;
          case 2: 
            { addText(yytext());
		position++;
            }
          case 24: break;
          case 3: 
            { annotate(new EuropeanCaseLawAuthority(), "EU_EPO", true, true);
            }
          case 25: break;
          case 4: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            }
          case 26: break;
          case 5: 
            { annotate(new CaseLawAuthority(), "IT_PTR", true, true);
            }
          case 27: break;
          case 6: 
            { annotate(new CaseLawAuthority(), "IT_CASS", true, true);
            }
          case 28: break;
          case 7: 
            { annotate(new EuropeanCaseLawAuthority(), "EU_CJEU", true, true);
            }
          case 29: break;
          case 8: 
            { annotate(new EuropeanCaseLawAuthority(), "CE_ECHR", true, true);
            }
          case 30: break;
          case 9: 
            { annotate(new CaseLawAuthority(), "IT_CSS", true, true);
            }
          case 31: break;
          case 10: 
            { annotate(new CaseLawAuthority(), "IT_CPP", true, true);
            }
          case 32: break;
          case 11: 
            { annotate(new CaseLawAuthority(), "IT_COST", true, true);
            }
          case 33: break;
          case 12: 
            { annotate(new CaseLawAuthority(), "IT_PCR", true, true);
            }
          case 34: break;
          case 13: 
            { annotate(new CaseLawAuthority(), "IT_CONT", true, true);
            }
          case 35: break;
          case 14: 
            { annotate(new CaseLawAuthority(), "IT_USV", true, true);
            }
          case 36: break;
          case 15: 
            { addText(yytext()); 
	yybegin(lkn);
            }
          case 37: break;
          case 16: 
            { annotate(new CaseLawAuthority(), "IT_CDS", true, true);
            }
          case 38: break;
          case 17: 
            { annotate(new CaseLawAuthority(), "IT_TMN", true, true);
            }
          case 39: break;
          case 18: 
            { annotate(new CaseLawAuthority(), "IT_TML", true, true);
            }
          case 40: break;
          case 19: 
            { annotate(new CaseLawAuthority(), "IT_GPC", true, true);
            }
          case 41: break;
          case 20: 
            { annotate(new CaseLawAuthority(), "IT_TSV", true, true);
            }
          case 42: break;
          case 21: 
            { annotate(new CaseLawAuthority(), "IT_CGARS", true, true);
            }
          case 43: break;
          case 22: 
            { annotate(new CaseLawAuthority(), "IT_TQP", true, true);
            }
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java CaseLawAuthorities [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        CaseLawAuthorities scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new CaseLawAuthorities(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
