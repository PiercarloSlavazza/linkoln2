/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
/* The following code was generated by JFlex 1.6.1 */

package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>RegionalLegislationAuthorities.jflex</tt>
 */
public class RegionalLegislationAuthorities extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int geoState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\0\1\13\1\1\22\0\1\13\5\0\1\5"+
    "\1\0\1\14\1\14\2\0\1\14\1\3\1\53\1\54\1\52\1\52"+
    "\1\52\1\52\1\52\1\52\1\52\1\52\1\52\1\52\1\15\1\12"+
    "\5\0\1\26\1\7\1\40\1\62\1\36\1\23\1\30\1\23\1\47"+
    "\1\23\1\65\1\60\1\56\1\6\1\51\1\11\1\23\1\32\1\24"+
    "\1\44\1\42\1\34\1\71\1\23\1\23\1\23\1\66\1\0\1\67"+
    "\1\0\1\4\1\0\1\25\1\20\1\37\1\61\1\35\1\16\1\27"+
    "\1\16\1\46\1\16\1\64\1\57\1\55\1\17\1\50\1\22\1\16"+
    "\1\31\1\21\1\43\1\41\1\33\1\70\1\16\1\16\1\16\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\16\1\16\4\16\1\0\1\16\1\16\1\16\2\16\1\16\1\16"+
    "\2\16\1\0\1\16\1\16\1\16\3\16\2\0\1\16\1\16\2\16"+
    "\3\0\1\16\1\16\4\16\1\0\1\16\1\16\1\16\2\16\1\16"+
    "\1\16\2\16\1\0\1\16\1\16\1\16\3\16\2\0\1\16\1\16"+
    "\2\16\53\0\1\16\1\16\6\0\2\45\66\0\1\16\1\16\4\0"+
    "\1\16\1\16\17\0\1\10\u1c88\0\1\16\1\16\216\0\2\16\42\0"+
    "\1\16\1\16\u0144\0\1\13\20\0\1\3\1\3\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\2\2\2\3\27\0\1\4\23\0\2\5"+
    "\1\0\1\5\4\6\2\0\2\6\33\0\2\7\1\0"+
    "\1\7\4\10\2\0\2\10\4\0\1\6\16\0\1\5"+
    "\5\0\1\11\4\0\1\10\13\0\1\7\10\0\2\12"+
    "\17\0\2\13\54\0\1\14\12\0\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0122"+
    "\0\u0196\0\u0122\0\u01d0\0\u020a\0\u0244\0\u027e\0\256\0\u02b8"+
    "\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\u0692\0\u06cc\0\u0122\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0122\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0122\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea"+
    "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u0c3c"+
    "\0\u0c76\0\u0d5e\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u0122\0\u1308\0\u1342"+
    "\0\u137c\0\u0122\0\u13b6\0\u0c3c\0\u0c76\0\u13f0\0\u142a\0\u1464"+
    "\0\u0d5e\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u1586\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790"+
    "\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18b2\0\u18ec\0\u1926"+
    "\0\u1960\0\u199a\0\u0122\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d3a\0\u1d74\0\u1dae\0\u1de8"+
    "\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u0122\0\u1f0a\0\u1f44\0\u1f7e"+
    "\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e"+
    "\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u0122\0\u22aa\0\u22e4"+
    "\0\u0d24\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a"+
    "\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u1464\0\u0bc8\0\u25d6"+
    "\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6"+
    "\0\u137c\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c"+
    "\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c"+
    "\0\u2b46\0\u2b80\0\u2bba\0\u0122\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2"+
    "\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u0122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\4\4\2\6\1\4\1\6\4\4\27\6"+
    "\1\4\5\6\2\4\6\6\1\4\2\6\1\7\1\4"+
    "\2\6\66\10\1\11\3\10\66\12\1\13\3\12\11\0"+
    "\1\14\10\0\1\14\4\0\2\15\6\0\2\16\33\0"+
    "\1\17\6\0\1\14\10\0\1\14\4\0\2\15\6\0"+
    "\2\16\134\0\1\14\10\0\1\14\4\0\2\15\6\0"+
    "\2\16\16\0\2\20\65\0\1\21\74\0\2\22\42\0"+
    "\2\23\104\0\3\24\72\0\2\25\103\0\3\26\63\0"+
    "\2\27\74\0\3\30\41\0\2\31\74\0\2\32\35\0"+
    "\1\33\10\0\1\33\60\0\1\34\10\0\1\34\135\0"+
    "\3\35\12\0\1\36\10\0\1\36\62\0\1\37\10\0"+
    "\1\37\2\0\1\37\53\0\1\40\10\0\1\40\62\0"+
    "\1\41\10\0\1\41\2\0\1\41\62\0\1\42\62\0"+
    "\1\43\10\0\1\43\67\0\1\44\55\0\4\45\1\46"+
    "\4\0\4\45\11\0\2\15\6\0\2\16\4\0\3\47"+
    "\3\0\1\45\12\0\1\50\46\0\2\51\26\0\2\52"+
    "\2\0\1\53\3\0\1\54\1\0\1\52\6\0\1\54"+
    "\6\0\2\55\4\0\2\56\4\0\3\57\3\0\1\52"+
    "\22\0\1\60\1\0\2\60\1\0\1\60\11\0\2\60"+
    "\1\0\1\60\1\0\1\60\1\0\1\60\1\0\1\60"+
    "\1\0\1\60\1\0\1\60\1\0\1\60\1\0\1\60"+
    "\2\0\1\60\1\0\1\60\4\0\1\60\1\0\1\60"+
    "\1\0\1\60\2\0\1\60\3\0\1\60\31\0\2\61"+
    "\40\0\4\45\1\46\4\0\4\45\11\0\2\15\6\0"+
    "\2\16\25\0\1\50\11\0\1\62\10\0\1\62\133\0"+
    "\2\63\66\0\2\64\36\0\2\65\44\0\2\52\2\0"+
    "\1\53\3\0\1\54\1\0\1\52\6\0\1\54\6\0"+
    "\2\55\4\0\2\56\37\0\1\66\10\0\1\66\52\0"+
    "\1\67\1\70\4\67\2\0\1\67\1\0\4\67\13\0"+
    "\2\71\12\0\1\67\5\0\1\72\1\67\6\0\1\67"+
    "\2\0\2\67\2\0\1\73\1\74\3\75\1\76\2\0"+
    "\1\73\1\0\4\75\13\0\2\77\2\0\2\100\6\0"+
    "\1\73\5\0\1\101\1\73\6\0\1\73\2\0\1\102"+
    "\1\73\52\0\2\103\47\0\2\104\45\0\1\60\1\0"+
    "\2\60\1\0\1\60\3\0\1\105\5\0\2\60\1\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\1\60\1\0"+
    "\1\60\1\0\1\60\1\0\1\60\1\0\1\60\2\0"+
    "\1\60\1\0\1\60\4\0\1\60\1\0\1\60\1\0"+
    "\1\60\2\0\1\60\3\0\1\60\35\0\2\106\42\0"+
    "\1\107\10\0\1\107\106\0\2\110\116\0\3\111\5\0"+
    "\2\65\2\0\1\112\3\0\1\113\1\0\1\65\6\0"+
    "\1\113\6\0\2\114\4\0\2\115\40\0\1\116\10\0"+
    "\1\116\53\0\1\67\137\0\2\117\20\0\1\67\1\70"+
    "\4\67\2\0\1\67\1\0\4\67\27\0\1\67\5\0"+
    "\2\67\6\0\1\67\2\0\2\67\3\0\1\120\1\75"+
    "\2\120\1\121\4\0\4\120\50\0\1\122\4\0\4\120"+
    "\1\121\4\0\4\120\50\0\1\122\11\0\1\123\10\0"+
    "\1\123\52\0\1\73\1\74\3\75\1\76\2\0\1\73"+
    "\1\0\4\75\27\0\1\73\5\0\1\101\1\73\6\0"+
    "\1\73\2\0\1\102\1\73\31\0\2\124\41\0\1\73"+
    "\1\74\3\75\1\76\2\0\1\73\1\0\4\75\27\0"+
    "\1\73\5\0\2\73\6\0\1\73\2\0\1\102\1\73"+
    "\61\0\2\125\66\0\2\126\72\0\2\127\14\0\2\105"+
    "\1\0\2\105\1\0\1\105\3\0\1\130\5\0\2\105"+
    "\1\0\1\105\1\0\1\105\1\0\1\105\1\0\1\105"+
    "\1\0\1\105\1\0\1\105\1\0\1\105\1\0\1\105"+
    "\2\0\1\105\1\0\2\105\3\0\1\105\1\0\1\105"+
    "\1\0\1\105\2\0\1\105\3\0\1\105\27\0\2\131"+
    "\51\0\1\132\10\0\1\132\2\0\1\132\53\0\1\133"+
    "\10\0\1\133\60\0\1\134\10\0\1\134\60\0\1\135"+
    "\10\0\1\135\52\0\1\136\1\137\4\136\2\0\1\136"+
    "\1\0\4\136\13\0\2\140\12\0\1\136\5\0\1\141"+
    "\1\136\6\0\1\136\2\0\2\136\2\0\1\142\1\143"+
    "\3\144\1\145\2\0\1\142\1\0\4\144\13\0\2\146"+
    "\2\0\2\147\6\0\1\142\5\0\1\150\1\142\6\0"+
    "\1\142\2\0\1\151\1\142\52\0\2\152\30\0\1\153"+
    "\10\0\1\153\2\0\1\153\100\0\2\154\44\0\1\155"+
    "\10\0\1\155\51\0\1\73\1\74\3\75\1\76\2\0"+
    "\1\73\1\0\4\75\27\0\1\156\2\157\3\0\1\101"+
    "\1\73\6\0\1\73\2\0\1\102\1\73\65\0\3\160"+
    "\45\0\2\161\74\0\3\162\74\0\1\163\64\0\3\164"+
    "\33\0\1\165\10\0\1\165\112\0\2\166\42\0\1\167"+
    "\63\0\1\170\10\0\1\170\53\0\1\136\137\0\2\171"+
    "\20\0\1\136\1\137\4\136\2\0\1\136\1\0\4\136"+
    "\27\0\1\136\5\0\2\136\6\0\1\136\2\0\2\136"+
    "\3\0\1\120\1\144\2\120\1\121\4\0\4\120\50\0"+
    "\1\122\3\0\1\142\1\143\3\144\1\145\2\0\1\142"+
    "\1\0\4\144\27\0\1\142\5\0\1\150\1\142\6\0"+
    "\1\142\2\0\1\151\1\142\31\0\2\172\41\0\1\142"+
    "\1\143\3\144\1\145\2\0\1\142\1\0\4\144\27\0"+
    "\1\142\5\0\2\142\6\0\1\142\2\0\1\151\1\142"+
    "\57\0\2\173\24\0\1\174\10\0\1\174\47\0\1\67"+
    "\1\70\4\67\2\0\1\67\1\0\4\67\27\0\1\175"+
    "\2\176\3\0\1\72\1\67\6\0\1\67\2\0\2\67"+
    "\12\0\1\177\10\0\1\177\2\0\1\177\115\0\2\200"+
    "\26\0\1\201\10\0\1\201\60\0\1\202\10\0\1\202"+
    "\122\0\2\52\72\0\1\163\14\0\1\203\52\0\2\204"+
    "\32\0\1\45\114\0\2\45\43\0\1\205\10\0\1\205"+
    "\2\0\1\205\55\0\1\206\10\0\1\206\2\0\1\206"+
    "\100\0\2\207\35\0\1\142\1\143\3\144\1\145\2\0"+
    "\1\142\1\0\4\144\27\0\1\210\2\211\3\0\1\150"+
    "\1\142\6\0\1\142\2\0\1\151\1\142\43\0\2\212"+
    "\41\0\1\52\65\0\1\213\10\0\1\213\63\0\1\214"+
    "\10\0\1\214\55\0\1\215\10\0\1\215\67\0\1\216"+
    "\101\0\2\217\6\0\2\220\41\0\1\221\10\0\1\221"+
    "\115\0\2\222\36\0\1\223\10\0\1\223\47\0\1\136"+
    "\1\137\4\136\2\0\1\136\1\0\4\136\27\0\1\224"+
    "\2\225\3\0\1\141\1\136\6\0\1\136\2\0\2\136"+
    "\52\0\2\226\26\0\1\227\10\0\1\227\111\0\2\230"+
    "\43\0\1\120\104\0\2\231\53\0\1\232\10\0\1\232"+
    "\2\0\1\232\4\0\2\233\116\0\2\234\11\0\1\235"+
    "\1\236\4\235\2\0\1\235\1\0\4\235\27\0\1\235"+
    "\5\0\2\235\6\0\1\235\2\0\2\235\17\0\1\237"+
    "\65\0\1\240\10\0\1\240\61\0\1\65\65\0\1\241"+
    "\10\0\1\241\60\0\1\242\10\0\1\242\77\0\2\243"+
    "\6\0\2\244\100\0\3\245\101\0\2\246\54\0\2\247"+
    "\62\0\2\250\70\0\1\220\10\0\1\220\25\0\1\235"+
    "\72\0\2\237\1\0\2\237\1\0\1\237\3\0\1\251"+
    "\5\0\2\237\1\0\1\237\1\0\1\237\1\0\1\237"+
    "\1\0\1\237\1\0\1\237\1\0\1\237\1\0\1\237"+
    "\1\0\1\237\2\0\1\237\1\0\2\237\3\0\1\237"+
    "\1\0\1\237\1\0\1\237\2\0\1\237\3\0\1\237"+
    "\70\0\2\252\37\0\2\253\56\0\2\254\122\0\2\255"+
    "\11\0\1\256\1\257\4\256\2\0\1\256\1\0\4\256"+
    "\27\0\1\256\5\0\2\256\6\0\1\256\2\0\2\256"+
    "\27\0\2\260\100\0\1\261\10\0\1\261\34\0\1\262"+
    "\10\0\1\262\76\0\2\263\113\0\1\264\34\0\1\265"+
    "\121\0\3\266\101\0\2\267\46\0\1\244\10\0\1\244"+
    "\25\0\1\256\146\0\2\270\101\0\2\271\45\0\3\272"+
    "\74\0\1\264\14\0\1\273\5\0\2\265\1\0\2\265"+
    "\1\0\1\265\3\0\1\274\5\0\2\265\1\0\1\265"+
    "\1\0\1\265\1\0\1\265\1\0\1\265\1\0\1\265"+
    "\1\0\1\265\1\0\1\265\1\0\1\265\2\0\1\265"+
    "\1\0\2\265\3\0\1\265\1\0\1\265\1\0\1\265"+
    "\2\0\1\265\3\0\1\265\25\0\2\275\100\0\1\276"+
    "\10\0\1\276\60\0\1\277\10\0\1\277\40\0\1\300"+
    "\124\0\2\301\20\0\66\302\1\0\3\302\52\0\1\303"+
    "\76\0\2\304\14\0\2\300\1\0\2\300\1\0\1\300"+
    "\3\0\1\305\5\0\2\300\1\0\1\300\1\0\1\300"+
    "\1\0\1\300\1\0\1\300\1\0\1\300\1\0\1\300"+
    "\1\0\1\300\1\0\1\300\2\0\1\300\1\0\2\300"+
    "\3\0\1\300\1\0\1\300\1\0\1\300\2\0\1\300"+
    "\3\0\1\300\6\0\1\306\10\0\1\306\52\0\66\302"+
    "\1\307\3\302\52\0\1\303\14\0\1\310\37\0\1\311"+
    "\10\0\1\311\75\0\1\312\34\0\1\313\130\0\1\314"+
    "\15\0\66\315\1\0\3\315\52\0\1\312\14\0\1\316"+
    "\5\0\2\313\1\0\2\313\1\0\1\313\3\0\1\317"+
    "\5\0\2\313\1\0\1\313\1\0\1\313\1\0\1\313"+
    "\1\0\1\313\1\0\1\313\1\0\1\313\1\0\1\313"+
    "\1\0\1\313\2\0\1\313\1\0\2\313\3\0\1\313"+
    "\1\0\1\313\1\0\1\313\2\0\1\313\3\0\1\313"+
    "\57\0\2\320\11\0\66\315\1\321\3\315\66\322\1\0"+
    "\3\322\52\0\1\323\102\0\3\324\60\0\1\325\15\0"+
    "\66\322\1\326\3\322\52\0\1\323\14\0\1\327\10\0"+
    "\1\330\10\0\1\330\131\0\2\331\65\0\1\332\15\0"+
    "\66\333\1\0\3\333\67\0\1\334\65\0\3\335\63\0"+
    "\2\336\11\0\66\333\1\337\3\333\6\0\1\340\10\0"+
    "\1\340\135\0\3\341\60\0\1\342\104\0\1\45\10\0"+
    "\1\343\10\0\1\343\131\0\2\344\100\0\1\120\65\0"+
    "\3\345\12\0\1\346\10\0\1\346\141\0\1\347\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11832];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\27\0\1\11\23\0\1\11\1\1\1\0\1\1\1\11"+
    "\3\1\2\0\2\1\33\0\1\11\1\1\1\0\1\1"+
    "\1\11\3\1\2\0\2\1\4\0\1\1\16\0\1\1"+
    "\5\0\1\11\4\0\1\1\13\0\1\1\10\0\1\11"+
    "\1\1\17\0\1\11\1\1\54\0\1\11\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.1"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public RegionalLegislationAuthorities() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RegionalLegislationAuthorities(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            }
          case 14: break;
          case 2: 
            { addText(yytext());
		position++;
            }
          case 15: break;
          case 3: 
            { checkEnd();
            }
          case 16: break;
          case 4: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            }
          case 17: break;
          case 5: 
            { annotate(new LegislationAuthority(), "IT_PROVINCIAL_COUNCIL", true, true);
            }
          case 18: break;
          case 6: 
            { annotate(new LegislationAuthority(), "IT_REGIONAL_COUNCIL", true, true);
            }
          case 19: break;
          case 7: 
            { annotate(new LegislationAuthority(), "IT_PROVINCIAL_GIUNTA", true, true);
            }
          case 20: break;
          case 8: 
            { annotate(new LegislationAuthority(), "IT_REGIONAL_GIUNTA", true, true);
            }
          case 21: break;
          case 9: 
            { addText(yytext()); 
	yybegin(lkn);
            }
          case 22: break;
          case 10: 
            { annotate(new LegislationAuthority(), "IT_MUNICIPAL_COUNCIL", true, true);
            }
          case 23: break;
          case 11: 
            { annotate(new LegislationAuthority(), "IT_MUNICIPAL_GIUNTA", true, true);
            }
          case 24: break;
          case 12: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		annotationEntity.addRelatedEntity(retrievedEntity);
		retrievedEntity.addRelatedEntity(annotationEntity);
		
		offset += yylength();
            }
          case 25: break;
          case 13: 
            { start(new LegislationAuthority(), geoState, true, false);
            }
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java RegionalLegislationAuthorities [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        RegionalLegislationAuthorities scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new RegionalLegislationAuthorities(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
