/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
/* The following code was generated by JFlex 1.6.1 */

package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Dates.jflex</tt>
 */
public class Dates extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int completeDateState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\2\1\0\1\14\1\1\22\0\1\14\5\0\1\6"+
    "\1\5\1\15\1\15\2\0\1\15\1\3\1\41\1\42\1\51\1\44"+
    "\1\50\1\104\1\40\1\40\1\46\1\46\1\45\1\47\1\16\1\13"+
    "\5\0\1\26\1\10\1\64\1\70\1\30\1\100\1\76\1\62\1\33"+
    "\1\62\1\72\1\55\1\53\1\7\1\35\1\12\1\62\1\61\1\24"+
    "\1\57\1\37\1\66\1\102\1\62\1\62\1\23\1\73\1\43\1\74"+
    "\1\103\1\4\1\5\1\25\1\21\1\63\1\67\1\27\1\77\1\75"+
    "\1\0\1\32\1\0\1\71\1\54\1\52\1\20\1\34\1\22\1\0"+
    "\1\60\1\11\1\56\1\36\1\65\1\101\1\0\1\0\1\17\12\0"+
    "\1\0\44\0\1\0\5\0\1\103\3\0\1\5\5\0\1\103\5\0"+
    "\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0\1\0"+
    "\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0\2\0"+
    "\3\0\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0"+
    "\1\0\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0"+
    "\2\0\53\0\1\0\1\0\6\0\2\31\66\0\1\0\1\0\4\0"+
    "\1\0\1\0\17\0\1\11\u1c88\0\1\0\1\0\216\0\2\0\42\0"+
    "\1\0\1\0\u0155\0\1\3\1\3\4\0\1\5\16\0\1\0\1\0"+
    "\u0100\0\1\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\25\0\4\1\2\2\20\3\60\0\1\4\6\0\4\4"+
    "\1\0\1\4\355\0\5\5\262\0\1\6\2\0\4\7"+
    "\1\0\4\10\3\0\4\11\2\0\4\12\2\0\4\13"+
    "\27\0\4\14\1\0\4\15\2\0\4\16\3\0\4\17"+
    "\2\0\4\20\1\0\4\21\3\0\4\22\157\0\4\23"+
    "\3\0\4\24\174\0\2\25\66\0\1\26\20\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[937];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u0633\0\u06bd\0\u0633\0\u0702\0\u0747\0\u078c\0\u07d1"+
    "\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9"+
    "\0\u0a3e\0\u0a83\0\u0ac8\0\u0633\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc"+
    "\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04"+
    "\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c"+
    "\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254"+
    "\0\u1299\0\u12de\0\u1323\0\u1368\0\u05a9\0\u13ad\0\u13f2\0\u1437"+
    "\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f"+
    "\0\u16a4\0\u16e9\0\u172e\0\u0633\0\u1773\0\u17b8\0\u17fd\0\u1842"+
    "\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1911\0\u1a25"+
    "\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d"+
    "\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75"+
    "\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d"+
    "\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5"+
    "\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed"+
    "\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715"+
    "\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d"+
    "\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65"+
    "\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d"+
    "\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5"+
    "\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd"+
    "\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405"+
    "\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d"+
    "\0\u3672\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810"+
    "\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u3a38"+
    "\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60"+
    "\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u3e88"+
    "\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u40b0"+
    "\0\u40f5\0\u413a\0\u417f\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8"+
    "\0\u431d\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb\0\u4500"+
    "\0\u4545\0\u458a\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3\0\u4728"+
    "\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b\0\u4950"+
    "\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u4b33\0\u4b78"+
    "\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0"+
    "\0\u4de5\0\u4e2a\0\u4e6f\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8"+
    "\0\u500d\0\u5052\0\u5097\0\u50dc\0\u5121\0\u5166\0\u51ab\0\u51f0"+
    "\0\u5235\0\u527a\0\u52bf\0\u5304\0\u5349\0\u538e\0\u53d3\0\u5418"+
    "\0\u545d\0\u54a2\0\u54e7\0\u552c\0\u5571\0\u55b6\0\u55fb\0\u5640"+
    "\0\u5685\0\u56ca\0\u570f\0\u5754\0\u5799\0\u57de\0\u5823\0\u5868"+
    "\0\u58ad\0\u58f2\0\u5937\0\u597c\0\u59c1\0\u0633\0\u5a06\0\u5a4b"+
    "\0\u2a51\0\u5a90\0\u5ad5\0\u5b1a\0\u5b5f\0\u5ba4\0\u5be9\0\u5c2e"+
    "\0\u5c73\0\u5cb8\0\u5cfd\0\u5d42\0\u5d87\0\u5dcc\0\u5a06\0\u5e11"+
    "\0\u5e56\0\u5e9b\0\u5ee0\0\u5f25\0\u5f6a\0\u5faf\0\u5ff4\0\u6039"+
    "\0\u607e\0\u60c3\0\u6108\0\u614d\0\u6192\0\u61d7\0\u621c\0\u6261"+
    "\0\u62a6\0\u62eb\0\u6330\0\u6375\0\u63ba\0\u63ff\0\u6444\0\u6489"+
    "\0\u64ce\0\u6513\0\u6558\0\u659d\0\u65e2\0\u6627\0\u666c\0\u66b1"+
    "\0\u66f6\0\u673b\0\u6780\0\u67c5\0\u680a\0\u684f\0\u6894\0\u68d9"+
    "\0\u691e\0\u6963\0\u69a8\0\u69ed\0\u6a32\0\u6a77\0\u6abc\0\u6b01"+
    "\0\u6b46\0\u6b8b\0\u6bd0\0\u6c15\0\u6c5a\0\u6c9f\0\u6ce4\0\u6d29"+
    "\0\u6d6e\0\u6db3\0\u6df8\0\u6e3d\0\u6e82\0\u6ec7\0\u6f0c\0\u6f51"+
    "\0\u6f96\0\u6fdb\0\u7020\0\u7065\0\u70aa\0\u70ef\0\u7134\0\u7179"+
    "\0\u71be\0\u7203\0\u7248\0\u728d\0\u72d2\0\u7317\0\u735c\0\u73a1"+
    "\0\u73e6\0\u742b\0\u7470\0\u74b5\0\u74fa\0\u753f\0\u7584\0\u75c9"+
    "\0\u760e\0\u7653\0\u7698\0\u76dd\0\u7722\0\u7767\0\u77ac\0\u77f1"+
    "\0\u7836\0\u787b\0\u78c0\0\u7905\0\u794a\0\u798f\0\u79d4\0\u7a19"+
    "\0\u7a5e\0\u7aa3\0\u7ae8\0\u7b2d\0\u7b72\0\u7bb7\0\u7bfc\0\u7c41"+
    "\0\u7c86\0\u7ccb\0\u7d10\0\u7d55\0\u7d9a\0\u7ddf\0\u7e24\0\u7e69"+
    "\0\u7eae\0\u7ef3\0\u7f38\0\u7f7d\0\u7fc2\0\u8007\0\u804c\0\u8091"+
    "\0\u80d6\0\u811b\0\u8160\0\u81a5\0\u81ea\0\u822f\0\u8274\0\u82b9"+
    "\0\u82fe\0\u8343\0\u8388\0\u83cd\0\u8412\0\u8457\0\u849c\0\u84e1"+
    "\0\u8526\0\u856b\0\u85b0\0\u85f5\0\u863a\0\u867f\0\u86c4\0\u8709"+
    "\0\u874e\0\u8793\0\u87d8\0\u881d\0\u8862\0\u88a7\0\u88ec\0\u8931"+
    "\0\u8976\0\u89bb\0\u8a00\0\u8a45\0\u0633\0\u8a8a\0\u8acf\0\u0633"+
    "\0\u8b14\0\u500d\0\u8b59\0\u8b9e\0\u0633\0\u8be3\0\u51f0\0\u8c28"+
    "\0\u8c6d\0\u8cb2\0\u8cf7\0\u0633\0\u8d3c\0\u53d3\0\u8d81\0\u8dc6"+
    "\0\u8e0b\0\u0633\0\u8e50\0\u55b6\0\u8e95\0\u8eda\0\u8f1f\0\u0633"+
    "\0\u8f64\0\u5799\0\u8fa9\0\u8fee\0\u9033\0\u9078\0\u90bd\0\u9102"+
    "\0\u9147\0\u918c\0\u91d1\0\u9216\0\u925b\0\u92a0\0\u92e5\0\u932a"+
    "\0\u936f\0\u93b4\0\u93f9\0\u943e\0\u9483\0\u94c8\0\u950d\0\u9552"+
    "\0\u9597\0\u95dc\0\u0633\0\u9621\0\u5f25\0\u9666\0\u96ab\0\u0633"+
    "\0\u96f0\0\u6108\0\u9735\0\u977a\0\u97bf\0\u0633\0\u9804\0\u62eb"+
    "\0\u9849\0\u988e\0\u98d3\0\u9918\0\u0633\0\u995d\0\u64ce\0\u99a2"+
    "\0\u99e7\0\u9a2c\0\u0633\0\u9a71\0\u66b1\0\u9ab6\0\u9afb\0\u0633"+
    "\0\u9b40\0\u6894\0\u9b85\0\u9bca\0\u9c0f\0\u9c54\0\u0633\0\u9c99"+
    "\0\u6a77\0\u9cde\0\u9d23\0\u9d68\0\u9dad\0\u9df2\0\u9e37\0\u9e7c"+
    "\0\u9ec1\0\u9f06\0\u9f4b\0\u9f90\0\u9fd5\0\ua01a\0\ua05f\0\ua0a4"+
    "\0\ua0e9\0\ua12e\0\ua173\0\ua1b8\0\ua1fd\0\ua242\0\ua287\0\ua2cc"+
    "\0\ua311\0\ua356\0\ua39b\0\ua3e0\0\ua425\0\ua46a\0\ua4af\0\ua4f4"+
    "\0\ua539\0\ua57e\0\ua5c3\0\ua608\0\ua64d\0\ua692\0\ua6d7\0\ua71c"+
    "\0\ua761\0\ua7a6\0\ua7eb\0\ua830\0\ua875\0\ua8ba\0\ua8ff\0\ua944"+
    "\0\ua989\0\ua9ce\0\uaa13\0\uaa58\0\uaa9d\0\uaae2\0\uab27\0\uab6c"+
    "\0\uabb1\0\uabf6\0\uac3b\0\uac80\0\uacc5\0\uad0a\0\uad4f\0\uad94"+
    "\0\uadd9\0\uae1e\0\uae63\0\uaea8\0\uaeed\0\uaf32\0\uaf77\0\uafbc"+
    "\0\ub001\0\ub046\0\ub08b\0\ub0d0\0\ub115\0\ub15a\0\ub19f\0\ub1e4"+
    "\0\ub229\0\ub26e\0\ub2b3\0\ub2f8\0\ub33d\0\ub382\0\ub3c7\0\ub40c"+
    "\0\ub451\0\ub496\0\ub4db\0\ub520\0\ub565\0\ub5aa\0\ub5ef\0\ub634"+
    "\0\ub679\0\ub6be\0\ub703\0\ub748\0\ub78d\0\ub7d2\0\ub817\0\ub85c"+
    "\0\ub8a1\0\ub8e6\0\ub92b\0\ub970\0\ub9b5\0\ub9fa\0\uba3f\0\uba84"+
    "\0\ubac9\0\u0633\0\ubb0e\0\u8fee\0\ubb53\0\ubb98\0\ubbdd\0\ubc22"+
    "\0\u0633\0\ubc67\0\u91d1\0\ubcac\0\ubcf1\0\ubd36\0\ubd7b\0\ubdc0"+
    "\0\ube05\0\ube4a\0\ube8f\0\ubed4\0\ubf19\0\ubf5e\0\ubfa3\0\ubfe8"+
    "\0\uc02d\0\uc072\0\uc0b7\0\uc0fc\0\uc141\0\uc186\0\uc1cb\0\uc210"+
    "\0\uc255\0\uc29a\0\uc2df\0\uc324\0\uc369\0\uc3ae\0\uc3f3\0\uc438"+
    "\0\uc47d\0\uc4c2\0\uc507\0\uc54c\0\uc591\0\uc5d6\0\uc61b\0\uc660"+
    "\0\uc6a5\0\uc6ea\0\uc72f\0\uc774\0\uc7b9\0\uc7fe\0\uc843\0\uc888"+
    "\0\uc8cd\0\uc912\0\uc957\0\uc99c\0\uc9e1\0\uca26\0\uca6b\0\ucab0"+
    "\0\ucaf5\0\ucb3a\0\ucb7f\0\ucbc4\0\ucc09\0\ucc4e\0\ucc93\0\uccd8"+
    "\0\ucd1d\0\ucd62\0\ucda7\0\ucdec\0\uce31\0\uce76\0\ucebb\0\ucf00"+
    "\0\ucf45\0\ucf8a\0\ucfcf\0\ud014\0\ud059\0\ud09e\0\ud0e3\0\ud128"+
    "\0\ud16d\0\ud1b2\0\ud1f7\0\ud23c\0\ud281\0\ud2c6\0\ud30b\0\ud350"+
    "\0\ud395\0\ud3da\0\ud41f\0\ud464\0\ud4a9\0\ud4ee\0\ud533\0\ud578"+
    "\0\ud5bd\0\ud602\0\ud647\0\ud68c\0\ud6d1\0\ud716\0\ud75b\0\ud7a0"+
    "\0\ud7e5\0\ud82a\0\ud86f\0\ud8b4\0\ud8f9\0\ud93e\0\ud983\0\ud9c8"+
    "\0\uda0d\0\uda52\0\uda97\0\udadc\0\udb21\0\udb66\0\udbab\0\udbf0"+
    "\0\udc35\0\udc7a\0\udcbf\0\udd04\0\udd49\0\udd8e\0\uddd3\0\ude18"+
    "\0\u0633\0\ude5d\0\udea2\0\udee7\0\udf2c\0\udf71\0\udfb6\0\udffb"+
    "\0\ue040\0\ue085\0\ue0ca\0\ue10f\0\ue154\0\ue199\0\ue1de\0\ue223"+
    "\0\ue268\0\ue2ad\0\ue2f2\0\ue337\0\ue37c\0\ue3c1\0\ue406\0\ue44b"+
    "\0\ue490\0\ue4d5\0\ue51a\0\ue55f\0\ue5a4\0\ue5e9\0\ue62e\0\ue673"+
    "\0\ue6b8\0\ue6fd\0\ue742\0\ue787\0\ue7cc\0\ue811\0\ue856\0\ue89b"+
    "\0\ue8e0\0\ue925\0\ue96a\0\ue9af\0\ue9f4\0\uea39\0\uea7e\0\ueac3"+
    "\0\ueb08\0\ueb4d\0\ueb92\0\uebd7\0\uec1c\0\uec61\0\ueca6\0\ueceb"+
    "\0\u0633\0\ued30\0\ued75\0\uedba\0\uedff\0\uee44\0\uee89\0\ueece"+
    "\0\uef13\0\uef58\0\uef9d\0\uefe2\0\uf027\0\uf06c\0\uf0b1\0\uf0f6"+
    "\0\uf13b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[937];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\26\1\27\36\26\1\30\3\26\6\30\21\26\1\31"+
    "\10\26\1\30\73\32\1\33\11\32\5\34\1\35\1\34"+
    "\1\36\1\34\1\37\6\34\1\36\3\34\1\37\2\40"+
    "\5\34\2\41\2\34\1\42\3\34\1\43\3\42\1\44"+
    "\1\45\2\46\2\47\11\34\2\50\4\34\2\51\2\52"+
    "\3\34\1\53\40\0\1\54\3\0\1\55\3\54\1\56"+
    "\1\57\32\0\1\60\40\0\1\61\3\0\6\61\32\0"+
    "\1\61\40\0\1\62\3\0\6\62\32\0\1\62\40\0"+
    "\1\54\3\0\1\63\4\54\1\57\32\0\1\54\40\0"+
    "\1\64\3\0\6\64\32\0\1\64\75\0\2\65\46\0"+
    "\1\66\3\0\6\66\32\0\1\66\77\0\2\67\56\0"+
    "\2\70\56\0\2\71\130\0\2\72\126\0\2\73\62\0"+
    "\2\74\54\0\2\75\67\0\1\76\12\0\1\76\114\0"+
    "\2\77\56\0\1\100\10\0\1\100\153\0\2\101\26\0"+
    "\1\102\7\0\1\102\4\0\2\103\5\0\2\104\1\105"+
    "\3\0\1\106\3\105\1\107\1\110\6\0\2\111\5\0"+
    "\2\112\4\0\2\113\5\0\1\114\2\0\1\115\7\0"+
    "\1\102\7\0\1\102\4\0\2\103\5\0\2\104\1\105"+
    "\3\0\1\106\3\105\1\107\1\110\6\0\2\111\5\0"+
    "\2\112\4\0\2\113\5\0\1\114\117\0\1\102\7\0"+
    "\1\102\4\0\2\103\5\0\2\104\1\105\3\0\1\106"+
    "\3\105\1\107\1\110\2\0\2\116\2\0\2\111\5\0"+
    "\2\112\4\0\2\113\5\0\1\114\42\0\1\117\102\0"+
    "\1\120\3\0\6\120\32\0\1\120\34\0\2\121\76\0"+
    "\2\122\66\0\1\123\7\0\1\123\52\0\2\124\64\0"+
    "\2\125\26\0\4\126\1\0\1\127\1\130\1\0\1\131"+
    "\2\0\1\126\3\0\1\130\3\0\1\131\2\132\5\0"+
    "\2\133\2\0\1\134\3\126\6\134\2\135\2\136\11\0"+
    "\2\137\4\0\2\140\2\141\3\0\1\134\1\0\4\126"+
    "\1\0\1\127\1\130\1\0\1\131\2\0\1\126\3\0"+
    "\1\130\3\0\1\131\2\132\5\0\1\142\1\133\2\0"+
    "\1\143\3\126\1\144\1\145\1\143\1\146\2\144\2\135"+
    "\2\136\11\0\2\137\4\0\2\140\2\141\2\0\1\147"+
    "\1\143\1\0\4\126\1\0\1\127\1\130\1\0\1\131"+
    "\2\0\1\126\3\0\1\130\3\0\1\131\2\132\5\0"+
    "\2\133\2\0\1\143\3\126\5\143\1\150\2\135\2\136"+
    "\11\0\2\137\4\0\2\140\2\141\3\0\1\143\40\0"+
    "\1\144\3\0\5\144\1\134\32\0\1\144\25\0\2\151"+
    "\114\0\2\152\76\0\3\153\100\0\2\154\3\155\100\0"+
    "\2\156\55\0\4\126\1\0\1\127\1\130\1\0\1\131"+
    "\2\0\1\126\3\0\1\130\3\0\1\131\2\132\5\0"+
    "\2\133\2\0\1\134\3\126\1\143\4\134\1\143\2\135"+
    "\2\136\11\0\2\137\4\0\2\140\2\141\3\0\1\134"+
    "\34\0\1\54\3\0\1\54\3\0\6\54\31\0\2\54"+
    "\40\0\1\54\3\0\6\54\32\0\1\54\40\0\1\54"+
    "\3\0\5\54\33\0\1\54\44\0\1\54\4\0\1\54"+
    "\73\0\1\157\3\0\1\160\3\161\2\160\32\0\1\157"+
    "\40\0\1\162\3\0\1\163\3\164\2\163\32\0\1\162"+
    "\44\0\1\54\3\0\2\54\73\0\1\165\3\0\1\166"+
    "\3\167\2\166\32\0\1\165\27\0\2\170\114\0\1\171"+
    "\3\0\1\172\3\173\2\172\32\0\1\171\27\0\2\174"+
    "\101\0\2\175\70\0\1\176\7\0\1\176\107\0\2\177"+
    "\107\0\3\200\107\0\2\201\142\0\2\202\35\0\2\203"+
    "\132\0\2\204\61\0\2\205\100\0\3\206\131\0\2\207"+
    "\75\0\2\210\120\0\2\211\15\0\2\212\2\213\1\0"+
    "\1\214\1\215\1\0\1\216\2\0\1\212\3\0\1\215"+
    "\3\0\1\216\2\217\5\0\2\220\3\0\1\221\1\222"+
    "\1\223\6\0\2\224\2\225\11\0\2\226\4\0\2\227"+
    "\2\230\5\0\2\212\2\213\1\0\1\214\1\215\1\0"+
    "\1\216\2\0\1\212\3\0\1\215\3\0\1\216\2\217"+
    "\5\0\1\231\1\220\2\0\1\105\1\221\1\222\1\223"+
    "\6\105\2\224\2\225\11\0\2\226\4\0\2\227\2\230"+
    "\2\0\2\105\1\0\2\212\2\213\1\0\1\214\1\215"+
    "\1\0\1\216\2\0\1\212\3\0\1\215\3\0\1\216"+
    "\2\217\5\0\2\220\2\0\1\105\1\221\1\222\1\223"+
    "\6\105\2\224\2\225\11\0\2\226\4\0\2\227\2\230"+
    "\3\0\1\105\40\0\1\105\3\0\5\105\33\0\1\105"+
    "\27\0\2\232\101\0\2\233\107\0\3\234\52\0\2\212"+
    "\2\213\1\0\1\214\1\215\1\0\1\216\2\0\1\212"+
    "\3\0\1\215\3\0\1\216\2\217\5\0\2\220\3\0"+
    "\1\221\1\222\1\223\1\105\4\0\1\105\2\224\2\225"+
    "\11\0\2\226\4\0\2\227\2\230\75\0\2\235\66\0"+
    "\2\236\67\0\1\134\3\0\6\134\32\0\1\134\65\0"+
    "\2\237\74\0\2\240\105\0\2\241\57\0\2\242\125\0"+
    "\2\243\26\0\4\126\1\244\1\127\1\130\1\0\1\131"+
    "\2\0\1\126\3\0\1\130\3\0\1\131\2\132\5\0"+
    "\2\133\2\0\1\245\3\126\1\246\3\245\1\247\1\250"+
    "\2\135\2\136\11\0\2\137\4\0\2\140\2\141\3\0"+
    "\1\245\7\0\1\251\10\0\1\251\120\0\2\252\76\0"+
    "\2\253\66\0\1\254\7\0\1\254\52\0\2\255\64\0"+
    "\2\256\52\0\2\257\114\0\2\260\76\0\3\261\100\0"+
    "\2\262\3\263\100\0\2\264\55\0\4\265\1\0\1\266"+
    "\1\130\1\0\1\131\2\0\1\265\3\0\1\130\3\0"+
    "\1\131\2\132\5\0\2\133\3\0\3\265\6\0\2\135"+
    "\2\136\2\256\7\0\2\137\4\0\2\140\2\141\5\0"+
    "\4\265\1\0\1\266\1\130\1\0\1\131\2\0\1\265"+
    "\3\0\1\130\3\0\1\131\2\132\5\0\2\133\3\0"+
    "\3\265\6\0\2\135\2\136\11\0\2\137\4\0\2\140"+
    "\2\141\5\0\4\126\1\0\1\127\1\130\1\0\1\131"+
    "\2\0\1\126\3\0\1\130\3\0\1\131\2\132\5\0"+
    "\2\133\3\0\3\126\6\0\2\135\2\136\11\0\2\137"+
    "\4\0\2\140\2\141\5\0\4\265\1\0\1\266\1\130"+
    "\1\0\1\131\2\0\1\265\3\0\1\130\3\0\1\131"+
    "\2\132\5\0\2\133\3\0\3\265\1\0\3\120\2\0"+
    "\2\135\2\136\11\0\2\137\4\0\2\140\2\141\5\0"+
    "\4\265\1\0\1\266\1\130\1\0\1\131\2\0\1\265"+
    "\3\0\1\130\3\0\1\131\2\132\5\0\2\133\2\0"+
    "\1\120\3\265\6\120\2\135\2\136\11\0\2\137\4\0"+
    "\2\140\2\141\3\0\1\120\1\0\4\265\1\0\1\266"+
    "\1\130\1\0\1\131\2\0\1\265\3\0\1\130\3\0"+
    "\1\131\2\132\5\0\2\133\3\0\3\265\1\120\3\0"+
    "\2\120\2\135\2\136\11\0\2\137\4\0\2\140\2\141"+
    "\64\0\2\267\13\0\2\270\103\0\2\271\71\0\2\272"+
    "\27\0\1\273\10\0\1\273\122\0\2\274\55\0\1\275"+
    "\10\0\1\275\64\0\5\276\1\0\1\277\1\300\2\0"+
    "\1\301\1\276\3\0\1\277\1\300\5\0\2\302\3\0"+
    "\2\303\2\304\1\0\3\276\3\0\1\305\6\0\2\306"+
    "\2\307\1\0\2\310\2\311\6\0\2\312\7\0\5\276"+
    "\1\0\1\277\1\300\2\0\1\301\1\276\3\0\1\277"+
    "\1\300\5\0\2\302\3\0\2\303\2\304\1\0\3\276"+
    "\3\0\1\305\1\0\1\313\4\0\2\306\2\307\1\0"+
    "\2\310\2\311\6\0\2\312\7\0\5\276\1\0\1\277"+
    "\1\300\2\0\1\301\1\276\3\0\1\277\1\300\5\0"+
    "\2\302\3\0\2\303\2\304\1\0\3\276\1\0\1\305"+
    "\1\0\1\305\6\0\2\306\2\307\1\0\2\310\2\311"+
    "\6\0\2\312\7\0\4\314\1\315\5\0\1\316\1\314"+
    "\24\0\3\314\3\0\1\317\36\0\4\314\1\315\5\0"+
    "\1\316\1\314\24\0\3\314\3\0\1\317\1\0\1\320"+
    "\34\0\4\314\1\315\5\0\1\316\1\314\24\0\3\314"+
    "\1\0\1\317\1\0\1\317\36\0\4\321\1\322\5\0"+
    "\1\323\1\321\24\0\3\321\3\0\1\324\36\0\4\321"+
    "\1\322\5\0\1\323\1\321\24\0\3\321\3\0\1\324"+
    "\1\0\1\325\34\0\4\321\1\322\5\0\1\323\1\321"+
    "\24\0\3\321\1\0\1\324\1\0\1\324\44\0\1\326"+
    "\10\0\1\326\65\0\5\321\5\0\1\323\1\321\24\0"+
    "\3\321\3\0\1\327\36\0\5\321\5\0\1\323\1\321"+
    "\24\0\3\321\3\0\1\327\1\0\1\330\34\0\5\321"+
    "\5\0\1\323\1\321\24\0\3\321\1\0\1\327\1\0"+
    "\1\327\45\0\1\331\10\0\1\331\143\0\2\332\103\0"+
    "\2\333\120\0\2\334\44\0\2\335\142\0\2\336\42\0"+
    "\2\337\125\0\2\340\103\0\2\341\112\0\2\342\101\0"+
    "\2\342\54\0\2\343\74\0\2\344\2\345\105\0\3\346"+
    "\5\0\1\347\44\0\2\212\2\213\1\0\1\214\1\215"+
    "\1\0\1\216\2\0\1\212\3\0\1\215\3\0\1\216"+
    "\2\217\5\0\2\220\2\0\1\350\1\221\1\222\1\223"+
    "\1\351\4\350\1\352\2\224\2\225\11\0\2\226\4\0"+
    "\2\227\2\230\3\0\1\350\1\0\2\213\3\0\1\353"+
    "\1\354\1\0\1\355\2\0\1\213\3\0\1\354\3\0"+
    "\1\355\2\356\5\0\2\357\2\0\1\360\3\0\1\361"+
    "\4\360\1\362\2\363\2\364\11\0\2\365\4\0\2\366"+
    "\2\367\3\0\1\360\7\0\1\370\10\0\1\370\120\0"+
    "\2\371\76\0\2\372\66\0\1\373\7\0\1\373\52\0"+
    "\2\374\64\0\2\375\26\0\2\221\3\0\1\376\1\377"+
    "\1\0\1\u0100\2\0\1\221\3\0\1\377\3\0\1\u0100"+
    "\2\u0101\5\0\2\u0102\2\0\1\u0103\3\0\1\u0104\4\u0103"+
    "\1\u0105\2\u0106\2\u0107\11\0\2\u0108\4\0\2\u0109\2\u010a"+
    "\3\0\1\u0103\1\0\2\222\3\0\1\u010b\1\u010c\1\0"+
    "\1\u010d\2\0\1\222\3\0\1\u010c\3\0\1\u010d\2\u010e"+
    "\5\0\2\u010f\2\0\1\u0110\3\0\1\u0111\4\u0110\1\u0112"+
    "\2\u0113\2\u0114\11\0\2\u0115\4\0\2\u0116\2\u0117\3\0"+
    "\1\u0110\1\0\2\223\3\0\1\u0118\1\u0119\1\0\1\u011a"+
    "\2\0\1\223\3\0\1\u0119\3\0\1\u011a\2\u011b\5\0"+
    "\2\u011c\2\0\1\u011d\3\0\1\u011e\4\u011d\1\u011f\2\u0120"+
    "\2\u0121\11\0\2\u0122\4\0\2\u0123\2\u0124\3\0\1\u011d"+
    "\25\0\2\u0125\114\0\2\u0126\76\0\3\u0127\100\0\2\u0128"+
    "\3\u0129\100\0\2\u012a\55\0\2\212\2\213\1\0\1\214"+
    "\1\215\1\0\1\216\2\0\1\212\3\0\1\215\3\0"+
    "\1\216\2\217\5\0\2\220\3\0\1\221\1\222\1\223"+
    "\6\0\2\224\2\225\2\375\7\0\2\226\4\0\2\227"+
    "\2\230\15\0\1\u012b\12\0\1\u012b\136\0\2\u012c\61\0"+
    "\2\u012d\56\0\1\u012e\10\0\1\u012e\155\0\2\u012f\13\0"+
    "\4\u0130\1\u0131\1\u0132\5\0\1\u0130\12\0\2\u0133\7\0"+
    "\1\u0134\3\u0130\1\u0135\3\u0134\1\u0136\1\u0134\32\0\1\u0134"+
    "\1\0\4\u0137\1\u0138\1\u0139\5\0\1\u0137\23\0\1\u013a"+
    "\3\u0137\1\u013b\3\u013a\1\u013c\1\u013a\4\0\2\u013d\24\0"+
    "\1\u013a\1\0\4\u013e\1\u013f\1\u0140\5\0\1\u013e\14\0"+
    "\3\u0141\4\0\1\u0142\3\u013e\1\u0143\3\u0142\1\u0144\1\u0142"+
    "\32\0\1\u0142\1\0\4\u0145\1\u0146\1\u0147\2\0\1\u0148"+
    "\2\0\1\u0145\7\0\1\u0148\13\0\1\u0149\3\u0145\1\u014a"+
    "\3\u0149\1\u014b\1\u0149\32\0\1\u0149\1\0\4\u014c\1\u014d"+
    "\1\u014e\5\0\1\u014c\17\0\2\u014f\2\0\1\u0150\3\u014c"+
    "\1\u0151\3\u0150\1\u0152\1\u0150\32\0\1\u0150\40\0\1\u0153"+
    "\3\0\6\u0153\32\0\1\u0153\1\0\4\u0154\1\0\1\u0155"+
    "\5\0\1\u0154\23\0\1\u0156\3\u0154\6\u0156\32\0\1\u0156"+
    "\1\0\4\u0154\1\0\1\u0155\5\0\1\u0154\23\0\1\u0156"+
    "\3\u0154\1\u0157\1\u0158\1\u0156\1\u0159\2\u0157\32\0\1\u0156"+
    "\1\0\4\u0154\1\0\1\u0155\5\0\1\u0154\23\0\1\u0156"+
    "\3\u0154\5\u0156\1\u015a\32\0\1\u0156\40\0\1\u0157\3\0"+
    "\5\u0157\1\u0156\32\0\1\u0157\10\0\1\u015b\10\0\1\u015b"+
    "\150\0\2\u015c\74\0\2\u015d\105\0\2\u015e\57\0\2\u015f"+
    "\125\0\2\u0160\105\0\2\u0161\13\0\2\u0162\103\0\2\u0163"+
    "\71\0\2\u015c\27\0\1\u0164\10\0\1\u0164\122\0\2\u0165"+
    "\55\0\1\u0166\10\0\1\u0166\64\0\4\265\1\0\1\266"+
    "\1\130\1\0\1\131\2\0\1\265\3\0\1\130\3\0"+
    "\1\131\2\132\5\0\2\133\2\0\1\u0167\3\265\1\u0168"+
    "\4\u0167\1\u0169\2\135\2\136\11\0\2\137\4\0\2\140"+
    "\2\141\3\0\1\u0167\7\0\1\u016a\10\0\1\u016a\65\0"+
    "\4\u016b\1\u016c\1\u016d\5\0\1\u016b\2\0\1\u016e\3\0"+
    "\1\u016e\14\0\1\u016f\3\u016b\1\u0170\3\u016f\1\u0171\1\u016f"+
    "\32\0\1\u016f\1\0\4\u0172\1\u0173\1\u0174\5\0\1\u0172"+
    "\23\0\1\u0175\3\u0172\1\u0176\3\u0175\1\u0177\1\u0175\23\0"+
    "\2\u0178\5\0\1\u0175\1\0\4\u0179\1\u017a\1\u017b\5\0"+
    "\1\u0179\23\0\1\u017c\3\u0179\1\u017d\3\u017c\1\u017e\1\u017c"+
    "\2\0\2\u017f\26\0\1\u017c\1\0\4\u0180\1\u0181\1\u0182"+
    "\5\0\1\u0180\12\0\2\u0183\7\0\1\u0184\3\u0180\1\u0185"+
    "\3\u0184\1\u0186\1\u0184\32\0\1\u0184\1\0\4\u0187\1\u0188"+
    "\1\u0189\1\u018a\4\0\1\u0187\3\0\1\u018a\17\0\1\u018b"+
    "\3\u0187\1\u018c\3\u018b\1\u018d\1\u018b\32\0\1\u018b\1\0"+
    "\4\u018e\1\u018f\1\u0190\5\0\1\u018e\23\0\1\u0191\3\u018e"+
    "\1\u0192\3\u0191\1\u0193\1\u0191\23\0\2\u0194\5\0\1\u0191"+
    "\1\0\4\u0195\1\u0196\1\u0197\1\0\1\u0198\3\0\1\u0195"+
    "\4\0\1\u0198\16\0\1\u0199\3\u0195\1\u019a\3\u0199\1\u019b"+
    "\1\u0199\32\0\1\u0199\1\0\4\276\2\0\1\277\1\300"+
    "\2\0\1\301\1\276\3\0\1\277\1\300\5\0\2\302"+
    "\3\0\2\303\2\304\1\0\3\276\12\0\2\306\2\307"+
    "\1\0\2\310\2\311\6\0\2\312\35\0\2\u019c\103\0"+
    "\2\u019d\66\0\1\u019e\7\0\1\u019e\136\0\2\u019f\2\0"+
    "\2\u01a0\32\0\1\u01a1\7\0\1\u01a2\1\u01a1\2\0\1\u01a2"+
    "\5\0\3\u01a3\22\0\2\u01a4\15\0\2\u01a5\37\0\3\u019c"+
    "\115\0\1\276\67\0\2\u01a6\25\0\2\u01a7\37\0\1\u01a5"+
    "\7\0\1\u01a5\2\0\2\u01a8\107\0\3\u01a9\105\0\2\u01aa"+
    "\74\0\2\u01a8\7\0\2\u01ab\115\0\1\276\35\0\4\314"+
    "\2\0\1\u01ac\1\u01ad\2\0\1\316\1\314\3\0\1\u01ac"+
    "\1\u01ad\5\0\2\u01ae\3\0\2\u01af\2\u01b0\1\u01b1\3\314"+
    "\1\u01b2\3\u01b1\1\u01b2\1\324\4\0\2\u01b3\2\u01b4\1\0"+
    "\2\u01b5\2\u01b6\6\0\2\u01b7\5\0\1\u01b1\1\0\4\314"+
    "\6\0\1\316\1\314\24\0\3\314\53\0\1\u01b8\7\0"+
    "\1\u01b8\126\0\1\315\110\0\1\315\35\0\4\321\6\0"+
    "\1\323\1\321\24\0\3\321\53\0\1\u01b9\7\0\1\u01b9"+
    "\126\0\1\322\110\0\1\322\43\0\1\u01ba\10\0\1\u01ba"+
    "\20\0\1\54\107\0\1\321\110\0\1\321\44\0\1\u01bb"+
    "\10\0\1\u01bb\17\0\1\54\62\0\1\u01bc\3\0\1\u01bc"+
    "\15\0\1\54\74\0\3\u01bd\5\0\1\54\104\0\1\54"+
    "\33\0\2\u01be\47\0\1\54\33\0\2\u01bf\47\0\1\54"+
    "\12\0\2\u01be\40\0\1\u01c0\12\0\1\u01c0\14\0\1\54"+
    "\104\0\1\54\14\0\2\342\61\0\2\u01c1\3\0\1\54"+
    "\72\0\2\u01c2\10\0\1\54\52\0\1\u01c3\10\0\1\u01c3"+
    "\31\0\2\u01c4\40\0\1\u01c5\10\0\1\u01c5\75\0\1\232"+
    "\12\0\1\232\107\0\2\u01c6\55\0\4\347\1\0\1\u01c7"+
    "\3\0\1\102\4\347\3\0\1\102\4\0\2\103\5\0"+
    "\2\104\1\105\3\0\1\106\3\105\1\107\1\110\6\0"+
    "\2\111\5\0\2\112\2\0\1\u01c8\1\0\2\113\5\0"+
    "\1\114\1\0\2\u01c9\3\0\1\u01ca\5\0\1\u01c9\71\0"+
    "\2\u01c9\3\0\1\u01ca\5\0\1\u01c9\27\0\1\350\3\0"+
    "\2\350\73\0\1\350\3\0\5\350\33\0\1\350\7\0"+
    "\1\u01cb\10\0\1\u01cb\120\0\2\u01cc\76\0\2\u01cd\66\0"+
    "\1\u01ce\7\0\1\u01ce\52\0\2\u01cf\64\0\2\u01d0\26\0"+
    "\2\360\2\u01c9\1\0\1\u01d1\5\0\1\360\71\0\2\360"+
    "\2\u01c9\1\0\1\u01d1\5\0\1\360\27\0\1\360\3\0"+
    "\2\360\73\0\1\360\3\0\5\360\33\0\1\360\25\0"+
    "\2\u01d2\114\0\2\u01d3\76\0\3\u01d4\100\0\2\u01d5\3\u01d6"+
    "\100\0\2\u01d7\64\0\1\u01d8\10\0\1\u01d8\150\0\2\u01d9"+
    "\74\0\2\u01da\105\0\2\u01db\57\0\2\u01dc\125\0\2\u01dd"+
    "\34\0\1\u01de\10\0\1\u01de\120\0\2\u01df\76\0\2\u01e0"+
    "\66\0\1\u01e1\7\0\1\u01e1\52\0\2\u01e2\64\0\2\u01e3"+
    "\26\0\2\u0103\3\0\1\u01e4\5\0\1\u0103\24\0\1\u01c9"+
    "\44\0\2\u0103\3\0\1\u01e4\5\0\1\u0103\24\0\1\u01c9"+
    "\2\0\1\u0103\3\0\2\u0103\73\0\1\u0103\3\0\5\u0103"+
    "\33\0\1\u0103\25\0\2\u01e5\114\0\2\u01e6\76\0\3\u01e7"+
    "\100\0\2\u01e8\3\u01e9\100\0\2\u01ea\63\0\1\u01eb\10\0"+
    "\1\u01eb\120\0\2\u01ec\76\0\2\u01ed\66\0\1\u01ee\7\0"+
    "\1\u01ee\52\0\2\u01ef\64\0\2\u01f0\26\0\2\u0110\3\0"+
    "\1\u01f1\5\0\1\u0110\25\0\1\u01c9\43\0\2\u0110\3\0"+
    "\1\u01f1\5\0\1\u0110\25\0\1\u01c9\1\0\1\u0110\3\0"+
    "\2\u0110\73\0\1\u0110\3\0\5\u0110\33\0\1\u0110\25\0"+
    "\2\u01f2\114\0\2\u01f3\76\0\3\u01f4\100\0\2\u01f5\3\u01f6"+
    "\100\0\2\u01f7\63\0\1\u01f8\10\0\1\u01f8\120\0\2\u01f9"+
    "\76\0\2\u01fa\66\0\1\u01fb\7\0\1\u01fb\52\0\2\u01fc"+
    "\64\0\2\u01fd\26\0\2\u011d\3\0\1\u01fe\5\0\1\u011d"+
    "\26\0\1\u01c9\42\0\2\u011d\3\0\1\u01fe\5\0\1\u011d"+
    "\26\0\1\u01c9\1\u011d\3\0\2\u011d\73\0\1\u011d\3\0"+
    "\5\u011d\33\0\1\u011d\25\0\2\u01ff\114\0\2\u0200\76\0"+
    "\3\u0201\100\0\2\u0202\3\u0203\100\0\2\u0204\134\0\2\u0205"+
    "\13\0\2\u0206\103\0\2\u0207\71\0\2\u01d9\27\0\1\u0208"+
    "\10\0\1\u0208\122\0\2\u0209\55\0\1\u020a\10\0\1\u020a"+
    "\110\0\1\347\1\0\1\347\2\0\1\347\1\0\1\347"+
    "\75\0\2\347\136\0\2\u020b\41\0\1\u020c\75\0\1\u020d"+
    "\10\0\1\u020d\65\0\4\u0130\1\u0131\1\u0132\5\0\1\u0130"+
    "\23\0\1\u0134\3\u0130\1\u0135\3\u0134\1\u0136\1\u0134\32\0"+
    "\1\u0134\40\0\1\u0134\3\0\6\u0134\32\0\1\u0134\7\0"+
    "\1\u020e\10\0\1\u020e\136\0\2\u020f\71\0\1\u0210\3\0"+
    "\6\u0210\32\0\1\u0210\40\0\1\u0210\3\0\1\u0210\1\u0211"+
    "\1\u0210\1\u0212\2\u0210\32\0\1\u0210\40\0\1\u0210\3\0"+
    "\5\u0210\1\u0213\32\0\1\u0210\1\0\4\u0137\1\u0138\1\u0139"+
    "\5\0\1\u0137\23\0\1\u013a\3\u0137\1\u013b\3\u013a\1\u013c"+
    "\1\u013a\32\0\1\u013a\40\0\1\u013a\3\0\6\u013a\32\0"+
    "\1\u013a\7\0\1\u0214\10\0\1\u0214\124\0\1\u0215\3\0"+
    "\6\u0215\32\0\1\u0215\40\0\1\u0215\3\0\1\u0215\1\u0216"+
    "\1\u0215\1\u0217\2\u0215\32\0\1\u0215\40\0\1\u0215\3\0"+
    "\5\u0215\1\u0218\32\0\1\u0215\1\0\4\u0137\1\u0138\1\u0139"+
    "\5\0\1\u0137\12\0\2\u0219\7\0\1\u013a\3\u0137\1\u013b"+
    "\3\u013a\1\u013c\1\u013a\32\0\1\u013a\1\0\4\u013e\1\u013f"+
    "\1\u0140\5\0\1\u013e\23\0\1\u0142\3\u013e\1\u0143\3\u0142"+
    "\1\u0144\1\u0142\32\0\1\u0142\40\0\1\u0142\3\0\6\u0142"+
    "\32\0\1\u0142\7\0\1\u021a\10\0\1\u021a\140\0\2\u021b"+
    "\67\0\1\u021c\3\0\6\u021c\32\0\1\u021c\40\0\1\u021c"+
    "\3\0\1\u021c\1\u021d\1\u021c\1\u021e\2\u021c\32\0\1\u021c"+
    "\40\0\1\u021c\3\0\5\u021c\1\u021f\32\0\1\u021c\1\0"+
    "\4\u0145\1\u0146\1\u0147\5\0\1\u0145\23\0\1\u0149\3\u0145"+
    "\1\u014a\3\u0149\1\u014b\1\u0149\32\0\1\u0149\40\0\1\u0149"+
    "\3\0\6\u0149\32\0\1\u0149\7\0\1\u0220\10\0\1\u0220"+
    "\142\0\2\u0221\65\0\1\u0222\3\0\6\u0222\32\0\1\u0222"+
    "\40\0\1\u0222\3\0\1\u0222\1\u0223\1\u0222\1\u0224\2\u0222"+
    "\32\0\1\u0222\40\0\1\u0222\3\0\5\u0222\1\u0225\32\0"+
    "\1\u0222\1\0\4\u014c\1\u014d\1\u014e\5\0\1\u014c\23\0"+
    "\1\u0150\3\u014c\1\u0151\3\u0150\1\u0152\1\u0150\32\0\1\u0150"+
    "\40\0\1\u0150\3\0\6\u0150\32\0\1\u0150\7\0\1\u0226"+
    "\10\0\1\u0226\74\0\1\u0227\10\0\1\u0227\123\0\1\u0228"+
    "\3\0\6\u0228\32\0\1\u0228\40\0\1\u0228\3\0\1\u0228"+
    "\1\u0229\1\u0228\1\u022a\2\u0228\32\0\1\u0228\40\0\1\u0228"+
    "\3\0\5\u0228\1\u022b\32\0\1\u0228\40\0\1\u0156\3\0"+
    "\6\u0156\32\0\1\u0156\1\0\4\u0154\1\u022c\1\u0155\5\0"+
    "\1\u0154\23\0\1\u022d\3\u0154\1\u022e\3\u022d\1\u022f\1\u022d"+
    "\32\0\1\u022d\7\0\1\u0230\10\0\1\u0230\65\0\4\u0154"+
    "\1\0\1\u0155\5\0\1\u0154\24\0\3\u0154\106\0\3\u0153"+
    "\101\0\1\u0153\3\0\2\u0153\44\0\1\u0231\12\0\1\u0231"+
    "\61\0\4\u0232\1\u0233\1\u0234\5\0\1\u0232\12\0\2\u0235"+
    "\7\0\1\u0236\3\u0232\1\u0237\3\u0236\1\u0238\1\u0236\32\0"+
    "\1\u0236\1\0\4\u0232\1\u0233\1\u0234\5\0\1\u0232\23\0"+
    "\1\u0236\3\u0232\1\u0237\3\u0236\1\u0238\1\u0236\4\0\2\u015c"+
    "\24\0\1\u0236\1\0\4\u0232\1\u0233\1\u0234\5\0\1\u0232"+
    "\14\0\3\u0239\4\0\1\u0236\3\u0232\1\u0237\3\u0236\1\u0238"+
    "\1\u0236\32\0\1\u0236\1\0\4\u0232\1\u0233\1\u0234\2\0"+
    "\1\u023a\2\0\1\u0232\7\0\1\u023a\13\0\1\u0236\3\u0232"+
    "\1\u0237\3\u0236\1\u0238\1\u0236\32\0\1\u0236\1\0\4\u0232"+
    "\1\u0233\1\u0234\5\0\1\u0232\17\0\2\u023b\2\0\1\u0236"+
    "\3\u0232\1\u0237\3\u0236\1\u0238\1\u0236\32\0\1\u0236\1\0"+
    "\4\u0232\1\u0233\1\u0234\5\0\1\u0232\2\0\1\u023c\3\0"+
    "\1\u023c\14\0\1\u0236\3\u0232\1\u0237\3\u0236\1\u0238\1\u0236"+
    "\32\0\1\u0236\1\0\4\u0232\1\u0233\1\u0234\5\0\1\u0232"+
    "\23\0\1\u0236\3\u0232\1\u0237\3\u0236\1\u0238\1\u0236\23\0"+
    "\2\u023d\5\0\1\u0236\1\0\4\u0232\1\u0233\1\u0234\5\0"+
    "\1\u0232\23\0\1\u0236\3\u0232\1\u0237\3\u0236\1\u0238\1\u0236"+
    "\2\0\2\u023d\26\0\1\u0236\1\0\4\u0232\1\u0233\1\u0234"+
    "\1\u023e\4\0\1\u0232\3\0\1\u023e\17\0\1\u0236\3\u0232"+
    "\1\u0237\3\u0236\1\u0238\1\u0236\32\0\1\u0236\1\0\4\u0232"+
    "\1\u0233\1\u0234\5\0\1\u0232\23\0\1\u0236\3\u0232\1\u0237"+
    "\3\u0236\1\u0238\1\u0236\23\0\2\u023f\5\0\1\u0236\1\0"+
    "\4\u0232\1\u0233\1\u0234\1\0\1\u0240\3\0\1\u0232\4\0"+
    "\1\u0240\16\0\1\u0236\3\u0232\1\u0237\3\u0236\1\u0238\1\u0236"+
    "\32\0\1\u0236\1\0\4\u0154\1\0\1\u0155\5\0\1\u0154"+
    "\24\0\3\u0154\1\u0167\3\0\2\u0167\73\0\1\u0167\3\0"+
    "\5\u0167\33\0\1\u0167\10\0\1\u0241\10\0\1\u0241\64\0"+
    "\4\u016b\1\u016c\1\u016d\5\0\1\u016b\23\0\1\u016f\3\u016b"+
    "\1\u0170\3\u016f\1\u0171\1\u016f\32\0\1\u016f\40\0\1\u016f"+
    "\3\0\6\u016f\32\0\1\u016f\7\0\1\u0242\10\0\1\u0242"+
    "\120\0\2\u016b\107\0\1\u0243\3\0\6\u0243\32\0\1\u0243"+
    "\40\0\1\u0243\3\0\1\u0243\1\u0244\1\u0243\1\u0245\2\u0243"+
    "\32\0\1\u0243\40\0\1\u0243\3\0\5\u0243\1\u0246\32\0"+
    "\1\u0243\1\0\4\u0172\1\u0173\1\u0174\5\0\1\u0172\23\0"+
    "\1\u0175\3\u0172\1\u0176\3\u0175\1\u0177\1\u0175\32\0\1\u0175"+
    "\40\0\1\u0175\3\0\6\u0175\32\0\1\u0175\7\0\1\u0247"+
    "\10\0\1\u0247\124\0\1\u0248\3\0\6\u0248\32\0\1\u0248"+
    "\40\0\1\u0248\3\0\1\u0248\1\u0249\1\u0248\1\u024a\2\u0248"+
    "\32\0\1\u0248\40\0\1\u0248\3\0\5\u0248\1\u024b\32\0"+
    "\1\u0248\31\0\3\u024c\52\0\4\u0179\1\u017a\1\u017b\5\0"+
    "\1\u0179\23\0\1\u017c\3\u0179\1\u017d\3\u017c\1\u017e\1\u017c"+
    "\32\0\1\u017c\40\0\1\u017c\3\0\6\u017c\32\0\1\u017c"+
    "\7\0\1\u024d\10\0\1\u024d\124\0\1\u024e\3\0\6\u024e"+
    "\32\0\1\u024e\40\0\1\u024e\3\0\1\u024e\1\u024f\1\u024e"+
    "\1\u0250\2\u024e\32\0\1\u024e\40\0\1\u024e\3\0\5\u024e"+
    "\1\u0251\32\0\1\u024e\31\0\3\u0252\52\0\4\u0180\1\u0181"+
    "\1\u0182\5\0\1\u0180\23\0\1\u0184\3\u0180\1\u0185\3\u0184"+
    "\1\u0186\1\u0184\32\0\1\u0184\40\0\1\u0184\3\0\6\u0184"+
    "\32\0\1\u0184\7\0\1\u0253\10\0\1\u0253\136\0\2\u0254"+
    "\71\0\1\u0255\3\0\6\u0255\32\0\1\u0255\40\0\1\u0255"+
    "\3\0\1\u0255\1\u0256\1\u0255\1\u0257\2\u0255\32\0\1\u0255"+
    "\40\0\1\u0255\3\0\5\u0255\1\u0258\32\0\1\u0255\1\0"+
    "\4\u0187\1\u0188\1\u0189\5\0\1\u0187\23\0\1\u018b\3\u0187"+
    "\1\u018c\3\u018b\1\u018d\1\u018b\32\0\1\u018b\40\0\1\u018b"+
    "\3\0\6\u018b\32\0\1\u018b\7\0\1\u0259\10\0\1\u0259"+
    "\111\0\2\u025a\116\0\1\u025b\3\0\6\u025b\32\0\1\u025b"+
    "\40\0\1\u025b\3\0\1\u025b\1\u025c\1\u025b\1\u025d\2\u025b"+
    "\32\0\1\u025b\40\0\1\u025b\3\0\5\u025b\1\u025e\32\0"+
    "\1\u025b\1\0\4\u018e\1\u018f\1\u0190\5\0\1\u018e\23\0"+
    "\1\u0191\3\u018e\1\u0192\3\u0191\1\u0193\1\u0191\32\0\1\u0191"+
    "\40\0\1\u0191\3\0\6\u0191\32\0\1\u0191\7\0\1\u025f"+
    "\10\0\1\u025f\124\0\1\u0260\3\0\6\u0260\32\0\1\u0260"+
    "\40\0\1\u0260\3\0\1\u0260\1\u0261\1\u0260\1\u0262\2\u0260"+
    "\32\0\1\u0260\40\0\1\u0260\3\0\5\u0260\1\u0263\32\0"+
    "\1\u0260\7\0\1\u0264\10\0\1\u0264\65\0\4\u0195\1\u0196"+
    "\1\u0197\5\0\1\u0195\23\0\1\u0199\3\u0195\1\u019a\3\u0199"+
    "\1\u019b\1\u0199\32\0\1\u0199\40\0\1\u0199\3\0\6\u0199"+
    "\32\0\1\u0199\7\0\1\u0265\10\0\1\u0265\144\0\2\u0266"+
    "\63\0\1\u0267\3\0\6\u0267\32\0\1\u0267\40\0\1\u0267"+
    "\3\0\1\u0267\1\u0268\1\u0267\1\u0269\2\u0267\32\0\1\u0267"+
    "\40\0\1\u0267\3\0\5\u0267\1\u026a\32\0\1\u0267\75\0"+
    "\2\321\105\0\2\321\15\0\1\u026b\12\0\1\u026b\111\0"+
    "\3\u026c\61\0\1\u026d\10\0\1\u026d\160\0\2\u026e\66\0"+
    "\2\u026f\50\0\2\u0270\25\0\2\u0271\17\0\2\u0272\17\0"+
    "\1\u0273\12\0\1\u0273\105\0\2\321\67\0\1\321\12\0"+
    "\1\321\107\0\2\u01a6\3\0\2\321\121\0\2\321\120\0"+
    "\2\321\23\0\1\321\10\0\1\321\140\0\2\321\56\0"+
    "\2\u0274\103\0\2\u0275\130\0\2\u0276\2\0\2\u0277\32\0"+
    "\1\u0278\7\0\1\u0279\1\u0278\2\0\1\u0279\5\0\3\u027a"+
    "\22\0\2\u027b\15\0\2\u027c\37\0\3\u0274\52\0\4\321"+
    "\6\0\1\323\1\321\24\0\3\321\5\0\1\322\34\0"+
    "\4\321\6\0\1\323\1\321\24\0\3\321\1\322\4\0"+
    "\1\322\62\0\2\u027d\25\0\2\u027e\37\0\1\u027c\7\0"+
    "\1\u027c\2\0\2\u027f\107\0\3\u0280\105\0\2\u0281\74\0"+
    "\2\u027f\7\0\2\u0282\56\0\1\u0283\12\0\1\u0283\71\0"+
    "\1\u0284\12\0\1\u0284\105\0\2\u01be\136\0\2\u01ba\57\0"+
    "\2\54\123\0\2\u0285\60\0\3\u01bc\60\0\1\u01bc\10\0"+
    "\1\u01bc\142\0\2\u01bc\35\0\1\u0286\10\0\1\u0286\135\0"+
    "\2\u01c1\67\0\2\u0287\103\0\2\u0288\72\0\2\u0289\65\0"+
    "\1\u028a\10\0\1\u028a\73\0\1\u028b\10\0\1\u028b\140\0"+
    "\2\u028c\30\0\2\u01c9\2\0\1\u028d\1\u01ca\5\0\1\u01c9"+
    "\23\0\1\u028e\3\0\1\u028f\3\u028e\1\u0290\1\u028e\32\0"+
    "\1\u028e\7\0\1\u0291\10\0\1\u0291\74\0\1\u0292\10\0"+
    "\1\u0292\150\0\2\u0293\74\0\2\u0294\105\0\2\u0295\57\0"+
    "\2\u0296\125\0\2\u0297\34\0\1\u0298\10\0\1\u0298\144\0"+
    "\2\u0299\13\0\2\u029a\103\0\2\u029b\71\0\2\u0293\27\0"+
    "\1\u029c\10\0\1\u029c\122\0\2\u029d\55\0\1\u029e\10\0"+
    "\1\u029e\74\0\1\u029f\12\0\1\u029f\61\0\2\u01c9\2\0"+
    "\1\u028d\1\u01ca\5\0\1\u01c9\12\0\2\u02a0\7\0\1\u028e"+
    "\1\u01c9\2\0\1\u028f\3\u028e\1\u0290\1\u028e\32\0\1\u028e"+
    "\1\0\2\u01c9\2\0\1\u028d\1\u01ca\5\0\1\u01c9\23\0"+
    "\1\u028e\1\u01c9\2\0\1\u028f\3\u028e\1\u0290\1\u028e\4\0"+
    "\2\u01d9\24\0\1\u028e\1\0\2\u01c9\2\0\1\u028d\1\u01ca"+
    "\5\0\1\u01c9\14\0\3\u02a1\4\0\1\u028e\1\u01c9\2\0"+
    "\1\u028f\3\u028e\1\u0290\1\u028e\32\0\1\u028e\1\0\2\u01c9"+
    "\2\0\1\u028d\1\u01ca\2\0\1\u02a2\2\0\1\u01c9\7\0"+
    "\1\u02a2\13\0\1\u028e\1\u01c9\2\0\1\u028f\3\u028e\1\u0290"+
    "\1\u028e\32\0\1\u028e\1\0\2\u01c9\2\0\1\u028d\1\u01ca"+
    "\5\0\1\u01c9\17\0\2\u02a3\2\0\1\u028e\1\u01c9\2\0"+
    "\1\u028f\3\u028e\1\u0290\1\u028e\32\0\1\u028e\10\0\1\u02a4"+
    "\10\0\1\u02a4\150\0\2\u02a5\74\0\2\u02a6\105\0\2\u02a7"+
    "\57\0\2\u02a8\125\0\2\u02a9\34\0\1\u02aa\10\0\1\u02aa"+
    "\144\0\2\u02ab\13\0\2\u02ac\103\0\2\u02ad\71\0\2\u02a5"+
    "\27\0\1\u02ae\10\0\1\u02ae\122\0\2\u02af\55\0\1\u02b0"+
    "\10\0\1\u02b0\73\0\1\u02b1\10\0\1\u02b1\150\0\2\u02b2"+
    "\74\0\2\u02b3\105\0\2\u02b4\57\0\2\u02b5\125\0\2\u02b6"+
    "\34\0\1\u02b7\10\0\1\u02b7\144\0\2\u02b8\13\0\2\u02b9"+
    "\103\0\2\u02ba\71\0\2\u02b2\27\0\1\u02bb\10\0\1\u02bb"+
    "\122\0\2\u02bc\55\0\1\u02bd\10\0\1\u02bd\73\0\1\u02be"+
    "\10\0\1\u02be\150\0\2\u02bf\74\0\2\u02c0\105\0\2\u02c1"+
    "\57\0\2\u02c2\125\0\2\u02c3\34\0\1\u02c4\10\0\1\u02c4"+
    "\144\0\2\u02c5\13\0\2\u02c6\103\0\2\u02c7\71\0\2\u02bf"+
    "\27\0\1\u02c8\10\0\1\u02c8\122\0\2\u02c9\55\0\1\u02ca"+
    "\10\0\1\u02ca\64\0\2\u01c9\2\0\1\u028d\1\u01ca\5\0"+
    "\1\u01c9\2\0\1\u02cb\3\0\1\u02cb\14\0\1\u028e\1\u01c9"+
    "\2\0\1\u028f\3\u028e\1\u0290\1\u028e\32\0\1\u028e\1\0"+
    "\2\u01c9\2\0\1\u028d\1\u01ca\5\0\1\u01c9\23\0\1\u028e"+
    "\1\u01c9\2\0\1\u028f\3\u028e\1\u0290\1\u028e\23\0\2\u02cc"+
    "\5\0\1\u028e\1\0\2\u01c9\2\0\1\u028d\1\u01ca\5\0"+
    "\1\u01c9\23\0\1\u028e\1\u01c9\2\0\1\u028f\3\u028e\1\u0290"+
    "\1\u028e\2\0\2\u02cc\26\0\1\u028e\1\0\2\u01c9\2\0"+
    "\1\u028d\1\u01ca\1\u02cd\4\0\1\u01c9\3\0\1\u02cd\17\0"+
    "\1\u028e\1\u01c9\2\0\1\u028f\3\u028e\1\u0290\1\u028e\32\0"+
    "\1\u028e\1\0\2\u01c9\2\0\1\u028d\1\u01ca\5\0\1\u01c9"+
    "\23\0\1\u028e\1\u01c9\2\0\1\u028f\3\u028e\1\u0290\1\u028e"+
    "\23\0\2\u02ce\5\0\1\u028e\1\0\2\u01c9\2\0\1\u028d"+
    "\1\u01ca\1\0\1\u02cf\3\0\1\u01c9\4\0\1\u02cf\16\0"+
    "\1\u028e\1\u01c9\2\0\1\u028f\3\u028e\1\u0290\1\u028e\32\0"+
    "\1\u028e\7\0\1\u02d0\10\0\1\u02d0\70\0\1\u02d1\2\0"+
    "\2\u02d1\1\0\1\u02d1\10\0\2\u02d1\1\0\1\u02d1\1\0"+
    "\1\u02d1\2\0\1\u02d1\1\0\1\u02d1\1\0\1\u02d1\13\0"+
    "\1\u02d1\1\0\1\u02d1\1\0\1\u02d1\1\0\2\u02d1\1\0"+
    "\1\u02d1\1\0\1\u02d1\1\0\1\u02d1\1\0\1\u02d1\3\0"+
    "\1\u02d1\1\0\1\u02d1\1\0\1\u02d1\12\0\1\u02d2\10\0"+
    "\1\u02d2\73\0\1\u02d3\10\0\1\u02d3\130\0\3\u0134\101\0"+
    "\1\u0134\3\0\2\u0134\43\0\1\u02d4\10\0\1\u02d4\130\0"+
    "\3\u013a\101\0\1\u013a\3\0\2\u013a\105\0\2\u02d5\41\0"+
    "\1\u02d6\10\0\1\u02d6\112\0\2\u013e\121\0\3\u0142\101\0"+
    "\1\u0142\3\0\2\u0142\43\0\1\u02d7\10\0\1\u02d7\117\0"+
    "\2\u0145\114\0\3\u0149\101\0\1\u0149\3\0\2\u0149\43\0"+
    "\1\u02d8\10\0\1\u02d8\143\0\2\u02d9\70\0\3\u0150\101\0"+
    "\1\u0150\3\0\2\u0150\73\0\1\u022d\3\0\6\u022d\32\0"+
    "\1\u022d\40\0\1\u02da\3\0\6\u02da\32\0\1\u02da\40\0"+
    "\1\u02da\3\0\1\u02da\1\u02db\1\u02da\1\u02dc\2\u02da\32\0"+
    "\1\u02da\40\0\1\u02da\3\0\5\u02da\1\u02dd\32\0\1\u02da"+
    "\10\0\1\u02de\10\0\1\u02de\75\0\1\u02df\7\0\1\u02df"+
    "\63\0\4\u0232\1\u0233\1\u0234\5\0\1\u0232\23\0\1\u0236"+
    "\3\u0232\1\u0237\3\u0236\1\u0238\1\u0236\32\0\1\u0236\40\0"+
    "\1\u0236\3\0\6\u0236\32\0\1\u0236\7\0\1\u02e0\10\0"+
    "\1\u02e0\136\0\2\u023b\71\0\1\u02e1\3\0\6\u02e1\32\0"+
    "\1\u02e1\40\0\1\u02e1\3\0\1\u02e1\1\u02e2\1\u02e1\1\u02e3"+
    "\2\u02e1\32\0\1\u02e1\40\0\1\u02e1\3\0\5\u02e1\1\u02e4"+
    "\32\0\1\u02e1\54\0\2\u02e5\105\0\2\u023c\35\0\1\u02e6"+
    "\10\0\1\u02e6\117\0\2\u0232\100\0\3\u023c\76\0\2\u023d"+
    "\65\0\1\u023c\10\0\1\u023c\144\0\2\u023e\34\0\1\u02e7"+
    "\12\0\1\u02e7\70\0\1\u02e8\10\0\1\u02e8\130\0\3\u016f"+
    "\101\0\1\u016f\3\0\2\u016f\43\0\1\u02e9\10\0\1\u02e9"+
    "\130\0\3\u0175\101\0\1\u0175\3\0\2\u0175\67\0\2\u0172"+
    "\57\0\1\u02ea\10\0\1\u02ea\130\0\3\u017c\101\0\1\u017c"+
    "\3\0\2\u017c\67\0\2\u0179\57\0\1\u02eb\10\0\1\u02eb"+
    "\73\0\1\u02ec\10\0\1\u02ec\130\0\3\u0184\101\0\1\u0184"+
    "\3\0\2\u0184\43\0\1\u02ed\10\0\1\u02ed\114\0\3\u02ee"+
    "\116\0\3\u018b\101\0\1\u018b\3\0\2\u018b\43\0\1\u02ef"+
    "\10\0\1\u02ef\130\0\3\u0191\101\0\1\u0191\3\0\2\u0191"+
    "\67\0\2\u018e\57\0\1\u02f0\10\0\1\u02f0\110\0\2\u02f1"+
    "\123\0\3\u0199\101\0\1\u0199\3\0\2\u0199\43\0\1\u02f2"+
    "\10\0\1\u02f2\143\0\2\u02f3\57\0\2\u02f4\14\0\2\u02f5"+
    "\67\0\2\304\72\0\2\u01a8\65\0\1\u02f6\10\0\1\u02f6"+
    "\37\0\2\u02f7\120\0\2\u02f8\103\0\2\u026f\42\0\2\u02f9"+
    "\144\0\2\322\105\0\2\322\35\0\3\u02fa\61\0\1\u02fb"+
    "\10\0\1\u02fb\160\0\2\u02fc\66\0\2\u02fd\50\0\2\u02fe"+
    "\25\0\2\u02ff\17\0\2\u0300\17\0\1\u0301\12\0\1\u0301"+
    "\105\0\2\322\67\0\1\322\12\0\1\322\107\0\2\u027d"+
    "\3\0\2\322\121\0\2\322\120\0\2\322\23\0\1\322"+
    "\10\0\1\322\140\0\2\322\37\0\1\u0302\10\0\1\u0302"+
    "\73\0\1\u0303\10\0\1\u0303\112\0\2\54\134\0\2\u0285"+
    "\32\0\1\u0304\10\0\1\u0304\140\0\2\u0305\105\0\2\u012b"+
    "\44\0\1\u012c\3\0\1\u012c\71\0\1\u0306\10\0\1\u0306"+
    "\154\0\2\u0307\52\0\1\u028e\3\0\6\u028e\32\0\1\u028e"+
    "\40\0\1\u0308\3\0\6\u0308\32\0\1\u0308\40\0\1\u0308"+
    "\3\0\1\u0308\1\u0309\1\u0308\1\u030a\2\u0308\32\0\1\u0308"+
    "\40\0\1\u0308\3\0\5\u0308\1\u030b\32\0\1\u0308\10\0"+
    "\1\u030c\10\0\1\u030c\74\0\1\u030d\12\0\1\u030d\61\0"+
    "\2\360\2\u01c9\1\0\1\u01d1\5\0\1\360\12\0\2\u030e"+
    "\10\0\1\360\44\0\2\360\2\u01c9\1\0\1\u01d1\5\0"+
    "\1\360\24\0\1\360\14\0\2\u0293\26\0\2\360\2\u01c9"+
    "\1\0\1\u01d1\5\0\1\360\14\0\3\u030f\5\0\1\360"+
    "\44\0\2\360\2\u01c9\1\0\1\u01d1\2\0\1\u0310\2\0"+
    "\1\360\7\0\1\u0310\14\0\1\360\44\0\2\360\2\u01c9"+
    "\1\0\1\u01d1\5\0\1\360\17\0\2\u0311\3\0\1\360"+
    "\53\0\1\u0312\10\0\1\u0312\64\0\2\360\2\u01c9\1\0"+
    "\1\u01d1\5\0\1\360\2\0\1\u0313\3\0\1\u0313\15\0"+
    "\1\360\44\0\2\360\2\u01c9\1\0\1\u01d1\5\0\1\360"+
    "\24\0\1\360\33\0\2\u0314\7\0\2\360\2\u01c9\1\0"+
    "\1\u01d1\5\0\1\360\24\0\1\360\12\0\2\u0314\30\0"+
    "\2\360\2\u01c9\1\0\1\u01d1\1\u0315\4\0\1\360\3\0"+
    "\1\u0315\20\0\1\360\44\0\2\360\2\u01c9\1\0\1\u01d1"+
    "\5\0\1\360\24\0\1\360\33\0\2\u0316\7\0\2\360"+
    "\2\u01c9\1\0\1\u01d1\1\0\1\u0317\3\0\1\360\4\0"+
    "\1\u0317\17\0\1\360\55\0\1\u0318\7\0\1\u0318\134\0"+
    "\2\u02a3\105\0\2\u0319\105\0\2\u02cb\35\0\1\u031a\10\0"+
    "\1\u031a\74\0\1\u031b\12\0\1\u031b\61\0\2\u0103\3\0"+
    "\1\u01e4\5\0\1\u0103\12\0\2\u031c\10\0\1\u031d\44\0"+
    "\2\u0103\3\0\1\u01e4\5\0\1\u0103\24\0\1\u031d\14\0"+
    "\2\u02a5\26\0\2\u0103\3\0\1\u01e4\5\0\1\u0103\14\0"+
    "\3\u031e\5\0\1\u031d\44\0\2\u0103\3\0\1\u01e4\2\0"+
    "\1\u031f\2\0\1\u0103\7\0\1\u031f\14\0\1\u031d\44\0"+
    "\2\u0103\3\0\1\u01e4\5\0\1\u0103\17\0\2\u0320\3\0"+
    "\1\u031d\53\0\1\u0321\10\0\1\u0321\64\0\2\u0103\3\0"+
    "\1\u01e4\5\0\1\u0103\2\0\1\u0322\3\0\1\u0322\15\0"+
    "\1\u031d\44\0\2\u0103\3\0\1\u01e4\5\0\1\u0103\24\0"+
    "\1\u031d\33\0\2\u0323\7\0\2\u0103\3\0\1\u01e4\5\0"+
    "\1\u0103\24\0\1\u031d\12\0\2\u0323\30\0\2\u0103\3\0"+
    "\1\u01e4\1\u0324\4\0\1\u0103\3\0\1\u0324\20\0\1\u031d"+
    "\44\0\2\u0103\3\0\1\u01e4\5\0\1\u0103\24\0\1\u031d"+
    "\33\0\2\u0325\7\0\2\u0103\3\0\1\u01e4\1\0\1\u0326"+
    "\3\0\1\u0103\4\0\1\u0326\17\0\1\u031d\54\0\1\u0327"+
    "\12\0\1\u0327\61\0\2\u0110\3\0\1\u01f1\5\0\1\u0110"+
    "\12\0\2\u0328\10\0\1\u0110\1\u01c9\43\0\2\u0110\3\0"+
    "\1\u01f1\5\0\1\u0110\24\0\1\u0110\1\u01c9\13\0\2\u02b2"+
    "\26\0\2\u0110\3\0\1\u01f1\5\0\1\u0110\14\0\3\u0329"+
    "\5\0\1\u0110\1\u01c9\43\0\2\u0110\3\0\1\u01f1\2\0"+
    "\1\u032a\2\0\1\u0110\7\0\1\u032a\14\0\1\u0110\1\u01c9"+
    "\43\0\2\u0110\3\0\1\u01f1\5\0\1\u0110\17\0\2\u032b"+
    "\3\0\1\u0110\1\u01c9\52\0\1\u032c\10\0\1\u032c\64\0"+
    "\2\u0110\3\0\1\u01f1\5\0\1\u0110\2\0\1\u032d\3\0"+
    "\1\u032d\15\0\1\u0110\1\u01c9\43\0\2\u0110\3\0\1\u01f1"+
    "\5\0\1\u0110\24\0\1\u0110\1\u01c9\32\0\2\u032e\7\0"+
    "\2\u0110\3\0\1\u01f1\5\0\1\u0110\24\0\1\u0110\1\u01c9"+
    "\11\0\2\u032e\30\0\2\u0110\3\0\1\u01f1\1\u032f\4\0"+
    "\1\u0110\3\0\1\u032f\20\0\1\u0110\1\u01c9\43\0\2\u0110"+
    "\3\0\1\u01f1\5\0\1\u0110\24\0\1\u0110\1\u01c9\32\0"+
    "\2\u0330\7\0\2\u0110\3\0\1\u01f1\1\0\1\u0331\3\0"+
    "\1\u0110\4\0\1\u0331\17\0\1\u0110\1\u01c9\53\0\1\u0332"+
    "\12\0\1\u0332\61\0\2\u011d\3\0\1\u01fe\5\0\1\u011d"+
    "\12\0\2\u0333\10\0\1\u011d\1\0\1\u01c9\42\0\2\u011d"+
    "\3\0\1\u01fe\5\0\1\u011d\24\0\1\u011d\1\0\1\u01c9"+
    "\12\0\2\u02bf\26\0\2\u011d\3\0\1\u01fe\5\0\1\u011d"+
    "\14\0\3\u0334\5\0\1\u011d\1\0\1\u01c9\42\0\2\u011d"+
    "\3\0\1\u01fe\2\0\1\u0335\2\0\1\u011d\7\0\1\u0335"+
    "\14\0\1\u011d\1\0\1\u01c9\42\0\2\u011d\3\0\1\u01fe"+
    "\5\0\1\u011d\17\0\2\u0336\3\0\1\u011d\1\0\1\u01c9"+
    "\51\0\1\u0337\10\0\1\u0337\64\0\2\u011d\3\0\1\u01fe"+
    "\5\0\1\u011d\2\0\1\u0338\3\0\1\u0338\15\0\1\u011d"+
    "\1\0\1\u01c9\42\0\2\u011d\3\0\1\u01fe\5\0\1\u011d"+
    "\24\0\1\u011d\1\0\1\u01c9\31\0\2\u0339\7\0\2\u011d"+
    "\3\0\1\u01fe\5\0\1\u011d\24\0\1\u011d\1\0\1\u01c9"+
    "\10\0\2\u0339\30\0\2\u011d\3\0\1\u01fe\1\u033a\4\0"+
    "\1\u011d\3\0\1\u033a\20\0\1\u011d\1\0\1\u01c9\42\0"+
    "\2\u011d\3\0\1\u01fe\5\0\1\u011d\24\0\1\u011d\1\0"+
    "\1\u01c9\31\0\2\u033b\7\0\2\u011d\3\0\1\u01fe\1\0"+
    "\1\u033c\3\0\1\u011d\4\0\1\u033c\17\0\1\u011d\1\0"+
    "\1\u01c9\75\0\2\u01c9\100\0\3\u02cb\76\0\2\u02cc\65\0"+
    "\1\u02cb\10\0\1\u02cb\144\0\2\u02cd\57\0\2\347\53\0"+
    "\1\u02d1\2\0\2\u02d1\1\0\1\u02d1\3\0\1\u033d\4\0"+
    "\2\u02d1\1\0\1\u02d1\1\0\1\u02d1\2\0\1\u02d1\1\0"+
    "\1\u02d1\1\0\1\u02d1\13\0\1\u02d1\1\0\1\u02d1\1\0"+
    "\1\u02d1\1\0\2\u02d1\1\0\1\u02d1\1\0\1\u02d1\1\0"+
    "\1\u02d1\1\0\1\u02d1\3\0\1\u02d1\1\0\1\u02d1\1\0"+
    "\1\u02d1\13\0\1\u033e\12\0\1\u033e\140\0\2\u033f\34\0"+
    "\1\u0340\12\0\1\u0340\70\0\1\u0341\10\0\1\u0341\74\0"+
    "\1\u0342\12\0\1\u0342\71\0\1\u0343\12\0\1\u0343\71\0"+
    "\1\u0344\12\0\1\u0344\107\0\2\u014c\121\0\3\u022d\101\0"+
    "\1\u022d\3\0\2\u022d\44\0\1\u0345\12\0\1\u0345\73\0"+
    "\1\126\101\0\1\u0346\10\0\1\u0346\130\0\3\u0236\101\0"+
    "\1\u0236\3\0\2\u0236\62\0\2\u0232\134\0\2\u02e5\35\0"+
    "\1\u0347\7\0\1\u0347\73\0\1\u0348\12\0\1\u0348\71\0"+
    "\1\u0349\12\0\1\u0349\71\0\1\u034a\12\0\1\u034a\71\0"+
    "\1\u034b\12\0\1\u034b\140\0\2\u034c\34\0\1\u034d\12\0"+
    "\1\u034d\114\0\2\u0187\60\0\1\u034e\12\0\1\u034e\71\0"+
    "\1\u034f\12\0\1\u034f\111\0\3\u0350\60\0\1\u0351\10\0"+
    "\1\u0351\76\0\1\u01a5\7\0\1\u01a5\140\0\2\u0352\54\0"+
    "\2\u0353\63\0\1\277\10\0\1\277\74\0\1\u0354\10\0"+
    "\1\u0354\121\0\2\u01ab\142\0\2\u01a5\66\0\2\u0355\57\0"+
    "\2\u0356\14\0\2\u0357\67\0\2\u01b0\72\0\2\u027f\65\0"+
    "\1\u0358\10\0\1\u0358\37\0\2\u0359\120\0\2\u035a\103\0"+
    "\2\u02fd\42\0\2\u035b\56\0\1\u035c\10\0\1\u035c\73\0"+
    "\1\u035d\10\0\1\u035d\147\0\2\u035e\115\0\2\u01c5\17\0"+
    "\1\u035f\12\0\1\u035f\67\0\1\u0360\10\0\1\u0360\64\0"+
    "\1\u0361\1\u0362\36\u0361\1\0\3\u0361\6\0\32\u0361\1\0"+
    "\1\u0361\1\u0362\36\u0361\1\0\3\u0361\1\0\3\u028e\2\0"+
    "\32\u0361\1\0\1\u0361\1\u0362\36\u0361\1\u028e\3\u0361\6\u028e"+
    "\32\u0361\1\u028e\1\u0361\1\u0362\36\u0361\1\0\3\u0361\1\u028e"+
    "\3\0\2\u028e\32\u0361\12\0\1\u0363\12\0\1\u0363\72\0"+
    "\1\u0364\7\0\1\u0364\134\0\2\u0311\105\0\2\u0365\105\0"+
    "\2\u0313\35\0\1\u0366\10\0\1\u0366\74\0\1\u0367\12\0"+
    "\1\u0367\114\0\2\360\100\0\3\u0313\76\0\2\u0314\65\0"+
    "\1\u0313\10\0\1\u0313\144\0\2\u0315\36\0\1\212\120\0"+
    "\2\u01c9\134\0\2\u0319\35\0\1\u0368\7\0\1\u0368\134\0"+
    "\2\u0320\32\0\2\u031d\2\0\1\u028d\1\u0369\5\0\1\u031d"+
    "\23\0\1\u028e\1\u01c9\2\0\1\u028f\3\u028e\1\u0290\1\u028e"+
    "\32\0\1\u028e\54\0\2\u036a\105\0\2\u0322\35\0\1\u036b"+
    "\10\0\1\u036b\74\0\1\u036c\12\0\1\u036c\114\0\2\u0103"+
    "\100\0\3\u0322\76\0\2\u0323\65\0\1\u0322\10\0\1\u0322"+
    "\144\0\2\u0324\35\0\1\u036d\7\0\1\u036d\134\0\2\u032b"+
    "\105\0\2\u036e\105\0\2\u032d\35\0\1\u036f\10\0\1\u036f"+
    "\74\0\1\u0370\12\0\1\u0370\114\0\2\u0110\100\0\3\u032d"+
    "\76\0\2\u032e\65\0\1\u032d\10\0\1\u032d\144\0\2\u032f"+
    "\35\0\1\u0371\7\0\1\u0371\134\0\2\u0336\105\0\2\u0372"+
    "\105\0\2\u0338\35\0\1\u0373\10\0\1\u0373\74\0\1\u0374"+
    "\12\0\1\u0374\114\0\2\u011d\100\0\3\u0338\76\0\2\u0339"+
    "\65\0\1\u0338\10\0\1\u0338\144\0\2\u033a\26\0\2\u033d"+
    "\2\0\2\u033d\1\0\1\u033d\3\0\1\u0375\4\0\2\u033d"+
    "\1\0\1\u033d\1\0\1\u033d\2\0\1\u033d\1\0\1\u033d"+
    "\1\0\2\u033d\3\0\6\u033d\1\0\1\u033d\1\0\1\u033d"+
    "\1\0\1\u033d\1\0\2\u033d\1\0\1\u033d\1\0\1\u033d"+
    "\1\0\1\u033d\1\0\1\u033d\3\0\1\u033d\1\0\1\u033d"+
    "\1\0\1\u033d\1\0\1\u033d\12\0\1\u0376\7\0\1\u0376"+
    "\111\0\2\u0130\66\0\1\u0377\7\0\1\u0377\142\0\2\u0378"+
    "\35\0\1\u0379\7\0\1\u0379\74\0\1\u037a\7\0\1\u037a"+
    "\74\0\1\u037b\7\0\1\u037b\74\0\1\u037c\7\0\1\u037c"+
    "\73\0\1\u037d\12\0\1\u037d\73\0\1\265\103\0\1\u037e"+
    "\7\0\1\u037e\74\0\1\u037f\7\0\1\u037f\74\0\1\u0380"+
    "\7\0\1\u0380\74\0\1\u0381\7\0\1\u0381\111\0\2\u0180"+
    "\66\0\1\u0382\7\0\1\u0382\74\0\1\u0383\7\0\1\u0383"+
    "\74\0\1\u0384\7\0\1\u0384\116\0\2\u0195\55\0\1\276"+
    "\154\0\2\u0385\103\0\2\u0386\3\0\2\310\2\311\26\0"+
    "\1\300\10\0\1\300\75\0\1\u027c\7\0\1\u027c\140\0"+
    "\2\u0387\54\0\2\u0388\63\0\1\u01ac\10\0\1\u01ac\74\0"+
    "\1\u0389\10\0\1\u0389\121\0\2\u0282\142\0\2\u027c\14\0"+
    "\1\314\104\0\1\321\127\0\3\u01c5\63\0\1\u038a\7\0"+
    "\1\u038a\100\0\1\u038b\70\0\1\u0361\114\0\1\u038c\7\0"+
    "\1\u038c\75\0\1\213\120\0\2\360\134\0\2\u0365\35\0"+
    "\1\u038d\7\0\1\u038d\75\0\1\221\100\0\1\u038e\10\0"+
    "\1\u038e\113\0\2\u0103\134\0\2\u036a\35\0\1\u038f\7\0"+
    "\1\u038f\75\0\1\222\120\0\2\u0110\134\0\2\u036e\35\0"+
    "\1\u0390\7\0\1\u0390\75\0\1\223\120\0\2\u011d\134\0"+
    "\2\u0372\35\0\1\u0391\7\0\1\u0391\122\0\1\u0392\3\0"+
    "\6\u0392\32\0\1\u0392\13\0\1\u0130\104\0\1\u0137\120\0"+
    "\2\u0137\67\0\1\u013e\104\0\1\u0145\104\0\1\u014c\104\0"+
    "\1\u0154\103\0\1\u0393\7\0\1\u0393\75\0\1\u016b\104\0"+
    "\1\u0172\104\0\1\u0179\104\0\1\u0180\104\0\1\u0187\104\0"+
    "\1\u018e\104\0\1\u0195\125\0\2\321\125\0\2\u0394\103\0"+
    "\2\u0395\103\0\2\u0396\3\0\2\u01b5\2\u01b6\26\0\1\u01ad"+
    "\10\0\1\u01ad\76\0\1\347\102\0\1\u0397\12\0\1\u0397"+
    "\73\0\1\u01c9\104\0\1\360\101\0\1\u0398\10\0\1\u0398"+
    "\76\0\1\u0103\104\0\1\u0110\104\0\1\u011d\131\0\1\u0392"+
    "\3\0\6\u0392\22\0\1\u0399\7\0\1\u0392\13\0\1\u0232"+
    "\120\0\2\u01a6\110\0\2\322\125\0\2\u039a\103\0\2\u039b"+
    "\36\0\1\u039c\12\0\1\u039c\107\0\2\u027d\66\0\1\u039d"+
    "\7\0\1\u039d\74\0\1\u039e\7\0\1\u039e\163\0\2\u039f"+
    "\15\0\1\u031d\107\0\1\u03a0\71\0\2\u03a0\2\0\2\u03a0"+
    "\1\0\1\u03a0\3\0\1\u03a1\4\0\2\u03a0\1\0\1\u03a0"+
    "\1\0\1\u03a0\2\0\1\u03a0\1\0\1\u03a0\1\0\2\u03a0"+
    "\3\0\6\u03a0\1\0\1\u03a0\1\0\1\u03a0\1\0\1\u03a0"+
    "\1\0\2\u03a0\1\0\1\u03a0\1\0\1\u03a0\1\0\1\u03a0"+
    "\1\0\1\u03a0\3\0\1\u03a0\1\0\1\u03a0\1\0\1\u03a0"+
    "\1\0\1\u03a0\40\0\1\u03a2\3\0\6\u03a2\32\0\1\u03a2"+
    "\40\0\1\u03a2\3\0\6\u03a2\22\0\1\u03a3\7\0\1\u03a2"+
    "\73\u03a4\1\0\104\u03a4\1\u03a5\11\u03a4\42\0\1\u03a6\116\0"+
    "\2\u03a7\120\0\2\u03a8\21\0\1\u03a9\10\0\1\u03a9\160\0"+
    "\1\347\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[61824];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\25\0\2\1\1\11\1\1\1\11\1\1\1\11\17\1"+
    "\1\11\2\1\1\0\1\1\2\0\1\1\50\0\1\11"+
    "\6\0\4\1\1\0\1\1\20\0\3\1\125\0\1\1"+
    "\4\0\1\1\2\0\12\1\163\0\1\11\4\1\262\0"+
    "\1\11\2\0\1\11\3\1\1\0\1\11\3\1\3\0"+
    "\1\11\3\1\2\0\1\11\3\1\2\0\1\11\3\1"+
    "\27\0\1\11\3\1\1\0\1\11\3\1\2\0\1\11"+
    "\3\1\3\0\1\11\3\1\2\0\1\11\3\1\1\0"+
    "\1\11\3\1\3\0\1\11\3\1\157\0\1\11\3\1"+
    "\3\0\1\11\3\1\174\0\1\11\1\1\66\0\1\11"+
    "\20\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[937];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "1.0"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public Dates() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {

		//Check for NULL values?

		String norm = "";
		
		if(annotationEntity.getRelatedEntity("YEAR") != null && annotationEntity.getRelatedEntity("YEAR").getValue() != null) {
			norm = annotationEntity.getRelatedEntity("YEAR").getValue() + "-";
		} else {
			System.err.println("Dates - addValue() - YEAR is null for " + annotationEntity.getText());
		}

		if(annotationEntity.getRelatedEntity("MONTH") != null && annotationEntity.getRelatedEntity("MONTH").getValue() != null) {
			norm += annotationEntity.getRelatedEntity("MONTH").getValue() + "-";
		} else {
			System.err.println("Dates - addValue() - MONTH is null for " + annotationEntity.getText());
		}
		
		if(annotationEntity.getRelatedEntity("DAY") != null && annotationEntity.getRelatedEntity("DAY").getValue() != null) {
			norm += annotationEntity.getRelatedEntity("DAY").getValue();
		} else {
			System.err.println("Dates - addValue() - DAY is null for " + annotationEntity.getText());
		}
		
		annotationEntity.setValue(norm);
	} 
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Dates(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 378) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            }
          case 23: break;
          case 2: 
            { addText(yytext());
		position++;
            }
          case 24: break;
          case 3: 
            { checkEnd();
            }
          case 25: break;
          case 4: 
            { save(new Year(), Util.readFirstNumber(yytext()), false);
            }
          case 26: break;
          case 5: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 6;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 7;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Month(), Util.readFirstNumber(yytext()), false);
            }
          case 27: break;
          case 6: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            }
          case 28: break;
          case 7: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 19;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Month(), "11", false);
            }
          case 29: break;
          case 8: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 17;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Month(), "09", false);
            }
          case 30: break;
          case 9: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 12;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Month(), "04", false);
            }
          case 31: break;
          case 10: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 16;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Month(), "08", false);
            }
          case 32: break;
          case 11: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 18;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Month(), "10", false);
            }
          case 33: break;
          case 12: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 11;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Month(), "03", false);
            }
          case 34: break;
          case 13: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 13;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Month(), "05", false);
            }
          case 35: break;
          case 14: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 15;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Month(), "07", false);
            }
          case 36: break;
          case 15: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 20;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Month(), "12", false);
            }
          case 37: break;
          case 16: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 8;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Month(), "01", false);
            }
          case 38: break;
          case 17: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 14;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Month(), "06", false);
            }
          case 39: break;
          case 18: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 10;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Month(), "02", false);
            }
          case 40: break;
          case 19: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 5;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Day(), Util.readFirstNumber(yytext()), false);
            }
          case 41: break;
          case 20: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { save(new Day(), Util.readFirstNumber(yytext()), false);
            }
          case 42: break;
          case 21: 
            { start(new Date(), completeDateState, true, true);
            }
          case 43: break;
          case 22: 
            { addText(yytext()); 
	yybegin(lkn);
            }
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Dates [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Dates scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Dates(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
