/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
/* The following code was generated by JFlex 1.6.1 */

package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>ArticleNumbers.jflex</tt>
 */
public class ArticleNumbers extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int detachedState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\0\1\13\1\1\22\0\1\13\5\0\1\5"+
    "\1\0\1\13\1\13\2\0\1\13\1\3\1\0\1\33\1\32\1\32"+
    "\1\32\1\32\1\32\1\32\1\32\1\32\1\32\1\32\1\14\1\12"+
    "\5\0\1\25\1\7\1\45\1\22\1\27\1\56\1\54\1\22\1\22"+
    "\1\22\1\50\1\37\1\35\1\6\1\31\1\11\1\22\1\43\1\23"+
    "\1\41\1\22\1\22\1\60\1\22\1\22\1\22\1\51\1\0\1\52"+
    "\1\0\1\4\1\0\1\24\1\17\1\44\1\15\1\26\1\55\1\53"+
    "\1\15\1\15\1\15\1\47\1\36\1\34\1\16\1\30\1\21\1\15"+
    "\1\42\1\20\1\40\1\15\1\15\1\57\1\15\1\15\1\15\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\15\1\15\4\15\1\0\1\15\1\15\1\15\2\15\1\15\1\15"+
    "\2\15\1\0\1\15\1\15\1\15\3\15\2\0\1\15\1\15\2\15"+
    "\3\0\1\15\1\15\4\15\1\0\1\15\1\15\1\15\2\15\1\15"+
    "\1\15\2\15\1\0\1\15\1\15\1\15\3\15\2\0\1\15\1\15"+
    "\2\15\53\0\1\15\1\15\6\0\2\0\66\0\1\15\1\15\4\0"+
    "\1\15\1\15\17\0\1\10\u1c88\0\1\15\1\15\216\0\2\15\42\0"+
    "\1\15\1\15\u0155\0\1\3\1\3\4\0\1\0\16\0\1\0\1\0"+
    "\u0100\0\1\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\4\1\2\2\1\3\27\0\1\4\23\0\1\5"+
    "\160\0\1\6\44\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u0157\0\u01b9\0\u0157\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\365\0\u02ae\0\u02df\0\u01ea\0\u0310\0\u0341\0\u0372\0\u03a3"+
    "\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b"+
    "\0\u055c\0\u058d\0\u05be\0\u0157\0\u05ef\0\u0620\0\u0651\0\u0682"+
    "\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0157"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71"+
    "\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419"+
    "\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1"+
    "\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729"+
    "\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1"+
    "\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39"+
    "\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49"+
    "\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1"+
    "\0\u0157\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028"+
    "\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0"+
    "\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338"+
    "\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0"+
    "\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\4\6\2\10\1\6\1\10\3\6\16\10"+
    "\1\6\12\10\1\6\2\10\1\11\1\6\6\10\51\12"+
    "\1\13\7\12\61\14\1\15\1\16\4\15\2\0\1\15"+
    "\1\0\3\15\16\0\1\15\12\0\1\15\2\0\2\15"+
    "\60\0\1\17\40\0\1\20\30\0\1\21\27\0\1\20"+
    "\141\0\1\20\3\0\2\22\54\0\1\23\57\0\1\24"+
    "\30\0\1\15\27\0\1\24\34\0\1\25\7\0\1\25"+
    "\43\0\4\26\1\27\4\0\3\26\15\0\1\20\16\0"+
    "\1\30\55\0\3\31\46\0\2\32\67\0\3\33\11\0"+
    "\4\26\1\27\4\0\3\26\34\0\1\30\15\0\1\34"+
    "\7\0\1\34\100\0\2\35\27\0\1\36\7\0\1\36"+
    "\110\0\3\37\46\0\2\40\30\0\1\41\7\0\1\41"+
    "\107\0\3\42\24\0\1\43\52\0\1\44\7\0\1\44"+
    "\75\0\1\45\35\0\1\46\7\0\1\46\2\0\1\46"+
    "\43\0\1\47\7\0\1\47\46\0\1\50\1\0\2\50"+
    "\1\0\1\50\10\0\2\50\1\0\1\50\1\0\1\50"+
    "\1\0\1\50\3\0\1\50\1\0\1\50\1\0\1\50"+
    "\1\0\1\50\1\0\1\50\2\0\1\50\3\0\1\50"+
    "\1\0\1\50\1\0\1\50\51\0\1\51\20\0\1\52"+
    "\7\0\1\52\53\0\1\53\50\0\1\50\1\0\2\50"+
    "\1\0\1\50\2\0\1\54\5\0\2\50\1\0\1\50"+
    "\1\0\1\50\1\0\1\50\3\0\1\50\1\0\1\50"+
    "\1\0\1\50\1\0\1\50\1\0\1\50\2\0\1\50"+
    "\3\0\1\50\1\0\1\50\1\0\1\50\51\55\1\0"+
    "\7\55\12\0\1\26\56\0\1\56\7\0\1\56\2\0"+
    "\1\56\20\0\2\57\16\0\2\54\1\0\2\54\1\0"+
    "\1\54\2\0\1\60\5\0\2\54\1\0\1\54\1\0"+
    "\1\54\1\0\2\54\2\0\1\54\1\0\1\54\1\0"+
    "\1\54\1\0\1\54\1\0\1\54\2\0\1\54\3\0"+
    "\1\54\1\0\1\54\1\0\1\54\51\55\1\0\1\61"+
    "\6\55\40\0\2\62\47\0\2\63\61\0\1\64\26\0"+
    "\32\55\1\65\16\55\1\0\1\61\6\55\11\0\1\66"+
    "\7\0\1\66\73\0\2\67\55\0\1\64\17\0\1\70"+
    "\6\0\14\55\1\71\15\55\1\65\16\55\1\0\1\61"+
    "\6\55\57\0\2\72\34\0\2\73\23\0\3\55\2\71"+
    "\1\55\2\71\1\55\1\71\2\55\1\74\5\55\2\71"+
    "\1\55\1\71\1\55\1\71\1\55\2\71\2\55\1\71"+
    "\1\55\1\71\1\55\1\71\1\55\1\71\1\55\1\71"+
    "\2\55\1\71\1\0\1\61\1\55\1\71\1\55\1\71"+
    "\1\55\1\71\14\0\1\75\70\0\2\76\33\0\51\55"+
    "\1\0\1\61\2\55\2\77\2\55\3\0\2\75\1\0"+
    "\2\75\1\0\1\75\2\0\1\100\5\0\2\75\1\0"+
    "\1\75\1\0\1\75\1\0\2\75\2\0\1\75\1\0"+
    "\1\75\1\0\1\75\1\0\1\75\1\0\1\75\2\0"+
    "\1\75\3\0\1\75\1\0\1\75\1\0\1\75\14\0"+
    "\1\101\44\0\26\55\2\102\21\55\1\0\1\61\6\55"+
    "\32\0\1\103\31\0\2\101\1\0\2\101\1\0\1\101"+
    "\2\0\1\104\5\0\2\101\1\0\1\101\1\0\1\101"+
    "\1\0\2\101\2\0\1\101\1\0\1\101\1\0\1\101"+
    "\1\0\1\101\1\0\1\101\2\0\1\101\3\0\1\101"+
    "\1\0\1\101\1\0\1\101\42\55\2\105\5\55\1\0"+
    "\1\61\6\55\32\0\1\103\17\0\1\106\40\0\1\107"+
    "\26\0\4\55\1\110\44\55\1\0\1\61\6\55\51\111"+
    "\1\0\7\111\32\0\1\107\17\0\1\112\6\0\51\55"+
    "\1\0\1\61\2\113\4\55\51\111\1\114\7\111\51\115"+
    "\1\0\7\115\26\55\2\116\21\55\1\0\1\61\6\55"+
    "\33\0\1\117\25\0\51\115\1\120\7\115\36\55\2\121"+
    "\11\55\1\0\1\61\6\55\36\0\2\122\54\0\1\123"+
    "\25\0\14\55\1\124\34\55\1\0\1\61\6\55\46\0"+
    "\3\125\46\0\2\126\21\0\6\55\1\127\7\55\1\127"+
    "\32\55\1\0\1\61\6\55\6\0\1\130\7\0\1\130"+
    "\110\0\3\131\10\0\46\55\3\132\1\0\1\61\6\55"+
    "\52\0\1\26\14\0\1\133\7\0\1\133\42\0\36\55"+
    "\2\134\11\55\1\0\1\61\6\55\52\0\1\135\6\0"+
    "\51\55\1\136\1\61\6\55\1\0\4\135\1\137\4\0"+
    "\3\135\34\0\1\140\10\0\4\136\5\0\1\141\2\136"+
    "\35\0\1\142\14\0\1\143\7\0\1\143\100\0\2\144"+
    "\22\0\4\136\4\0\1\145\1\141\2\136\4\0\1\145"+
    "\30\0\1\142\14\0\1\146\7\0\1\146\51\0\1\147"+
    "\7\0\1\147\107\0\3\150\20\0\1\151\7\0\1\151"+
    "\2\0\1\151\103\0\3\152\20\0\1\153\7\0\1\153"+
    "\2\0\1\153\43\0\1\154\7\0\1\154\51\0\1\155"+
    "\7\0\1\155\77\0\2\156\32\0\1\157\7\0\1\157"+
    "\53\0\1\160\52\0\1\161\7\0\1\161\75\0\1\162"+
    "\37\0\1\135\56\0\1\163\7\0\1\163\2\0\1\163"+
    "\12\0\2\164\4\0\2\57\20\0\1\136\124\0\1\165"+
    "\47\0\2\166\45\0\2\167\31\0\51\170\1\0\7\170"+
    "\11\0\1\171\7\0\1\171\77\0\2\172\11\0\2\173"+
    "\4\0\51\170\1\0\1\174\6\170\57\0\2\76\40\0"+
    "\2\175\23\0\1\176\54\0\32\170\1\177\16\170\1\0"+
    "\1\174\6\170\26\0\2\200\73\0\2\201\15\0\14\170"+
    "\1\202\15\170\1\177\16\170\1\0\1\174\6\170\42\0"+
    "\2\76\43\0\2\203\31\0\3\170\2\202\1\170\2\202"+
    "\1\170\1\202\2\170\1\204\5\170\2\202\1\170\1\202"+
    "\1\170\1\202\1\170\2\202\2\170\1\202\1\170\1\202"+
    "\1\170\1\202\1\170\1\202\1\170\1\202\2\170\1\202"+
    "\1\0\1\174\1\170\1\202\1\170\1\202\1\170\1\202"+
    "\55\0\2\205\2\0\24\170\2\206\14\170\2\207\5\170"+
    "\1\0\1\174\4\170\2\210\14\0\1\211\44\0\34\170"+
    "\2\212\13\170\1\0\1\174\34\170\2\213\21\170\1\0"+
    "\1\174\17\170\1\214\7\170\1\214\27\170\1\0\1\174"+
    "\6\170\3\0\2\211\1\0\2\211\1\0\1\211\2\0"+
    "\1\215\5\0\2\211\1\0\1\211\1\0\1\211\1\0"+
    "\2\211\2\0\1\211\1\0\1\211\1\0\1\211\1\0"+
    "\1\211\1\0\1\211\2\0\1\211\3\0\1\211\1\0"+
    "\1\211\1\0\1\211\34\170\2\216\13\170\1\0\1\174"+
    "\46\170\2\217\7\170\1\0\1\174\46\170\2\220\7\170"+
    "\1\0\1\174\6\170\32\0\1\221\26\0\30\170\2\222"+
    "\17\170\1\0\1\174\46\170\2\223\7\170\1\0\1\174"+
    "\16\170\1\224\7\170\1\224\2\170\1\224\25\170\1\0"+
    "\1\174\6\170\32\0\1\221\17\0\1\225\6\0\44\170"+
    "\2\226\3\170\1\0\1\174\34\170\2\227\21\170\1\0"+
    "\1\174\22\170\1\230\34\170\1\0\1\174\6\170\51\231"+
    "\1\0\7\231\14\170\1\232\34\170\1\0\1\174\44\170"+
    "\2\224\11\170\1\0\1\174\14\170\1\233\7\170\1\233"+
    "\32\170\1\0\1\174\6\170\51\231\1\234\7\231\6\170"+
    "\1\235\7\170\1\235\32\170\1\0\1\174\54\170\3\236"+
    "\1\0\1\174\6\170\33\0\1\237\25\0\46\170\3\240"+
    "\1\0\1\174\44\170\2\241\11\170\1\0\1\174\6\170"+
    "\36\0\2\242\21\0\36\170\2\243\11\170\1\0\1\174"+
    "\57\170\1\136\1\174\6\170\46\0\3\244\10\0\51\170"+
    "\1\245\1\174\6\170\6\0\1\246\7\0\1\246\43\0"+
    "\4\245\5\0\1\247\2\245\35\0\1\250\60\0\1\251"+
    "\7\0\4\245\4\0\1\252\1\247\2\245\4\0\1\252"+
    "\30\0\1\250\14\0\1\253\7\0\1\253\52\0\1\254"+
    "\7\0\1\254\2\0\1\254\103\0\3\255\17\0\1\256"+
    "\7\0\1\256\77\0\2\257\27\0\1\260\7\0\1\260"+
    "\75\0\1\261\32\0\1\245\124\0\1\262\7\0\51\263"+
    "\1\0\60\263\1\0\1\264\40\263\1\265\16\263\1\0"+
    "\1\264\22\263\1\266\15\263\1\265\16\263\1\0\1\264"+
    "\11\263\2\266\1\263\2\266\1\263\1\266\2\263\1\267"+
    "\5\263\2\266\1\263\1\266\1\263\1\266\1\263\2\266"+
    "\2\263\1\266\1\263\1\266\1\263\1\266\1\263\1\266"+
    "\1\263\1\266\2\263\1\266\1\0\1\264\1\263\1\266"+
    "\1\263\1\266\1\263\1\266\24\263\2\270\14\263\2\271"+
    "\5\263\1\0\1\264\4\263\2\272\34\263\2\273\13\263"+
    "\1\0\1\264\34\263\2\274\21\263\1\0\1\264\17\263"+
    "\1\275\7\263\1\275\27\263\1\0\1\264\42\263\2\276"+
    "\13\263\1\0\1\264\46\263\2\277\7\263\1\0\1\264"+
    "\46\263\2\300\7\263\1\0\1\264\36\263\2\301\17\263"+
    "\1\0\1\264\46\263\2\302\7\263\1\0\1\264\16\263"+
    "\1\303\7\263\1\303\2\263\1\303\25\263\1\0\1\264"+
    "\52\263\2\303\3\263\1\0\1\264\34\263\2\304\21\263"+
    "\1\0\1\264\22\263\1\305\34\263\1\0\1\264\44\263"+
    "\2\306\11\263\1\0\1\264\14\263\1\307\7\263\1\307"+
    "\32\263\1\0\1\264\22\263\1\310\34\263\1\0\1\264"+
    "\54\263\3\311\1\0\1\264\14\263\1\312\7\263\1\312"+
    "\32\263\1\0\1\264\44\263\2\313\11\263\1\0\1\264"+
    "\54\263\3\314\1\0\1\264\57\263\1\245\1\264\44\263"+
    "\2\315\11\263\1\0\1\264\57\263\1\136\1\264\6\263";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9702];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\1\1\11\1\1\1\11\1\1\1\11\7\0"+
    "\1\1\17\0\1\11\23\0\1\11\154\0\1\1\1\0"+
    "\1\1\1\0\1\11\44\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.1"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public ArticleNumbers() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
		//annotationEntity.setValue("value");
	} 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ArticleNumbers(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 378) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            }
          case 7: break;
          case 2: 
            { addText(yytext());
		position++;
            }
          case 8: break;
          case 3: 
            { System.out.print(yytext());
            }
          case 9: break;
          case 4: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            }
          case 10: break;
          case 5: 
            { addText(yytext()); 
	yybegin(lkn);
            }
          case 11: break;
          case 6: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { addText(yytext().substring(0,1));
	
	AnnotationEntity article = new Article();
	article.setText(yytext().substring(1));
	article.setPosition(position+1);
	article.setValue(Util.readFirstNumber(yytext()));
	
	addEntity(article);
	
	position += yylength();
            }
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ArticleNumbers [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        ArticleNumbers scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new ArticleNumbers(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
