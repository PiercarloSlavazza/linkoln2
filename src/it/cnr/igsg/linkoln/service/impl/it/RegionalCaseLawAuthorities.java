/* The following code was generated by JFlex 1.7.0 */

package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/RegionalCaseLawAuthorities.jflex</tt>
 */
public class RegionalCaseLawAuthorities extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int regionalState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\0\1\13\1\1\22\0\1\13\5\0\1\5"+
    "\1\0\1\14\1\14\2\0\1\14\1\3\1\53\1\54\1\52\1\52"+
    "\1\52\1\52\1\52\1\52\1\52\1\52\1\52\1\52\1\15\1\12"+
    "\5\0\1\26\1\7\1\40\1\62\1\36\1\23\1\30\1\73\1\47"+
    "\1\23\1\65\1\60\1\56\1\6\1\51\1\11\1\23\1\32\1\24"+
    "\1\44\1\42\1\34\1\75\1\23\1\71\1\23\1\66\1\0\1\67"+
    "\1\0\1\4\1\0\1\25\1\20\1\37\1\61\1\35\1\16\1\27"+
    "\1\72\1\46\1\16\1\64\1\57\1\55\1\17\1\50\1\22\1\16"+
    "\1\31\1\21\1\43\1\41\1\33\1\74\1\16\1\70\1\16\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\16\1\16\4\16\1\0\1\16\1\16\1\16\2\16\1\16\1\16"+
    "\2\16\1\0\1\16\1\16\1\16\3\16\2\0\1\16\1\16\2\16"+
    "\3\0\1\16\1\16\4\16\1\0\1\16\1\16\1\16\2\16\1\16"+
    "\1\16\2\16\1\0\1\16\1\16\1\16\3\16\2\0\1\16\1\16"+
    "\2\16\53\0\1\16\1\16\6\0\2\45\66\0\1\16\1\16\4\0"+
    "\1\16\1\16\17\0\1\10\u1c88\0\1\16\1\16\216\0\2\16\42\0"+
    "\1\16\1\16\u0144\0\1\13\20\0\1\3\1\3\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\2\2\3\3\23\0\1\4\17\0\1\4"+
    "\1\0\1\5\3\0\4\6\1\0\2\6\4\0\1\7"+
    "\2\0\1\4\5\0\1\5\20\0\3\10\1\0\1\10"+
    "\22\0\1\6\17\0\1\5\32\0\1\5\20\0\4\10"+
    "\1\0\2\10\33\0\1\11\150\0\1\12\31\0\1\13"+
    "\22\0\1\14\4\0\1\14\34\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u0136"+
    "\0\u01b2\0\u0136\0\u01f0\0\u022e\0\u026c\0\272\0\u02aa\0\u02e8"+
    "\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8"+
    "\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0136"+
    "\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0136\0\u0bde\0\u0c1c"+
    "\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c"+
    "\0\u0136\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe"+
    "\0\u0ffc\0\u0f42\0\u103a\0\u1078\0\u10b6\0\u0c1c\0\u0c5a\0\u0d14"+
    "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6"+
    "\0\u12e4\0\u1322\0\u0136\0\u1360\0\u139e\0\u139e\0\u13dc\0\u141a"+
    "\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a"+
    "\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u1838\0\u1876\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c"+
    "\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c"+
    "\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c"+
    "\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u0136\0\u22a2\0\u22e0\0\u231e"+
    "\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e"+
    "\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u122a\0\u1930"+
    "\0\u26c0\0\u26c0\0\u26fe\0\u1322\0\u273c\0\u277a\0\u27b8\0\u27f6"+
    "\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6"+
    "\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u0cd6\0\u2b5a\0\u2b98"+
    "\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u0136"+
    "\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a"+
    "\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a"+
    "\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u13dc\0\u32dc"+
    "\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc"+
    "\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc"+
    "\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac"+
    "\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c"+
    "\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c"+
    "\0\u3cca\0\u3d08\0\u3d46\0\u26fe\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e"+
    "\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u402e"+
    "\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u421e"+
    "\0\u425c\0\u429a\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e"+
    "\0\u444c\0\u448a\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe"+
    "\0\u0136\0\u463c\0\u467a\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0"+
    "\0\u47ee\0\u482c\0\u486a\0\u48a8\0\u48e6\0\u4924\0\u4962\0\u49a0"+
    "\0\u49de\0\u4a1c\0\u4a5a\0\u4a98\0\u4ad6\0\u4b14\0\u4b52\0\u4b90"+
    "\0\u4bce\0\u4c0c\0\u0136\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04\0\u4d42"+
    "\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78\0\u4eb6\0\u4ef4\0\u4f32"+
    "\0\u4f70\0\u4fae\0\u4fec\0\u502a\0\u5068\0\u0136\0\u50a6\0\u50e4"+
    "\0\u5122\0\u5160\0\u519e\0\u51dc\0\u519e\0\u521a\0\u5258\0\u5296"+
    "\0\u52d4\0\u5312\0\u5350\0\u538e\0\u53cc\0\u540a\0\u5448\0\u5486"+
    "\0\u54c4\0\u5502\0\u5540\0\u557e\0\u55bc\0\u55fa\0\u5638\0\u5676"+
    "\0\u56b4\0\u56f2\0\u5730\0\u576e\0\u57ac\0\u57ea\0\u5828";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\4\4\2\6\1\4\1\6\4\4\27\6"+
    "\1\4\5\6\2\4\6\6\1\4\2\6\1\7\1\4"+
    "\6\6\66\10\1\11\7\10\43\12\2\13\21\12\1\14"+
    "\7\12\43\0\2\15\33\0\1\16\40\0\2\15\172\0"+
    "\2\15\12\0\2\17\71\0\1\20\22\0\2\21\2\0"+
    "\1\22\5\0\1\21\11\0\2\23\2\0\2\24\20\0"+
    "\1\21\101\0\2\25\16\0\2\26\2\0\1\27\5\0"+
    "\1\26\11\0\2\30\2\0\2\31\15\0\2\32\1\0"+
    "\1\26\105\0\3\33\67\0\2\34\16\0\2\21\2\0"+
    "\1\22\5\0\1\21\11\0\2\23\55\0\1\35\10\0"+
    "\1\35\57\0\2\36\2\0\1\37\5\0\1\36\15\0"+
    "\2\40\20\0\1\36\1\0\2\41\64\0\3\42\111\0"+
    "\3\43\11\0\2\26\2\0\1\27\5\0\1\26\11\0"+
    "\2\30\21\0\2\32\32\0\1\44\10\0\1\44\57\0"+
    "\2\45\2\0\1\46\5\0\1\45\15\0\2\47\20\0"+
    "\1\45\1\0\2\50\64\0\3\51\57\0\2\52\51\0"+
    "\1\53\10\0\1\53\141\0\3\54\17\0\1\55\10\0"+
    "\1\55\56\0\2\36\2\0\1\37\5\0\1\36\15\0"+
    "\2\40\51\0\1\56\10\0\1\56\113\0\2\57\14\0"+
    "\1\60\77\0\2\61\26\0\1\62\10\0\1\62\63\0"+
    "\1\63\10\0\1\63\65\0\1\64\10\0\1\64\56\0"+
    "\2\45\2\0\1\46\5\0\1\45\15\0\2\47\51\0"+
    "\1\65\10\0\1\65\56\0\1\66\1\67\3\70\1\71"+
    "\2\0\1\66\1\0\4\70\17\0\2\72\6\0\1\66"+
    "\5\0\1\73\1\66\6\0\1\66\2\0\1\74\1\66"+
    "\63\0\2\75\26\0\1\76\10\0\1\76\136\0\2\77"+
    "\30\0\1\100\66\0\1\101\10\0\1\101\66\0\1\102"+
    "\10\0\1\102\2\0\1\102\60\0\1\103\10\0\1\103"+
    "\104\0\2\104\46\0\2\36\2\0\1\37\5\0\1\36"+
    "\15\0\2\40\12\0\3\105\3\0\1\36\23\0\2\106"+
    "\2\0\1\107\5\0\1\106\11\0\2\23\12\0\2\110"+
    "\5\0\2\111\1\0\1\112\37\0\1\113\70\0\1\114"+
    "\10\0\1\114\2\0\1\114\60\0\1\115\10\0\1\115"+
    "\56\0\1\116\1\70\2\116\1\117\4\0\4\116\50\0"+
    "\1\120\10\0\4\116\1\117\4\0\4\116\50\0\1\120"+
    "\15\0\1\121\10\0\1\121\105\0\2\122\45\0\1\66"+
    "\1\67\3\70\1\71\2\0\1\66\1\0\4\70\27\0"+
    "\1\66\5\0\2\66\6\0\1\66\2\0\1\74\1\66"+
    "\65\0\2\123\16\0\2\45\2\0\1\46\5\0\1\45"+
    "\15\0\2\47\12\0\3\124\3\0\1\45\23\0\2\125"+
    "\2\126\1\127\4\0\1\126\1\125\2\126\7\0\2\30"+
    "\12\0\2\130\5\0\2\131\1\0\1\125\12\0\1\132"+
    "\7\0\1\133\1\134\4\133\2\0\1\133\1\0\4\133"+
    "\27\0\1\135\2\136\3\0\1\137\1\133\6\0\1\133"+
    "\2\0\2\133\12\0\1\140\1\0\2\140\1\0\1\140"+
    "\11\0\2\140\1\0\1\140\1\0\1\140\1\0\1\140"+
    "\1\0\1\140\1\0\1\140\1\0\1\140\1\0\1\140"+
    "\1\0\1\140\2\0\1\140\1\0\1\140\4\0\1\140"+
    "\1\0\1\140\1\0\1\140\2\0\1\140\3\0\1\140"+
    "\1\0\1\140\1\0\1\140\11\0\1\141\10\0\1\141"+
    "\63\0\1\142\10\0\1\142\2\0\1\142\116\0\3\143"+
    "\3\0\1\60\30\0\1\144\10\0\1\144\57\0\2\106"+
    "\2\0\1\107\5\0\1\106\11\0\2\23\21\0\2\111"+
    "\32\0\1\145\10\0\1\145\64\0\1\146\10\0\1\146"+
    "\107\0\2\147\47\0\1\150\1\0\2\150\1\0\1\150"+
    "\11\0\2\150\1\0\1\150\1\0\1\150\1\151\1\152"+
    "\1\0\1\150\1\0\1\150\1\153\1\154\1\0\1\150"+
    "\1\0\1\150\2\0\1\150\1\0\1\150\3\0\1\155"+
    "\1\156\1\0\1\150\1\0\1\150\2\0\1\150\3\0"+
    "\1\150\1\0\1\150\1\0\1\150\11\0\1\157\10\0"+
    "\1\157\63\0\1\160\10\0\1\160\2\0\1\160\60\0"+
    "\1\161\10\0\1\161\55\0\1\66\1\67\3\70\1\71"+
    "\2\0\1\66\1\0\4\70\27\0\1\162\2\163\3\0"+
    "\1\73\1\66\6\0\1\66\2\0\1\74\1\66\71\0"+
    "\3\164\16\0\1\165\10\0\1\165\57\0\2\125\2\126"+
    "\1\127\4\0\1\126\1\125\2\126\7\0\2\30\21\0"+
    "\2\131\14\0\1\132\10\0\4\126\1\166\4\0\4\126"+
    "\50\0\1\132\15\0\1\167\10\0\1\167\64\0\1\170"+
    "\10\0\1\170\107\0\2\171\122\0\2\172\17\0\1\133"+
    "\101\0\1\173\10\0\1\173\56\0\1\133\1\134\4\133"+
    "\2\0\1\133\1\0\4\133\27\0\1\133\5\0\2\133"+
    "\6\0\1\133\2\0\2\133\12\0\1\140\1\0\2\140"+
    "\1\0\1\140\3\0\1\174\5\0\2\140\1\0\1\140"+
    "\1\0\1\140\1\0\1\140\1\0\1\140\1\0\1\140"+
    "\1\0\1\140\1\0\1\140\1\0\1\140\2\0\1\140"+
    "\1\0\1\140\4\0\1\140\1\0\1\140\1\0\1\140"+
    "\2\0\1\140\3\0\1\140\1\0\1\140\1\0\1\140"+
    "\12\0\1\21\74\0\1\175\10\0\1\175\123\0\2\176"+
    "\25\0\2\36\2\0\1\37\5\0\1\36\15\0\2\40"+
    "\12\0\3\177\3\0\1\36\31\0\1\200\10\0\1\200"+
    "\102\0\2\201\130\0\2\202\17\0\1\150\1\0\2\150"+
    "\1\0\1\150\3\0\1\203\5\0\2\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\2\0\1\150"+
    "\1\0\1\150\4\0\1\150\1\0\1\150\1\0\1\150"+
    "\2\0\1\150\3\0\1\150\1\0\1\150\1\0\1\150"+
    "\35\0\2\204\43\0\1\150\1\0\2\150\1\0\1\150"+
    "\3\0\1\203\5\0\2\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\204\1\205\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\2\0\1\150\1\0\1\150"+
    "\4\0\1\150\1\0\1\150\1\0\1\150\2\0\1\150"+
    "\3\0\1\150\1\0\1\150\1\0\1\150\45\0\3\206"+
    "\7\0\2\207\21\0\1\150\1\0\2\150\1\0\1\150"+
    "\3\0\1\203\5\0\2\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\2\206\1\210\1\0\1\150"+
    "\4\0\1\150\1\207\1\211\1\0\1\150\2\0\1\150"+
    "\3\0\1\150\1\0\1\150\1\0\1\150\41\0\2\212"+
    "\37\0\1\150\1\0\2\150\1\0\1\150\3\0\1\203"+
    "\5\0\2\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\212\1\213"+
    "\1\0\1\150\2\0\1\150\1\0\1\150\4\0\1\150"+
    "\1\0\1\150\1\0\1\150\2\0\1\150\3\0\1\150"+
    "\1\0\1\150\1\0\1\150\12\0\1\26\74\0\1\214"+
    "\10\0\1\214\63\0\1\215\10\0\1\215\2\0\1\215"+
    "\121\0\2\216\32\0\1\217\10\0\1\217\57\0\2\45"+
    "\2\0\1\46\5\0\1\45\15\0\2\47\12\0\3\220"+
    "\3\0\1\45\30\0\1\221\10\0\1\221\65\0\1\222"+
    "\10\0\1\222\102\0\2\223\130\0\2\224\76\0\3\225"+
    "\35\0\2\226\52\0\2\174\1\0\2\174\1\0\1\174"+
    "\3\0\1\227\5\0\2\174\1\0\1\174\1\0\1\174"+
    "\1\0\1\174\1\0\1\174\1\0\1\174\1\0\1\174"+
    "\1\0\1\174\1\0\1\174\2\0\1\174\1\0\2\174"+
    "\3\0\1\174\1\0\1\174\1\0\1\174\2\0\1\174"+
    "\3\0\1\174\1\0\1\174\1\0\1\174\12\0\1\36"+
    "\71\0\1\230\10\0\1\230\66\0\1\231\10\0\1\231"+
    "\2\0\1\231\61\0\1\232\10\0\1\232\2\0\1\232"+
    "\130\0\2\233\62\0\3\234\3\0\1\235\25\0\2\203"+
    "\1\0\2\203\1\0\1\203\3\0\1\236\5\0\2\203"+
    "\1\0\1\203\1\0\1\203\1\0\1\203\1\0\1\203"+
    "\1\0\1\203\1\0\1\203\1\0\1\203\1\0\1\203"+
    "\2\0\1\203\1\0\2\203\3\0\1\203\1\0\1\203"+
    "\1\0\1\203\2\0\1\203\3\0\1\203\1\0\1\203"+
    "\1\0\1\203\27\0\2\237\51\0\1\150\1\0\2\150"+
    "\1\0\1\150\3\0\1\203\5\0\2\150\1\0\1\150"+
    "\1\237\1\240\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\2\0\1\150"+
    "\1\0\1\150\4\0\1\150\1\0\1\150\1\0\1\150"+
    "\2\0\1\150\3\0\1\150\1\0\1\150\1\0\1\150"+
    "\43\0\2\241\35\0\1\242\75\0\1\150\1\0\2\150"+
    "\1\0\1\150\3\0\1\203\5\0\2\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\241\1\243\2\0\1\150"+
    "\1\0\1\150\4\0\1\150\1\0\1\150\1\0\1\150"+
    "\2\0\1\150\3\0\1\150\1\0\1\150\1\0\1\150"+
    "\4\0\1\244\1\0\2\150\1\0\1\150\3\0\1\203"+
    "\5\0\2\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\2\0\1\150\1\0\1\150\4\0\1\150"+
    "\1\0\1\150\1\0\1\150\2\0\1\150\3\0\1\150"+
    "\1\0\1\150\1\0\1\150\6\0\1\245\10\0\1\245"+
    "\62\0\1\150\1\0\1\246\1\150\1\0\1\150\3\0"+
    "\1\203\1\0\1\245\3\0\2\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\2\0\1\150\1\0"+
    "\1\150\4\0\1\150\1\0\1\150\1\0\1\150\2\0"+
    "\1\150\3\0\1\150\1\0\1\150\1\0\1\150\12\0"+
    "\1\45\74\0\1\247\10\0\1\247\61\0\1\250\10\0"+
    "\1\250\73\0\1\251\70\0\1\252\10\0\1\252\2\0"+
    "\1\252\60\0\1\253\10\0\1\253\65\0\1\254\10\0"+
    "\1\254\2\0\1\254\130\0\2\255\15\0\1\133\1\256"+
    "\3\257\1\260\2\0\1\133\1\0\4\257\27\0\1\261"+
    "\2\262\3\0\1\263\1\133\6\0\1\133\2\0\1\264"+
    "\1\133\14\0\1\265\10\0\1\265\107\0\2\266\115\0"+
    "\1\267\50\0\2\270\6\0\2\60\102\0\2\271\42\0"+
    "\1\272\10\0\1\272\110\0\2\112\45\0\1\273\10\0"+
    "\1\273\130\0\1\274\70\0\3\275\32\0\1\150\1\0"+
    "\2\150\1\0\1\150\3\0\1\203\5\0\2\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\2\275"+
    "\1\276\1\0\1\150\4\0\1\150\1\0\1\150\1\0"+
    "\1\150\2\0\1\150\3\0\1\150\1\0\1\150\1\0"+
    "\1\150\70\0\2\277\65\0\2\300\17\0\1\150\1\0"+
    "\2\150\1\0\1\150\3\0\1\203\5\0\2\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\2\0"+
    "\1\150\1\0\1\150\4\0\1\150\1\0\1\150\1\0"+
    "\1\150\2\0\1\150\2\0\1\277\1\301\1\0\1\150"+
    "\1\0\1\150\4\0\1\150\1\0\2\150\1\0\1\150"+
    "\3\0\1\203\5\0\2\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\2\0\1\150\1\0\1\150"+
    "\4\0\1\150\1\0\1\150\1\300\1\302\2\0\1\150"+
    "\3\0\1\150\1\0\1\150\1\0\1\150\45\0\3\303"+
    "\32\0\1\150\1\0\2\150\1\0\1\150\3\0\1\203"+
    "\5\0\2\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\2\303\1\304\1\0\1\150\4\0\1\150"+
    "\1\0\1\150\1\0\1\150\2\0\1\150\3\0\1\150"+
    "\1\0\1\150\1\0\1\150\12\0\1\116\110\0\2\305"+
    "\6\0\2\306\47\0\1\307\10\0\1\307\2\0\1\307"+
    "\4\0\2\310\4\0\2\311\100\0\2\312\41\0\1\313"+
    "\10\0\1\313\2\0\1\313\62\0\1\314\10\0\1\314"+
    "\110\0\2\125\40\0\1\126\1\257\2\126\1\166\4\0"+
    "\4\126\50\0\1\132\15\0\1\315\10\0\1\315\56\0"+
    "\1\133\1\256\3\257\1\260\2\0\1\133\1\0\4\257"+
    "\27\0\1\133\5\0\2\133\6\0\1\133\2\0\1\264"+
    "\1\133\23\0\1\316\125\0\3\317\100\0\1\267\14\0"+
    "\1\320\65\0\2\321\46\0\2\322\55\0\1\106\110\0"+
    "\2\323\121\0\1\274\14\0\1\324\56\0\2\325\30\0"+
    "\1\150\1\0\2\150\1\0\1\150\3\0\1\203\5\0"+
    "\2\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\2\0\1\150\1\325\1\326\4\0\1\150\1\0"+
    "\1\150\1\0\1\150\2\0\1\150\3\0\1\150\1\0"+
    "\1\150\1\0\1\150\15\0\1\327\115\0\2\330\43\0"+
    "\1\150\1\0\2\150\1\0\1\150\3\0\1\327\5\0"+
    "\2\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\2\0\1\150\1\0\1\150\4\0\1\150\1\0"+
    "\1\150\1\0\1\150\2\0\1\150\3\0\1\150\1\0"+
    "\1\150\1\0\1\150\4\0\1\150\1\0\2\150\1\0"+
    "\1\150\3\0\1\203\5\0\2\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\330\1\331\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\2\0\1\150\1\0"+
    "\1\150\4\0\1\150\1\0\1\150\1\0\1\150\2\0"+
    "\1\150\3\0\1\150\1\0\1\150\1\0\1\150\37\0"+
    "\2\332\41\0\1\150\1\0\2\150\1\0\1\150\3\0"+
    "\1\203\5\0\2\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\332\1\333\1\0"+
    "\1\150\1\0\1\150\2\0\1\150\1\0\1\150\4\0"+
    "\1\150\1\0\1\150\1\0\1\150\2\0\1\150\3\0"+
    "\1\150\1\0\1\150\1\0\1\150\57\0\2\334\60\0"+
    "\2\335\66\0\2\336\104\0\3\337\7\0\2\340\46\0"+
    "\2\341\54\0\1\342\10\0\1\342\65\0\1\125\110\0"+
    "\2\343\57\0\1\344\10\0\1\344\2\0\1\344\12\0"+
    "\2\345\14\0\2\346\67\0\2\347\61\0\2\60\64\0"+
    "\2\350\100\0\2\351\43\0\66\352\1\0\7\352\6\0"+
    "\1\277\10\0\1\277\62\0\1\150\1\0\1\301\1\150"+
    "\1\0\1\150\3\0\1\203\1\0\1\277\3\0\2\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\2\0\1\150\1\0\1\150\4\0\1\150\1\0\1\150"+
    "\1\0\1\150\2\0\1\150\3\0\1\150\1\0\1\150"+
    "\1\0\1\150\3\0\2\327\1\0\2\327\1\0\1\327"+
    "\3\0\1\353\5\0\2\327\1\0\1\327\1\0\1\327"+
    "\1\0\1\327\1\0\1\327\1\0\1\327\1\0\1\327"+
    "\1\0\1\327\1\0\1\327\2\0\1\327\1\0\2\327"+
    "\3\0\1\327\1\0\1\327\1\0\1\327\2\0\1\327"+
    "\3\0\1\327\1\0\1\327\1\0\1\327\43\0\2\354"+
    "\35\0\1\150\1\0\2\150\1\0\1\150\3\0\1\203"+
    "\5\0\2\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\354\1\355\2\0\1\150\1\0\1\150\4\0\1\150"+
    "\1\0\1\150\1\0\1\150\2\0\1\150\3\0\1\150"+
    "\1\0\1\150\1\0\1\150\45\0\3\356\32\0\1\150"+
    "\1\0\2\150\1\0\1\150\3\0\1\203\5\0\2\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\2\356\1\357\1\0\1\150\4\0\1\150\1\0\1\150"+
    "\1\0\1\150\2\0\1\150\3\0\1\150\1\0\1\150"+
    "\1\0\1\150\35\0\2\306\50\0\1\360\10\0\1\360"+
    "\102\0\2\361\110\0\2\362\35\0\1\363\116\0\2\364"+
    "\61\0\1\126\114\0\2\365\106\0\2\366\76\0\3\337"+
    "\67\0\2\367\76\0\2\370\76\0\3\371\26\0\66\352"+
    "\1\372\7\352\52\0\1\373\50\0\2\374\53\0\1\150"+
    "\1\0\2\150\1\0\1\150\3\0\1\203\5\0\2\150"+
    "\1\374\1\375\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\2\0\1\150\1\0\1\150\4\0\1\150\1\0\1\150"+
    "\1\0\1\150\2\0\1\150\3\0\1\150\1\0\1\150"+
    "\1\0\1\150\11\0\1\376\10\0\1\376\57\0\1\150"+
    "\1\0\2\150\1\0\1\377\3\0\1\203\4\0\1\376"+
    "\2\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\2\0\1\150\1\0\1\150\4\0\1\150\1\0"+
    "\1\150\1\0\1\150\2\0\1\150\3\0\1\150\1\0"+
    "\1\150\1\0\1\150\74\0\2\u0100\45\0\3\u0101\116\0"+
    "\2\u0102\65\0\2\u0103\56\0\2\u0104\76\0\3\u0105\37\0"+
    "\1\u0106\10\0\1\u0106\61\0\1\u0107\10\0\1\u0107\123\0"+
    "\3\u0108\76\0\2\235\100\0\1\u0109\73\0\1\373\14\0"+
    "\1\u010a\45\0\2\u010b\41\0\1\150\1\0\2\150\1\0"+
    "\1\150\3\0\1\203\5\0\2\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\u010b"+
    "\1\u010c\1\0\1\150\1\0\1\150\2\0\1\150\1\0"+
    "\1\150\4\0\1\150\1\0\1\150\1\0\1\150\2\0"+
    "\1\150\3\0\1\150\1\0\1\150\1\0\1\150\25\0"+
    "\2\u010d\53\0\1\150\1\0\2\150\1\0\1\150\3\0"+
    "\1\203\5\0\2\150\1\u010d\1\u010e\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\2\0\1\150\1\0\1\150\4\0"+
    "\1\150\1\0\1\150\1\0\1\150\2\0\1\150\3\0"+
    "\1\150\1\0\1\150\1\0\1\150\15\0\1\u010f\130\0"+
    "\2\u0110\41\0\1\u0111\115\0\2\u0112\104\0\3\u0113\76\0"+
    "\2\u0114\120\0\2\u0115\45\0\3\u0116\61\0\2\u0117\120\0"+
    "\2\u0118\15\0\66\u0119\1\0\7\u0119\72\0\2\u011a\6\0"+
    "\1\150\1\0\2\150\1\0\1\150\3\0\1\203\5\0"+
    "\2\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\2\0\1\150\1\0\1\150\4\0\1\150\1\0"+
    "\1\150\1\0\1\150\2\0\1\150\3\0\1\150\1\u011a"+
    "\1\u011b\1\0\1\150\57\0\2\u011c\21\0\1\150\1\0"+
    "\2\150\1\0\1\150\3\0\1\203\5\0\2\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\2\0"+
    "\1\150\1\0\1\150\4\0\1\150\1\u011c\1\u011d\1\0"+
    "\1\150\2\0\1\150\3\0\1\150\1\0\1\150\1\0"+
    "\1\150\3\0\2\u010f\1\0\2\u010f\1\0\1\u010f\3\0"+
    "\1\u011e\5\0\2\u010f\1\0\1\u010f\1\0\1\u010f\1\0"+
    "\1\u010f\1\0\1\u010f\1\0\1\u010f\1\0\1\u010f\1\0"+
    "\1\u010f\1\0\1\u010f\2\0\1\u010f\1\0\2\u010f\3\0"+
    "\1\u010f\1\0\1\u010f\1\0\1\u010f\2\0\1\u010f\3\0"+
    "\1\u010f\1\0\1\u010f\1\0\1\u010f\6\0\1\u011f\10\0"+
    "\1\u011f\61\0\2\u0111\1\0\2\u0111\1\0\1\u0111\3\0"+
    "\1\u0120\5\0\2\u0111\1\0\1\u0111\1\0\1\u0111\1\0"+
    "\1\u0111\1\0\1\u0111\1\0\1\u0111\1\0\1\u0111\1\0"+
    "\1\u0111\1\0\1\u0111\2\0\1\u0111\1\0\2\u0111\3\0"+
    "\1\u0111\1\0\1\u0111\1\0\1\u0111\2\0\1\u0111\3\0"+
    "\1\u0111\1\0\1\u0111\1\0\1\u0111\43\0\2\u0121\64\0"+
    "\2\u0122\56\0\1\u0123\117\0\2\u0124\105\0\2\36\107\0"+
    "\3\u0125\10\0\66\u0119\1\u0126\7\u0119\35\0\2\u0127\43\0"+
    "\1\150\1\0\2\150\1\0\1\150\3\0\1\203\5\0"+
    "\2\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\u0127\1\u0128\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\2\0\1\150\1\0\1\150\4\0\1\150\1\0"+
    "\1\150\1\0\1\150\2\0\1\150\3\0\1\150\1\0"+
    "\1\150\1\0\1\150\45\0\3\206\32\0\1\150\1\0"+
    "\2\150\1\0\1\150\3\0\1\203\5\0\2\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\2\206"+
    "\1\210\1\0\1\150\4\0\1\150\1\0\1\150\1\0"+
    "\1\150\2\0\1\150\3\0\1\150\1\0\1\150\1\0"+
    "\1\150\52\0\1\u0129\40\0\1\u012a\132\0\1\u012b\50\0"+
    "\2\u012c\117\0\2\45\27\0\2\u0123\1\0\2\u0123\1\0"+
    "\1\u0123\3\0\1\u012d\5\0\2\u0123\1\0\1\u0123\1\0"+
    "\1\u0123\1\0\1\u0123\1\0\1\u0123\1\0\1\u0123\1\0"+
    "\1\u0123\1\0\1\u0123\1\0\1\u0123\2\0\1\u0123\1\0"+
    "\2\u0123\3\0\1\u0123\1\0\1\u0123\1\0\1\u0123\2\0"+
    "\1\u0123\3\0\1\u0123\1\0\1\u0123\1\0\1\u0123\45\0"+
    "\3\u012e\34\0\1\u012f\10\0\1\u012f\132\0\1\u0130\102\0"+
    "\2\u0131\17\0\1\150\1\0\2\150\1\0\1\150\3\0"+
    "\1\203\5\0\2\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\2\0\1\150\1\0\1\150\4\0"+
    "\1\150\1\0\1\150\1\u0131\1\u0132\2\0\1\150\3\0"+
    "\1\150\1\0\1\150\1\0\1\150\52\0\1\u0129\14\0"+
    "\1\u0133\11\0\2\u012a\1\0\2\u012a\1\0\1\u012a\3\0"+
    "\1\u0134\5\0\2\u012a\1\0\1\u012a\1\0\1\u012a\1\0"+
    "\1\u012a\1\0\1\u012a\1\0\1\u012a\1\0\1\u012a\1\0"+
    "\1\u012a\1\0\1\u012a\2\0\1\u012a\1\0\2\u012a\3\0"+
    "\1\u012a\1\0\1\u012a\1\0\1\u012a\2\0\1\u012a\3\0"+
    "\1\u012a\1\0\1\u012a\1\0\1\u012a\52\0\1\u012b\14\0"+
    "\1\u0135\45\0\2\u0136\107\0\1\u0137\34\0\1\u0138\10\0"+
    "\1\u0138\142\0\1\u0139\65\0\2\u013a\21\0\1\u013b\75\0"+
    "\1\u013c\1\0\2\150\1\0\1\150\3\0\1\203\5\0"+
    "\2\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\2\0\1\150\1\0\1\150\4\0\1\150\1\0"+
    "\1\150\1\0\1\150\2\0\1\150\3\0\1\150\1\0"+
    "\1\150\1\0\1\150\66\u013d\1\0\7\u013d\52\0\1\u013e"+
    "\23\0\66\u013f\1\0\7\u013f\72\0\2\u0140\54\0\1\u0137"+
    "\14\0\1\u0141\33\0\2\u0142\132\0\3\u0143\20\0\1\u0144"+
    "\10\0\1\u0144\2\0\1\u0144\55\0\1\150\1\0\2\150"+
    "\1\u0144\1\150\3\0\1\203\3\0\1\u0144\1\0\1\150"+
    "\1\u0145\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\1\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\2\0\1\150\1\0\1\150\4\0\1\150\1\0"+
    "\1\150\1\0\1\150\2\0\1\150\3\0\1\150\1\0"+
    "\1\150\1\0\1\150\66\u013d\1\u0146\7\u013d\52\0\1\u013e"+
    "\14\0\1\u0147\6\0\66\u013f\1\u0148\7\u013f\35\0\2\u0149"+
    "\37\0\66\u014a\1\0\7\u014a\57\0\2\345\23\0\1\u014b"+
    "\10\0\1\u014b\113\0\2\u014c\43\0\1\150\1\0\2\150"+
    "\1\0\1\150\3\0\1\203\5\0\2\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\u014c\1\u014d"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\2\0\1\150"+
    "\1\0\1\150\4\0\1\150\1\0\1\150\1\0\1\150"+
    "\2\0\1\150\3\0\1\150\1\0\1\150\1\0\1\150"+
    "\54\0\1\u014e\21\0\66\u014f\1\0\7\u014f\54\0\1\u0150"+
    "\102\0\2\u0151\13\0\66\u014a\1\u0152\7\u014a\67\0\1\u0153"+
    "\45\0\2\u0154\41\0\1\150\1\0\2\150\1\0\1\150"+
    "\3\0\1\203\5\0\2\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\u0154\1\u0155"+
    "\1\0\1\150\1\0\1\150\2\0\1\150\1\0\1\150"+
    "\4\0\1\150\1\0\1\150\1\0\1\150\2\0\1\150"+
    "\3\0\1\150\1\0\1\150\1\0\1\150\57\0\2\u0156"+
    "\15\0\66\u014f\1\u0157\7\u014f\57\0\2\u0158\21\0\1\u0159"+
    "\145\0\1\u015a\64\0\2\237\35\0\1\150\1\0\2\150"+
    "\1\0\1\150\3\0\1\203\5\0\2\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\0\1\150\1\0\1\150"+
    "\1\0\1\150\1\0\1\150\1\237\1\240\2\0\1\150"+
    "\1\0\1\150\4\0\1\150\1\0\1\150\1\0\1\150"+
    "\2\0\1\150\3\0\1\150\1\0\1\150\1\0\1\150"+
    "\63\0\3\u015b\64\0\1\u015c\104\0\3\u015d\20\0\1\u015e"+
    "\10\0\1\u015e\2\0\1\u015e\130\0\2\u015f\23\0\1\u0160"+
    "\10\0\1\u0160\135\0\2\u0161\23\0\1\u0162\10\0\1\u0162"+
    "\113\0\2\u0163\122\0\3\u0164\77\0\1\116\71\0\3\u0165"+
    "\77\0\1\u0166\45\0\2\u0167\43\0\1\u0168\10\0\1\u0168"+
    "\64\0\1\u0169\10\0\1\u0169\121\0\2\u016a\120\0\1\126"+
    "\75\0\1\u016b\53\0\3\u016c\27\0\4\u016d\1\u016e\4\0"+
    "\4\u016d\50\0\1\u016f\57\0\2\u0170\32\0\1\u0171\10\0"+
    "\1\u0171\135\0\2\u0172\23\0\1\u0102\10\0\1\u0102\65\0"+
    "\1\u0173\10\0\1\u0173\140\0\3\u0174\20\0\1\u0175\10\0"+
    "\1\u0175\2\0\1\u0175\57\0\1\u0176\10\0\1\u0176\67\0"+
    "\1\u0177\10\0\1\u0177\70\0\1\u0178\72\0\1\u016d\73\0"+
    "\1\u0179\10\0\1\u0179\2\0\1\u0179\12\0\2\u017a\100\0"+
    "\2\u017b\110\0\2\340\26\0\1\u017c\10\0\1\u017c\147\0"+
    "\2\u017d\15\0\1\u017e\63\0\2\u017e\1\0\2\u017e\1\0"+
    "\1\u017e\3\0\1\u017f\5\0\2\u017e\1\0\1\u017e\1\0"+
    "\1\u017e\1\0\1\u017e\1\0\1\u017e\1\0\1\u017e\1\0"+
    "\1\u017e\1\0\1\u017e\1\0\1\u017e\2\0\1\u017e\1\0"+
    "\2\u017e\3\0\1\u017e\1\0\1\u017e\1\0\1\u017e\2\0"+
    "\1\u017e\3\0\1\u017e\1\0\1\u017e\1\0\1\u017e\52\0"+
    "\1\u0180\75\0\1\u0180\14\0\1\u0181\6\0\66\u0182\1\0"+
    "\75\u0182\1\u0183\7\u0182\54\0\1\u0184\100\0\2\u0185\100\0"+
    "\3\u0186\16\0\1\u0187\10\0\1\u0187\145\0\1\u016d\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22630];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\1\11\1\1\1\11\1\1\1\11\2\1"+
    "\23\0\1\1\17\0\1\11\1\0\1\1\3\0\1\11"+
    "\3\1\1\0\2\1\4\0\1\11\2\0\1\1\5\0"+
    "\1\1\20\0\1\11\2\1\1\0\1\1\22\0\1\1"+
    "\17\0\1\1\32\0\1\11\20\0\4\1\1\0\2\1"+
    "\33\0\1\11\150\0\1\11\31\0\1\11\22\0\1\11"+
    "\4\0\1\1\34\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[391];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.7"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public RegionalCaseLawAuthorities() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RegionalCaseLawAuthorities(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 13: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 14: break;
          case 3: 
            { checkEnd();
            } 
            // fall through
          case 15: break;
          case 4: 
            { annotationEntity.setValue("IT_TAR");

		offset += yylength();
		position += yylength();
            } 
            // fall through
          case 16: break;
          case 5: 
            { annotationEntity.setValue("IT_TRB");

		offset += yylength();
		position += yylength();
            } 
            // fall through
          case 17: break;
          case 6: 
            { annotate(new CaseLawAuthority(), "IT_TAR", true, true);
            } 
            // fall through
          case 18: break;
          case 7: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 19: break;
          case 8: 
            { annotate(new CaseLawAuthority(), "IT_TRB", true, true);
            } 
            // fall through
          case 20: break;
          case 9: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 21: break;
          case 10: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 22: break;
          case 11: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		annotationEntity.addRelatedEntity(retrievedEntity);
		retrievedEntity.addRelatedEntity(annotationEntity);
		
		//Update the annotation value with the normalized location
		String geoValue = retrievedEntity.getValue();
		if(geoValue != null && geoValue.startsWith("IT_")) {
			annotationEntity.setValue(annotationEntity.getValue() + geoValue.substring(3));
		}
				
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 23: break;
          case 12: 
            { start(new CaseLawAuthority(), regionalState, true, false);
            } 
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java RegionalCaseLawAuthorities [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        RegionalCaseLawAuthorities scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new RegionalCaseLawAuthorities(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
