/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
/* The following code was generated by JFlex 1.7.0 */

package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/RegionalCaseLawAuthorities.jflex</tt>
 */
public class RegionalCaseLawAuthorities extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int regionalState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\0\1\13\1\1\22\0\1\13\5\0\1\5"+
    "\1\0\1\14\1\14\2\0\1\14\1\3\1\53\1\54\1\52\1\52"+
    "\1\52\1\52\1\52\1\52\1\52\1\52\1\52\1\52\1\15\1\12"+
    "\5\0\1\26\1\7\1\40\1\62\1\36\1\75\1\30\1\73\1\47"+
    "\1\23\1\65\1\60\1\56\1\6\1\51\1\11\1\23\1\32\1\24"+
    "\1\44\1\42\1\34\1\77\1\23\1\71\1\23\1\66\1\0\1\67"+
    "\1\0\1\4\1\0\1\25\1\20\1\37\1\61\1\35\1\74\1\27"+
    "\1\72\1\46\1\16\1\64\1\57\1\55\1\17\1\50\1\22\1\16"+
    "\1\31\1\21\1\43\1\41\1\33\1\76\1\16\1\70\1\16\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\16\1\16\4\16\1\0\1\16\1\16\1\16\2\16\1\16\1\16"+
    "\2\16\1\0\1\16\1\16\1\16\3\16\2\0\1\16\1\16\2\16"+
    "\3\0\1\16\1\16\4\16\1\0\1\16\1\16\1\16\2\16\1\16"+
    "\1\16\2\16\1\0\1\16\1\16\1\16\3\16\2\0\1\16\1\16"+
    "\2\16\53\0\1\16\1\16\6\0\2\45\66\0\1\16\1\16\4\0"+
    "\1\16\1\16\17\0\1\10\u1c88\0\1\16\1\16\216\0\2\16\42\0"+
    "\1\16\1\16\u0144\0\1\13\20\0\1\3\1\3\4\0\1\0\16\0"+
    "\1\0\1\0\u0100\0\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\2\2\3\3\31\0\1\4\23\0\1\4"+
    "\1\0\1\5\7\0\4\6\1\0\2\6\4\0\1\7"+
    "\2\0\1\4\5\0\1\5\25\0\3\10\1\0\1\10"+
    "\26\0\1\6\17\0\1\5\35\0\1\5\22\0\4\10"+
    "\1\0\2\10\35\0\1\11\157\0\1\12\34\0\1\13"+
    "\26\0\1\14\6\0\1\14\70\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[465];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u0140"+
    "\0\u01c0\0\u0140\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340"+
    "\0\300\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700"+
    "\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900"+
    "\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0140\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0"+
    "\0\u0f00\0\u0f40\0\u0f80\0\u0140\0\u0fc0\0\u1000\0\u1040\0\u1080"+
    "\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u0140\0\u1240"+
    "\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1340"+
    "\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600"+
    "\0\u1000\0\u1040\0\u1100\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u0140\0\u18c0\0\u1900"+
    "\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0"+
    "\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0"+
    "\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0"+
    "\0\u1f00\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280"+
    "\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480"+
    "\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680"+
    "\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880"+
    "\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u0140\0\u2a40"+
    "\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40"+
    "\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40"+
    "\0\u2e80\0\u2ec0\0\u1780\0\u1fc0\0\u2f00\0\u2f00\0\u2f40\0\u1880"+
    "\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140"+
    "\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340"+
    "\0\u3380\0\u33c0\0\u3400\0\u10c0\0\u3440\0\u3480\0\u34c0\0\u3500"+
    "\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640\0\u0140\0\u3680\0\u36c0"+
    "\0\u3700\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0"+
    "\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0"+
    "\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u1940\0\u3c40\0\u3c80"+
    "\0\u3cc0\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\u3e80"+
    "\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\u4080"+
    "\0\u40c0\0\u4100\0\u4140\0\u4180\0\u41c0\0\u4200\0\u4240\0\u4280"+
    "\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400\0\u4440\0\u4480"+
    "\0\u44c0\0\u4500\0\u4540\0\u4580\0\u45c0\0\u4600\0\u4640\0\u4680"+
    "\0\u46c0\0\u4700\0\u4740\0\u4780\0\u47c0\0\u2f40\0\u4800\0\u4840"+
    "\0\u4880\0\u48c0\0\u4900\0\u4940\0\u4980\0\u49c0\0\u4a00\0\u4a40"+
    "\0\u4a80\0\u4ac0\0\u4b00\0\u4b40\0\u4b80\0\u4bc0\0\u4c00\0\u4c40"+
    "\0\u4c80\0\u4cc0\0\u4d00\0\u4d40\0\u4d80\0\u4dc0\0\u4e00\0\u4e40"+
    "\0\u4e80\0\u4ec0\0\u4f00\0\u4f40\0\u4f80\0\u4fc0\0\u5000\0\u5040"+
    "\0\u5080\0\u50c0\0\u5100\0\u5140\0\u5180\0\u0140\0\u51c0\0\u5200"+
    "\0\u5240\0\u5280\0\u52c0\0\u5300\0\u5340\0\u5380\0\u53c0\0\u5400"+
    "\0\u5440\0\u5480\0\u54c0\0\u5500\0\u5540\0\u5580\0\u55c0\0\u5600"+
    "\0\u5640\0\u5680\0\u56c0\0\u5700\0\u5740\0\u5780\0\u57c0\0\u5800"+
    "\0\u5840\0\u5880\0\u0140\0\u58c0\0\u5900\0\u5940\0\u5980\0\u59c0"+
    "\0\u5a00\0\u5a40\0\u5a80\0\u5ac0\0\u5b00\0\u5b40\0\u5b80\0\u5bc0"+
    "\0\u5c00\0\u5c40\0\u5c80\0\u5cc0\0\u5d00\0\u5d40\0\u5d80\0\u5dc0"+
    "\0\u5e00\0\u0140\0\u5e40\0\u5e80\0\u5ec0\0\u5f00\0\u5f40\0\u5f80"+
    "\0\u5fc0\0\u6000\0\u6040\0\u5fc0\0\u6080\0\u60c0\0\u6100\0\u6140"+
    "\0\u6180\0\u61c0\0\u6200\0\u6240\0\u6280\0\u62c0\0\u6300\0\u6340"+
    "\0\u6380\0\u63c0\0\u6400\0\u6440\0\u6480\0\u64c0\0\u6500\0\u6540"+
    "\0\u6580\0\u65c0\0\u6600\0\u6640\0\u6680\0\u66c0\0\u6700\0\u6740"+
    "\0\u6780\0\u67c0\0\u6800\0\u6840\0\u6880\0\u68c0\0\u6900\0\u6940"+
    "\0\u6980\0\u69c0\0\u6a00\0\u6a40\0\u6a80\0\u6ac0\0\u6b00\0\u6b40"+
    "\0\u6b80\0\u6bc0\0\u6c00\0\u6c40\0\u6c80\0\u6cc0\0\u6d00\0\u6d40"+
    "\0\u6d80";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[465];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\4\4\2\6\1\4\1\6\4\4\27\6"+
    "\1\4\5\6\2\4\6\6\1\4\2\6\1\7\1\4"+
    "\10\6\66\10\1\11\11\10\43\12\2\13\21\12\1\14"+
    "\11\12\11\0\1\15\10\0\1\15\6\0\2\16\2\0"+
    "\2\17\4\0\2\20\35\0\1\21\6\0\1\15\10\0"+
    "\1\15\6\0\2\16\2\0\2\17\4\0\2\20\144\0"+
    "\1\15\10\0\1\15\6\0\2\16\2\0\2\17\4\0"+
    "\2\20\12\0\2\22\73\0\1\23\24\0\2\24\2\0"+
    "\1\25\5\0\1\24\11\0\2\26\2\0\2\27\20\0"+
    "\1\24\103\0\2\30\50\0\2\31\102\0\2\32\116\0"+
    "\2\33\22\0\2\34\2\0\1\35\5\0\1\34\11\0"+
    "\2\36\2\0\2\37\15\0\2\40\1\0\1\34\107\0"+
    "\3\41\71\0\2\42\20\0\2\24\2\0\1\25\5\0"+
    "\1\24\11\0\2\26\57\0\1\43\10\0\1\43\61\0"+
    "\2\44\2\0\1\45\5\0\1\44\15\0\2\46\20\0"+
    "\1\44\1\0\2\47\66\0\3\50\113\0\3\51\62\0"+
    "\2\52\36\0\1\53\10\0\1\53\2\0\1\53\100\0"+
    "\2\54\6\0\2\55\42\0\2\34\2\0\1\35\5\0"+
    "\1\34\11\0\2\36\21\0\2\40\34\0\1\56\10\0"+
    "\1\56\61\0\2\57\2\0\1\60\5\0\1\57\15\0"+
    "\2\61\20\0\1\57\1\0\2\62\66\0\3\63\61\0"+
    "\2\64\53\0\1\65\10\0\1\65\143\0\3\66\21\0"+
    "\1\67\10\0\1\67\60\0\2\44\2\0\1\45\5\0"+
    "\1\44\15\0\2\46\53\0\1\70\10\0\1\70\115\0"+
    "\2\71\14\0\1\72\101\0\2\73\30\0\1\74\10\0"+
    "\1\74\65\0\1\75\10\0\1\75\66\0\1\76\10\0"+
    "\1\76\35\0\2\77\46\0\1\100\7\0\1\100\10\0"+
    "\1\100\1\0\1\100\35\0\1\101\10\0\1\101\70\0"+
    "\1\32\10\0\1\32\2\0\1\32\62\0\1\102\10\0"+
    "\1\102\60\0\2\57\2\0\1\60\5\0\1\57\15\0"+
    "\2\61\53\0\1\103\10\0\1\103\60\0\1\104\1\105"+
    "\3\106\1\107\2\0\1\104\1\0\4\106\17\0\2\110"+
    "\6\0\1\104\5\0\1\111\1\104\6\0\1\104\2\0"+
    "\1\112\1\104\65\0\2\113\30\0\1\114\10\0\1\114"+
    "\140\0\2\115\32\0\1\116\70\0\1\117\10\0\1\117"+
    "\70\0\1\120\10\0\1\120\2\0\1\120\62\0\1\121"+
    "\10\0\1\121\106\0\2\122\50\0\2\44\2\0\1\45"+
    "\5\0\1\44\15\0\2\46\12\0\3\123\3\0\1\44"+
    "\25\0\2\124\2\0\1\125\5\0\1\124\11\0\2\26"+
    "\12\0\2\126\5\0\2\127\1\0\1\130\41\0\1\131"+
    "\123\0\2\132\76\0\2\133\36\0\2\100\2\0\1\134"+
    "\5\0\1\100\52\0\1\135\36\0\2\136\61\0\1\137"+
    "\10\0\1\137\2\0\1\137\62\0\1\140\10\0\1\140"+
    "\60\0\1\141\1\106\2\141\1\142\4\0\4\141\50\0"+
    "\1\143\12\0\4\141\1\142\4\0\4\141\50\0\1\143"+
    "\17\0\1\144\10\0\1\144\107\0\2\145\47\0\1\104"+
    "\1\105\3\106\1\107\2\0\1\104\1\0\4\106\27\0"+
    "\1\104\5\0\2\104\6\0\1\104\2\0\1\112\1\104"+
    "\67\0\2\146\20\0\2\57\2\0\1\60\5\0\1\57"+
    "\15\0\2\61\12\0\3\147\3\0\1\57\25\0\2\150"+
    "\2\151\1\152\4\0\1\151\1\150\2\151\7\0\2\36"+
    "\12\0\2\153\5\0\2\154\1\0\1\150\12\0\1\155"+
    "\11\0\1\156\1\157\4\156\2\0\1\156\1\0\4\156"+
    "\27\0\1\160\2\161\3\0\1\162\1\156\6\0\1\156"+
    "\2\0\2\156\14\0\1\163\1\0\2\163\1\0\1\163"+
    "\11\0\2\163\1\0\1\163\1\0\1\163\1\0\1\163"+
    "\1\0\1\163\1\0\1\163\1\0\1\163\1\0\1\163"+
    "\1\0\1\163\2\0\1\163\1\0\1\163\4\0\1\163"+
    "\1\0\1\163\1\0\1\163\2\0\1\163\3\0\1\163"+
    "\1\0\1\163\1\0\1\163\1\0\1\163\11\0\1\164"+
    "\10\0\1\164\65\0\1\165\10\0\1\165\2\0\1\165"+
    "\120\0\3\166\3\0\1\72\32\0\1\167\10\0\1\167"+
    "\61\0\2\124\2\0\1\125\5\0\1\124\11\0\2\26"+
    "\21\0\2\127\34\0\1\170\10\0\1\170\66\0\1\171"+
    "\10\0\1\171\111\0\2\172\51\0\1\173\1\0\2\173"+
    "\1\0\1\173\11\0\2\173\1\0\1\173\1\0\1\173"+
    "\1\174\1\175\1\0\1\173\1\0\1\173\1\176\1\177"+
    "\1\0\1\173\1\0\1\173\2\0\1\173\1\0\1\173"+
    "\3\0\1\200\1\201\1\0\1\173\1\0\1\173\2\0"+
    "\1\173\3\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\6\0\1\202\10\0\1\202\137\0\2\203\25\0"+
    "\1\204\10\0\1\204\137\0\2\205\62\0\2\53\44\0"+
    "\1\206\10\0\1\206\65\0\1\207\10\0\1\207\2\0"+
    "\1\207\62\0\1\210\10\0\1\210\57\0\1\104\1\105"+
    "\3\106\1\107\2\0\1\104\1\0\4\106\27\0\1\211"+
    "\2\212\3\0\1\111\1\104\6\0\1\104\2\0\1\112"+
    "\1\104\73\0\3\213\20\0\1\214\10\0\1\214\61\0"+
    "\2\150\2\151\1\152\4\0\1\151\1\150\2\151\7\0"+
    "\2\36\21\0\2\154\14\0\1\155\12\0\4\151\1\215"+
    "\4\0\4\151\50\0\1\155\17\0\1\216\10\0\1\216"+
    "\66\0\1\217\10\0\1\217\111\0\2\220\124\0\2\221"+
    "\21\0\1\156\103\0\1\222\10\0\1\222\60\0\1\156"+
    "\1\157\4\156\2\0\1\156\1\0\4\156\27\0\1\156"+
    "\5\0\2\156\6\0\1\156\2\0\2\156\14\0\1\163"+
    "\1\0\2\163\1\0\1\163\3\0\1\223\5\0\2\163"+
    "\1\0\1\163\1\0\1\163\1\0\1\163\1\0\1\163"+
    "\1\0\1\163\1\0\1\163\1\0\1\163\1\0\1\163"+
    "\2\0\1\163\1\0\1\163\4\0\1\163\1\0\1\163"+
    "\1\0\1\163\2\0\1\163\3\0\1\163\1\0\1\163"+
    "\1\0\1\163\1\0\1\163\12\0\1\24\76\0\1\224"+
    "\10\0\1\224\125\0\2\225\27\0\2\44\2\0\1\45"+
    "\5\0\1\44\15\0\2\46\12\0\3\226\3\0\1\44"+
    "\33\0\1\227\10\0\1\227\104\0\2\230\132\0\2\231"+
    "\21\0\1\173\1\0\2\173\1\0\1\173\3\0\1\232"+
    "\5\0\2\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\2\0\1\173\1\0\1\173\4\0\1\173"+
    "\1\0\1\173\1\0\1\173\2\0\1\173\3\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\35\0\2\233"+
    "\45\0\1\173\1\0\2\173\1\0\1\173\3\0\1\232"+
    "\5\0\2\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\233\1\234\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\2\0\1\173\1\0\1\173\4\0\1\173"+
    "\1\0\1\173\1\0\1\173\2\0\1\173\3\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\45\0\3\235"+
    "\7\0\2\236\23\0\1\173\1\0\2\173\1\0\1\173"+
    "\3\0\1\232\5\0\2\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\2\235\1\237\1\0\1\173"+
    "\4\0\1\173\1\236\1\240\1\0\1\173\2\0\1\173"+
    "\3\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\41\0\2\241\41\0\1\173\1\0\2\173\1\0\1\173"+
    "\3\0\1\232\5\0\2\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\241\1\242\1\0\1\173\2\0\1\173\1\0\1\173"+
    "\4\0\1\173\1\0\1\173\1\0\1\173\2\0\1\173"+
    "\3\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\37\0\2\243\66\0\2\101\56\0\1\244\10\0\1\244"+
    "\142\0\3\245\24\0\1\34\76\0\1\246\10\0\1\246"+
    "\65\0\1\247\10\0\1\247\2\0\1\247\123\0\2\250"+
    "\34\0\1\251\10\0\1\251\61\0\2\57\2\0\1\60"+
    "\5\0\1\57\15\0\2\61\12\0\3\252\3\0\1\57"+
    "\32\0\1\253\10\0\1\253\67\0\1\254\10\0\1\254"+
    "\104\0\2\255\132\0\2\256\100\0\3\257\37\0\2\260"+
    "\54\0\2\223\1\0\2\223\1\0\1\223\3\0\1\261"+
    "\5\0\2\223\1\0\1\223\1\0\1\223\1\0\1\223"+
    "\1\0\1\223\1\0\1\223\1\0\1\223\1\0\1\223"+
    "\1\0\1\223\2\0\1\223\1\0\2\223\3\0\1\223"+
    "\1\0\1\223\1\0\1\223\2\0\1\223\3\0\1\223"+
    "\1\0\1\223\1\0\1\223\1\0\1\223\12\0\1\44"+
    "\73\0\1\262\10\0\1\262\70\0\1\263\10\0\1\263"+
    "\2\0\1\263\63\0\1\264\10\0\1\264\2\0\1\264"+
    "\132\0\2\265\64\0\3\266\3\0\1\267\27\0\2\232"+
    "\1\0\2\232\1\0\1\232\3\0\1\270\5\0\2\232"+
    "\1\0\1\232\1\0\1\232\1\0\1\232\1\0\1\232"+
    "\1\0\1\232\1\0\1\232\1\0\1\232\1\0\1\232"+
    "\2\0\1\232\1\0\2\232\3\0\1\232\1\0\1\232"+
    "\1\0\1\232\2\0\1\232\3\0\1\232\1\0\1\232"+
    "\1\0\1\232\1\0\1\232\27\0\2\271\53\0\1\173"+
    "\1\0\2\173\1\0\1\173\3\0\1\232\5\0\2\173"+
    "\1\0\1\173\1\271\1\272\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\2\0\1\173\1\0\1\173\4\0\1\173\1\0\1\173"+
    "\1\0\1\173\2\0\1\173\3\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\43\0\2\273\37\0\1\274"+
    "\77\0\1\173\1\0\2\173\1\0\1\173\3\0\1\232"+
    "\5\0\2\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\273\1\275\2\0\1\173\1\0\1\173\4\0\1\173"+
    "\1\0\1\173\1\0\1\173\2\0\1\173\3\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\4\0\1\276"+
    "\1\0\2\173\1\0\1\173\3\0\1\232\5\0\2\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\2\0\1\173\1\0\1\173\4\0\1\173\1\0\1\173"+
    "\1\0\1\173\2\0\1\173\3\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\6\0\1\277\10\0\1\277"+
    "\64\0\1\173\1\0\1\300\1\173\1\0\1\173\3\0"+
    "\1\232\1\0\1\277\3\0\2\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\2\0\1\173\1\0"+
    "\1\173\4\0\1\173\1\0\1\173\1\0\1\173\2\0"+
    "\1\173\3\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\45\0\3\101\40\0\1\301\10\0\1\301\2\0"+
    "\1\301\61\0\1\302\10\0\1\302\72\0\1\57\76\0"+
    "\1\303\10\0\1\303\63\0\1\304\10\0\1\304\75\0"+
    "\1\305\72\0\1\306\10\0\1\306\2\0\1\306\62\0"+
    "\1\307\10\0\1\307\67\0\1\310\10\0\1\310\2\0"+
    "\1\310\132\0\2\311\17\0\1\156\1\312\3\313\1\314"+
    "\2\0\1\156\1\0\4\313\27\0\1\315\2\316\3\0"+
    "\1\317\1\156\6\0\1\156\2\0\1\320\1\156\16\0"+
    "\1\321\10\0\1\321\111\0\2\322\117\0\1\323\52\0"+
    "\2\324\6\0\2\72\104\0\2\325\44\0\1\326\10\0"+
    "\1\326\112\0\2\130\47\0\1\327\10\0\1\327\132\0"+
    "\1\330\72\0\3\331\34\0\1\173\1\0\2\173\1\0"+
    "\1\173\3\0\1\232\5\0\2\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\2\331\1\332\1\0"+
    "\1\173\4\0\1\173\1\0\1\173\1\0\1\173\2\0"+
    "\1\173\3\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\70\0\2\333\67\0\2\334\21\0\1\173\1\0"+
    "\2\173\1\0\1\173\3\0\1\232\5\0\2\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\2\0"+
    "\1\173\1\0\1\173\4\0\1\173\1\0\1\173\1\0"+
    "\1\173\2\0\1\173\2\0\1\333\1\335\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\4\0\1\173\1\0\2\173"+
    "\1\0\1\173\3\0\1\232\5\0\2\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\2\0\1\173"+
    "\1\0\1\173\4\0\1\173\1\0\1\173\1\334\1\336"+
    "\2\0\1\173\3\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\45\0\3\337\34\0\1\173\1\0\2\173"+
    "\1\0\1\173\3\0\1\232\5\0\2\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\2\337\1\340"+
    "\1\0\1\173\4\0\1\173\1\0\1\173\1\0\1\173"+
    "\2\0\1\173\3\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\11\0\1\341\10\0\1\341\72\0\1\342"+
    "\74\0\1\141\112\0\2\343\6\0\2\344\51\0\1\345"+
    "\10\0\1\345\2\0\1\345\4\0\2\346\4\0\2\347"+
    "\102\0\2\350\43\0\1\351\10\0\1\351\2\0\1\351"+
    "\64\0\1\352\10\0\1\352\112\0\2\150\42\0\1\151"+
    "\1\313\2\151\1\215\4\0\4\151\50\0\1\155\17\0"+
    "\1\353\10\0\1\353\60\0\1\156\1\312\3\313\1\314"+
    "\2\0\1\156\1\0\4\313\27\0\1\156\5\0\2\156"+
    "\6\0\1\156\2\0\1\320\1\156\25\0\1\354\127\0"+
    "\3\355\102\0\1\323\14\0\1\356\67\0\2\357\50\0"+
    "\2\360\57\0\1\124\112\0\2\361\123\0\1\330\14\0"+
    "\1\362\60\0\2\363\32\0\1\173\1\0\2\173\1\0"+
    "\1\173\3\0\1\232\5\0\2\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\2\0\1\173\1\363"+
    "\1\364\4\0\1\173\1\0\1\173\1\0\1\173\2\0"+
    "\1\173\3\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\15\0\1\365\117\0\2\366\45\0\1\173\1\0"+
    "\2\173\1\0\1\173\3\0\1\365\5\0\2\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\2\0"+
    "\1\173\1\0\1\173\4\0\1\173\1\0\1\173\1\0"+
    "\1\173\2\0\1\173\3\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\4\0\1\173\1\0\2\173\1\0"+
    "\1\173\3\0\1\232\5\0\2\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\366\1\367\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\2\0\1\173\1\0"+
    "\1\173\4\0\1\173\1\0\1\173\1\0\1\173\2\0"+
    "\1\173\3\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\37\0\2\370\43\0\1\173\1\0\2\173\1\0"+
    "\1\173\3\0\1\232\5\0\2\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\370"+
    "\1\371\1\0\1\173\1\0\1\173\2\0\1\173\1\0"+
    "\1\173\4\0\1\173\1\0\1\173\1\0\1\173\2\0"+
    "\1\173\3\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\12\0\1\100\75\0\1\372\10\0\1\372\2\0"+
    "\1\372\132\0\2\373\62\0\2\374\70\0\2\375\106\0"+
    "\3\376\7\0\2\377\50\0\2\u0100\56\0\1\u0101\10\0"+
    "\1\u0101\67\0\1\150\112\0\2\u0102\61\0\1\u0103\10\0"+
    "\1\u0103\2\0\1\u0103\12\0\2\u0104\14\0\2\u0105\71\0"+
    "\2\u0106\63\0\2\72\66\0\2\u0107\102\0\2\u0108\45\0"+
    "\66\u0109\1\0\11\u0109\6\0\1\333\10\0\1\333\64\0"+
    "\1\173\1\0\1\335\1\173\1\0\1\173\3\0\1\232"+
    "\1\0\1\333\3\0\2\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\2\0\1\173\1\0\1\173"+
    "\4\0\1\173\1\0\1\173\1\0\1\173\2\0\1\173"+
    "\3\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\3\0\2\365\1\0\2\365\1\0\1\365\3\0\1\u010a"+
    "\5\0\2\365\1\0\1\365\1\0\1\365\1\0\1\365"+
    "\1\0\1\365\1\0\1\365\1\0\1\365\1\0\1\365"+
    "\1\0\1\365\2\0\1\365\1\0\2\365\3\0\1\365"+
    "\1\0\1\365\1\0\1\365\2\0\1\365\3\0\1\365"+
    "\1\0\1\365\1\0\1\365\1\0\1\365\43\0\2\u010b"+
    "\37\0\1\173\1\0\2\173\1\0\1\173\3\0\1\232"+
    "\5\0\2\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\u010b\1\u010c\2\0\1\173\1\0\1\173\4\0\1\173"+
    "\1\0\1\173\1\0\1\173\2\0\1\173\3\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\45\0\3\u010d"+
    "\34\0\1\173\1\0\2\173\1\0\1\173\3\0\1\232"+
    "\5\0\2\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\2\u010d\1\u010e\1\0\1\173\4\0\1\173"+
    "\1\0\1\173\1\0\1\173\2\0\1\173\3\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\43\0\2\u010f"+
    "\70\0\2\344\52\0\1\u0110\10\0\1\u0110\104\0\2\u0111"+
    "\112\0\2\u0112\37\0\1\u0113\120\0\2\u0114\63\0\1\151"+
    "\116\0\2\u0115\110\0\2\u0116\100\0\3\376\71\0\2\u0117"+
    "\100\0\2\u0118\100\0\3\u0119\30\0\66\u0109\1\u011a\11\u0109"+
    "\52\0\1\u011b\52\0\2\u011c\55\0\1\173\1\0\2\173"+
    "\1\0\1\173\3\0\1\232\5\0\2\173\1\u011c\1\u011d"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\2\0\1\173"+
    "\1\0\1\173\4\0\1\173\1\0\1\173\1\0\1\173"+
    "\2\0\1\173\3\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\11\0\1\u011e\10\0\1\u011e\61\0\1\173"+
    "\1\0\2\173\1\0\1\u011f\3\0\1\232\4\0\1\u011e"+
    "\2\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\2\0\1\173\1\0\1\173\4\0\1\173\1\0"+
    "\1\173\1\0\1\173\2\0\1\173\3\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\11\0\1\u0120\10\0"+
    "\1\u0120\153\0\2\u0121\45\0\3\u0122\120\0\2\u0123\67\0"+
    "\2\u0124\60\0\2\u0125\100\0\3\u0126\41\0\1\u0127\10\0"+
    "\1\u0127\63\0\1\u0128\10\0\1\u0128\125\0\3\u0129\100\0"+
    "\2\267\102\0\1\u012a\75\0\1\u011b\14\0\1\u012b\47\0"+
    "\2\u012c\43\0\1\173\1\0\2\173\1\0\1\173\3\0"+
    "\1\232\5\0\2\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\u012c\1\u012d\1\0"+
    "\1\173\1\0\1\173\2\0\1\173\1\0\1\173\4\0"+
    "\1\173\1\0\1\173\1\0\1\173\2\0\1\173\3\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\25\0"+
    "\2\u012e\55\0\1\173\1\0\2\173\1\0\1\173\3\0"+
    "\1\232\5\0\2\173\1\u012e\1\u012f\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\2\0\1\173\1\0\1\173\4\0"+
    "\1\173\1\0\1\173\1\0\1\173\2\0\1\173\3\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\76\0"+
    "\2\u0130\15\0\1\u0131\132\0\2\u0132\43\0\1\u0133\117\0"+
    "\2\u0134\106\0\3\u0135\100\0\2\u0136\124\0\2\u0137\45\0"+
    "\3\u0138\63\0\2\u0139\122\0\2\u013a\17\0\66\u013b\1\0"+
    "\11\u013b\72\0\2\u013c\10\0\1\173\1\0\2\173\1\0"+
    "\1\173\3\0\1\232\5\0\2\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\2\0\1\173\1\0"+
    "\1\173\4\0\1\173\1\0\1\173\1\0\1\173\2\0"+
    "\1\173\3\0\1\173\1\u013c\1\u013d\1\0\1\173\1\0"+
    "\1\173\57\0\2\u013e\23\0\1\173\1\0\2\173\1\0"+
    "\1\173\3\0\1\232\5\0\2\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\2\0\1\173\1\0"+
    "\1\173\4\0\1\173\1\u013e\1\u013f\1\0\1\173\2\0"+
    "\1\173\3\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\15\0\1\u0140\65\0\2\u0131\1\0\2\u0131\1\0"+
    "\1\u0131\3\0\1\u0141\5\0\2\u0131\1\0\1\u0131\1\0"+
    "\1\u0131\1\0\1\u0131\1\0\1\u0131\1\0\1\u0131\1\0"+
    "\1\u0131\1\0\1\u0131\1\0\1\u0131\2\0\1\u0131\1\0"+
    "\2\u0131\3\0\1\u0131\1\0\1\u0131\1\0\1\u0131\2\0"+
    "\1\u0131\3\0\1\u0131\1\0\1\u0131\1\0\1\u0131\1\0"+
    "\1\u0131\6\0\1\u0142\10\0\1\u0142\63\0\2\u0133\1\0"+
    "\2\u0133\1\0\1\u0133\3\0\1\u0143\5\0\2\u0133\1\0"+
    "\1\u0133\1\0\1\u0133\1\0\1\u0133\1\0\1\u0133\1\0"+
    "\1\u0133\1\0\1\u0133\1\0\1\u0133\1\0\1\u0133\2\0"+
    "\1\u0133\1\0\2\u0133\3\0\1\u0133\1\0\1\u0133\1\0"+
    "\1\u0133\2\0\1\u0133\3\0\1\u0133\1\0\1\u0133\1\0"+
    "\1\u0133\1\0\1\u0133\43\0\2\u0144\66\0\2\u0145\60\0"+
    "\1\u0146\121\0\2\u0147\107\0\2\44\111\0\3\u0148\12\0"+
    "\66\u013b\1\u0149\11\u013b\35\0\2\u014a\45\0\1\173\1\0"+
    "\2\173\1\0\1\173\3\0\1\232\5\0\2\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\u014a"+
    "\1\u014b\1\0\1\173\1\0\1\173\1\0\1\173\2\0"+
    "\1\173\1\0\1\173\4\0\1\173\1\0\1\173\1\0"+
    "\1\173\2\0\1\173\3\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\45\0\3\235\34\0\1\173\1\0"+
    "\2\173\1\0\1\173\3\0\1\232\5\0\2\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\2\235"+
    "\1\237\1\0\1\173\4\0\1\173\1\0\1\173\1\0"+
    "\1\173\2\0\1\173\3\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\74\0\2\u014c\54\0\1\u014d\42\0"+
    "\1\u014e\134\0\1\u014f\52\0\2\u0150\121\0\2\57\31\0"+
    "\2\u0146\1\0\2\u0146\1\0\1\u0146\3\0\1\u0151\5\0"+
    "\2\u0146\1\0\1\u0146\1\0\1\u0146\1\0\1\u0146\1\0"+
    "\1\u0146\1\0\1\u0146\1\0\1\u0146\1\0\1\u0146\1\0"+
    "\1\u0146\2\0\1\u0146\1\0\2\u0146\3\0\1\u0146\1\0"+
    "\1\u0146\1\0\1\u0146\2\0\1\u0146\3\0\1\u0146\1\0"+
    "\1\u0146\1\0\1\u0146\1\0\1\u0146\45\0\3\u0152\36\0"+
    "\1\u0153\10\0\1\u0153\134\0\1\u0154\104\0\2\u0155\21\0"+
    "\1\173\1\0\2\173\1\0\1\173\3\0\1\232\5\0"+
    "\2\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\2\0\1\173\1\0\1\173\4\0\1\173\1\0"+
    "\1\173\1\u0155\1\u0156\2\0\1\173\3\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\31\0\2\u0157\117\0"+
    "\1\u014d\14\0\1\u0158\13\0\2\u014e\1\0\2\u014e\1\0"+
    "\1\u014e\3\0\1\u0159\5\0\2\u014e\1\0\1\u014e\1\0"+
    "\1\u014e\1\0\1\u014e\1\0\1\u014e\1\0\1\u014e\1\0"+
    "\1\u014e\1\0\1\u014e\1\0\1\u014e\2\0\1\u014e\1\0"+
    "\2\u014e\3\0\1\u014e\1\0\1\u014e\1\0\1\u014e\2\0"+
    "\1\u014e\3\0\1\u014e\1\0\1\u014e\1\0\1\u014e\1\0"+
    "\1\u014e\52\0\1\u014f\14\0\1\u015a\47\0\2\u015b\111\0"+
    "\1\u015c\36\0\1\u015d\10\0\1\u015d\144\0\1\u015e\67\0"+
    "\2\u015f\23\0\1\u0160\77\0\1\u0161\1\0\2\173\1\0"+
    "\1\173\3\0\1\232\5\0\2\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\1\0\1\173\1\0\1\173\2\0\1\173\1\0"+
    "\1\173\4\0\1\173\1\0\1\173\1\0\1\173\2\0"+
    "\1\173\3\0\1\173\1\0\1\173\1\0\1\173\1\0"+
    "\1\173\50\0\2\u0162\26\0\66\u0163\1\0\11\u0163\52\0"+
    "\1\u0164\25\0\66\u0165\1\0\11\u0165\72\0\2\u0166\56\0"+
    "\1\u015c\14\0\1\u0167\35\0\2\u0168\134\0\3\u0169\22\0"+
    "\1\u016a\10\0\1\u016a\2\0\1\u016a\57\0\1\173\1\0"+
    "\2\173\1\u016a\1\173\3\0\1\232\3\0\1\u016a\1\0"+
    "\1\173\1\u016b\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\2\0\1\173\1\0\1\173\4\0\1\173"+
    "\1\0\1\173\1\0\1\173\2\0\1\173\3\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\55\0\2\u016c"+
    "\21\0\66\u0163\1\u016d\11\u0163\52\0\1\u0164\14\0\1\u016e"+
    "\10\0\66\u0165\1\u016f\11\u0165\35\0\2\u0170\41\0\66\u0171"+
    "\1\0\11\u0171\57\0\2\u0104\25\0\1\u0172\10\0\1\u0172"+
    "\115\0\2\u0173\45\0\1\173\1\0\2\173\1\0\1\173"+
    "\3\0\1\232\5\0\2\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\u0173\1\u0174\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\2\0\1\173\1\0\1\173"+
    "\4\0\1\173\1\0\1\173\1\0\1\173\2\0\1\173"+
    "\3\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\15\0\1\u0175\136\0\1\u0176\23\0\66\u0177\1\0\11\u0177"+
    "\54\0\1\u0178\104\0\2\u0179\15\0\66\u0171\1\u017a\11\u0171"+
    "\67\0\1\u017b\47\0\2\u017c\43\0\1\173\1\0\2\173"+
    "\1\0\1\173\3\0\1\232\5\0\2\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\u017c\1\u017d\1\0\1\173\1\0\1\173\2\0\1\173"+
    "\1\0\1\173\4\0\1\173\1\0\1\173\1\0\1\173"+
    "\2\0\1\173\3\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\52\0\1\u017e\104\0\2\u017f\17\0\66\u0177"+
    "\1\u0180\11\u0177\57\0\2\u0181\23\0\1\u0182\147\0\1\u0183"+
    "\66\0\2\271\37\0\1\173\1\0\2\173\1\0\1\173"+
    "\3\0\1\232\5\0\2\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\1\0\1\173\1\271\1\272\2\0\1\173\1\0\1\173"+
    "\4\0\1\173\1\0\1\173\1\0\1\173\2\0\1\173"+
    "\3\0\1\173\1\0\1\173\1\0\1\173\1\0\1\173"+
    "\52\0\1\u017e\14\0\1\u0184\73\0\3\u0185\66\0\1\u0186"+
    "\106\0\3\u0187\22\0\1\u0188\10\0\1\u0188\2\0\1\u0188"+
    "\132\0\2\u0189\17\0\66\u018a\1\0\11\u018a\6\0\1\u018b"+
    "\10\0\1\u018b\137\0\2\u018c\25\0\1\u018d\10\0\1\u018d"+
    "\115\0\2\u018e\124\0\3\u018f\12\0\66\u018a\1\u0190\11\u018a"+
    "\67\0\1\141\73\0\3\u0191\101\0\1\u0192\47\0\2\u0193"+
    "\45\0\1\u0194\10\0\1\u0194\134\0\1\u0195\31\0\1\u0196"+
    "\10\0\1\u0196\123\0\2\u0197\122\0\1\151\67\0\2\u0198"+
    "\106\0\1\u0199\55\0\3\u019a\113\0\3\u019b\13\0\4\u019c"+
    "\1\u019d\4\0\4\u019c\50\0\1\u019e\61\0\2\u019f\34\0"+
    "\1\u01a0\10\0\1\u01a0\66\0\1\u01a1\10\0\1\u01a1\137\0"+
    "\2\u01a2\25\0\1\u0123\10\0\1\u0123\147\0\1\u01a3\17\0"+
    "\1\u01a4\10\0\1\u01a4\142\0\3\u01a5\13\0\2\u01a3\2\0"+
    "\1\u01a6\5\0\1\u01a3\27\0\2\u01a7\43\0\1\u01a8\10\0"+
    "\1\u01a8\2\0\1\u01a8\61\0\1\u01a9\10\0\1\u01a9\66\0"+
    "\1\u01aa\10\0\1\u01aa\61\0\2\u01ab\2\0\1\u01ac\5\0"+
    "\1\u01ab\15\0\2\u01ad\15\0\2\40\1\0\1\u01ab\35\0"+
    "\1\u01ae\10\0\1\u01ae\72\0\1\u01af\71\0\1\u01b0\10\0"+
    "\1\u01b0\60\0\2\u01ab\2\0\1\u01ac\5\0\1\u01ab\34\0"+
    "\2\40\34\0\1\u01b1\10\0\1\u01b1\125\0\3\u01b2\42\0"+
    "\1\u019c\75\0\1\u01b3\10\0\1\u01b3\2\0\1\u01b3\12\0"+
    "\2\u01b4\47\0\1\u01b5\10\0\1\u01b5\2\0\1\u01b5\62\0"+
    "\1\u01b6\10\0\1\u01b6\66\0\1\u01b7\10\0\1\u01b7\122\0"+
    "\2\u01b8\112\0\2\377\30\0\1\u01b9\10\0\1\u01b9\65\0"+
    "\1\u01ba\10\0\1\u01ba\2\0\1\u01ba\54\0\2\u01bb\2\151"+
    "\1\u01bc\4\0\1\151\1\u01bb\2\151\23\0\2\u01bd\5\0"+
    "\2\154\1\0\1\u01bb\12\0\1\155\22\0\1\u01be\10\0"+
    "\1\u01be\67\0\1\u01a3\76\0\1\u01bf\10\0\1\u01bf\56\0"+
    "\2\u01bb\2\151\1\u01bc\4\0\1\151\1\u01bb\2\151\32\0"+
    "\2\154\14\0\1\155\17\0\1\u01c0\10\0\1\u01c0\66\0"+
    "\1\u01c1\10\0\1\u01c1\156\0\2\u01c2\12\0\1\u01ab\74\0"+
    "\1\u01c3\10\0\1\u01c3\104\0\2\u01c4\66\0\1\u01c5\72\0"+
    "\1\u01c6\10\0\1\u01c6\2\0\1\u01c6\132\0\2\u01c7\22\0"+
    "\2\u01c5\1\0\2\u01c5\1\0\1\u01c5\3\0\1\u01c8\5\0"+
    "\2\u01c5\1\0\1\u01c5\1\0\1\u01c5\1\0\1\u01c5\1\0"+
    "\1\u01c5\1\0\1\u01c5\1\0\1\u01c5\1\0\1\u01c5\1\0"+
    "\1\u01c5\2\0\1\u01c5\1\0\2\u01c5\3\0\1\u01c5\1\0"+
    "\1\u01c5\1\0\1\u01c5\2\0\1\u01c5\3\0\1\u01c5\1\0"+
    "\1\u01c5\1\0\1\u01c5\1\0\1\u01c5\11\0\1\u01c9\10\0"+
    "\1\u01c9\112\0\2\u01bb\113\0\1\u01ca\37\0\1\u01bb\137\0"+
    "\1\u01ca\14\0\1\u01cb\10\0\66\u01cc\1\0\77\u01cc\1\u01cd"+
    "\11\u01cc\54\0\1\u01ce\102\0\2\u01cf\102\0\3\u01d0\20\0"+
    "\1\u01d1\10\0\1\u01d1\147\0\1\u019c\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28096];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\1\11\1\1\1\11\1\1\1\11\2\1"+
    "\31\0\1\1\23\0\1\11\1\0\1\1\7\0\1\11"+
    "\3\1\1\0\2\1\4\0\1\11\2\0\1\1\5\0"+
    "\1\1\25\0\1\11\2\1\1\0\1\1\26\0\1\1"+
    "\17\0\1\1\35\0\1\11\22\0\4\1\1\0\2\1"+
    "\35\0\1\11\157\0\1\11\34\0\1\11\26\0\1\11"+
    "\6\0\1\1\70\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[465];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.8"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public RegionalCaseLawAuthorities() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RegionalCaseLawAuthorities(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 13: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 14: break;
          case 3: 
            { checkEnd();
            } 
            // fall through
          case 15: break;
          case 4: 
            { annotationEntity.setValue("IT_TAR");

		offset += yylength();
		position += yylength();
            } 
            // fall through
          case 16: break;
          case 5: 
            { annotationEntity.setValue("IT_TRB");

		offset += yylength();
		position += yylength();
            } 
            // fall through
          case 17: break;
          case 6: 
            { annotate(new CaseLawAuthority(), "IT_TAR", true, true);
            } 
            // fall through
          case 18: break;
          case 7: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 19: break;
          case 8: 
            { annotate(new CaseLawAuthority(), "IT_TRB", true, true);
            } 
            // fall through
          case 20: break;
          case 9: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 21: break;
          case 10: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 22: break;
          case 11: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		annotationEntity.addRelatedEntity(retrievedEntity);
		retrievedEntity.addRelatedEntity(annotationEntity);
		
		//Update the annotation value with the normalized location
		String geoValue = retrievedEntity.getValue();
		if(geoValue != null && geoValue.startsWith("IT_")) {
			annotationEntity.setValue(annotationEntity.getValue() + geoValue.substring(3));
		}
				
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 23: break;
          case 12: 
            { start(new CaseLawAuthority(), regionalState, true, false);
            } 
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java RegionalCaseLawAuthorities [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        RegionalCaseLawAuthorities scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new RegionalCaseLawAuthorities(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
