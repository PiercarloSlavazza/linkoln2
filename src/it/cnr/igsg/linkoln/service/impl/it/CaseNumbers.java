/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
/* The following code was generated by JFlex 1.6.1 */

package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>CaseNumbers.jflex</tt>
 */
public class CaseNumbers extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int caseNumberState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\2\1\0\1\14\1\1\22\0\1\14\5\0\1\6"+
    "\1\5\1\15\1\15\2\0\1\15\1\3\1\42\1\43\1\52\1\45"+
    "\1\51\1\41\1\41\1\41\1\47\1\47\1\46\1\50\1\16\1\13"+
    "\5\0\1\27\1\10\1\64\1\66\1\31\1\77\1\75\1\24\1\34"+
    "\1\24\1\71\1\56\1\54\1\7\1\36\1\12\1\24\1\62\1\25"+
    "\1\60\1\40\1\24\1\101\1\24\1\24\1\24\1\72\1\44\1\73"+
    "\1\0\1\4\1\5\1\26\1\21\1\63\1\65\1\30\1\76\1\74"+
    "\1\17\1\33\1\17\1\70\1\55\1\53\1\20\1\35\1\23\1\17"+
    "\1\61\1\22\1\57\1\37\1\17\1\100\1\17\1\17\1\17\12\0"+
    "\1\0\44\0\1\0\5\0\1\102\3\0\1\5\5\0\1\0\5\0"+
    "\1\17\1\17\4\17\1\0\1\17\1\17\1\17\2\17\1\17\1\17"+
    "\2\17\1\0\1\17\1\17\1\17\3\17\2\0\1\17\1\17\2\17"+
    "\3\0\1\17\1\17\4\17\1\0\1\17\1\17\1\17\2\17\1\17"+
    "\1\17\2\17\1\0\1\17\1\17\1\17\3\17\2\0\1\17\1\17"+
    "\2\17\53\0\1\17\1\17\6\0\2\32\66\0\1\17\1\17\4\0"+
    "\1\17\1\17\17\0\1\11\u1c88\0\1\17\1\17\216\0\2\17\42\0"+
    "\1\17\1\17\u0155\0\1\3\1\3\4\0\1\5\16\0\1\0\1\0"+
    "\u0100\0\1\67\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\2\2\5\3\1\4\4\3\31\0\1\5"+
    "\5\0\1\6\52\0\1\6\10\0\1\6\3\0\2\6"+
    "\73\0\1\6\16\0\1\6\1\0\1\6\60\0\1\7"+
    "\3\0\1\6\20\0\1\6\22\0\1\6\161\0\2\10"+
    "\214\0\1\6\22\0\1\11\112\0\1\12\51\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[665];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u014f"+
    "\0\u01d5\0\u014f\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367"+
    "\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f"+
    "\0\u05c2\0\u0605\0\311\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754"+
    "\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c"+
    "\0\u09af\0\u09f2\0\u0367\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41"+
    "\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59"+
    "\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71"+
    "\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189"+
    "\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1"+
    "\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9"+
    "\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1"+
    "\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9"+
    "\0\u1a2c\0\u1a6f\0\u1ab2\0\u1a2c\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe"+
    "\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee"+
    "\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206"+
    "\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e"+
    "\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636"+
    "\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e"+
    "\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66"+
    "\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e"+
    "\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96"+
    "\0\u014f\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b"+
    "\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283"+
    "\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b"+
    "\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3"+
    "\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb"+
    "\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3"+
    "\0\u3b26\0\u014f\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u3cb8"+
    "\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0"+
    "\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u3fdc\0\u40a5"+
    "\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u42bd"+
    "\0\u4300\0\u4343\0\u4386\0\u029e\0\u43c9\0\u440c\0\u444f\0\u4492"+
    "\0\u44d5\0\u4518\0\u455b\0\u459e\0\u45e1\0\u4624\0\u4667\0\u46aa"+
    "\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u48c2"+
    "\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\u4a97\0\u4ada"+
    "\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c\0\u4caf\0\u4cf2"+
    "\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7\0\u4f0a"+
    "\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u50df\0\u5122"+
    "\0\u5165\0\u51a8\0\u51eb\0\u522e\0\u5271\0\u52b4\0\u52f7\0\u533a"+
    "\0\u537d\0\u53c0\0\u5403\0\u5446\0\u5489\0\u54cc\0\u550f\0\u5552"+
    "\0\u5595\0\u55d8\0\u561b\0\u565e\0\u56a1\0\u56e4\0\u5727\0\u576a"+
    "\0\u57ad\0\u57f0\0\u5833\0\u5876\0\u58b9\0\u58fc\0\u593f\0\u5982"+
    "\0\u59c5\0\u5a08\0\u5a4b\0\u5a8e\0\u5ad1\0\u5b14\0\u5b57\0\u5b9a"+
    "\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6\0\u5ce9\0\u5d2c\0\u5d6f\0\u5db2"+
    "\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe\0\u5f01\0\u5f44\0\u5f87\0\u5fca"+
    "\0\u600d\0\u6050\0\u6093\0\u60d6\0\u6119\0\u615c\0\u619f\0\u61e2"+
    "\0\u6225\0\u6268\0\u62ab\0\u014f\0\u62ee\0\u6331\0\u6374\0\u63b7"+
    "\0\u63fa\0\u643d\0\u6480\0\u64c3\0\u6506\0\u6549\0\u658c\0\u65cf"+
    "\0\u6612\0\u6655\0\u6698\0\u66db\0\u671e\0\u6761\0\u67a4\0\u67e7"+
    "\0\u682a\0\u686d\0\u68b0\0\u68f3\0\u6936\0\u6979\0\u69bc\0\u69ff"+
    "\0\u6a42\0\u6a85\0\u6ac8\0\u6b0b\0\u6b4e\0\u6b91\0\u6bd4\0\u6c17"+
    "\0\u6c5a\0\u6c9d\0\u6ce0\0\u6d23\0\u6d66\0\u6da9\0\u6dec\0\u6e2f"+
    "\0\u6e72\0\u6eb5\0\u6ef8\0\u6f3b\0\u6f7e\0\u6fc1\0\u7004\0\u7047"+
    "\0\u708a\0\u70cd\0\u7110\0\u7153\0\u7196\0\u71d9\0\u721c\0\u725f"+
    "\0\u72a2\0\u72e5\0\u7328\0\u736b\0\u73ae\0\u73f1\0\u7434\0\u7477"+
    "\0\u74ba\0\u74fd\0\u7540\0\u7583\0\u75c6\0\u7609\0\u764c\0\u768f"+
    "\0\u76d2\0\u7715\0\u7758\0\u779b\0\u77de\0\u7821\0\u7864\0\u78a7"+
    "\0\u78ea\0\u792d\0\u7970\0\u79b3\0\u79f6\0\u7a39\0\u7a7c\0\u7abf"+
    "\0\u7b02\0\u7b45\0\u7b88\0\u7bcb\0\u7c0e\0\u7c51\0\u7c94\0\u7cd7"+
    "\0\u7d1a\0\u7d5d\0\u7da0\0\u7de3\0\u7e26\0\u7e69\0\u7eac\0\u7eef"+
    "\0\u7f32\0\u7f75\0\u7fb8\0\u7ffb\0\u803e\0\u8081\0\u80c4\0\u8107"+
    "\0\u814a\0\u818d\0\u81d0\0\u8213\0\u8256\0\u8299\0\u82dc\0\u831f"+
    "\0\u8362\0\u83a5\0\u83e8\0\u842b\0\u846e\0\u84b1\0\u84f4\0\u8537"+
    "\0\u857a\0\u85bd\0\u8600\0\u8643\0\u8686\0\u86c9\0\u870c\0\u874f"+
    "\0\u8792\0\u87d5\0\u8818\0\u885b\0\u889e\0\u88e1\0\u8924\0\u8967"+
    "\0\u89aa\0\u89ed\0\u8a30\0\u8a73\0\u8ab6\0\u8af9\0\u8b3c\0\u8b7f"+
    "\0\u8bc2\0\u8c05\0\u8c48\0\u8c8b\0\u014f\0\u8cce\0\u8d11\0\u8d54"+
    "\0\u8d97\0\u8dda\0\u8e1d\0\u8e60\0\u8ea3\0\u8ee6\0\u87d5\0\u8f29"+
    "\0\u8f6c\0\u8faf\0\u8ff2\0\u9035\0\u9078\0\u90bb\0\u90fe\0\u9141"+
    "\0\u9184\0\u91c7\0\u920a\0\u924d\0\u9290\0\u92d3\0\u9316\0\u9359"+
    "\0\u939c\0\u93df\0\u9422\0\u9465\0\u94a8\0\u94eb\0\u952e\0\u9571"+
    "\0\u95b4\0\u95f7\0\u963a\0\u967d\0\u96c0\0\u9703\0\u9746\0\u9789"+
    "\0\u97cc\0\u980f\0\u9852\0\u9895\0\u98d8\0\u991b\0\u995e\0\u99a1"+
    "\0\u99e4\0\u9a27\0\u9a6a\0\u9aad\0\u9af0\0\u9b33\0\u9b76\0\u9bb9"+
    "\0\u9bfc\0\u9c3f\0\u9c82\0\u9cc5\0\u9d08\0\u9d4b\0\u9d8e\0\u9dd1"+
    "\0\u9e14\0\u9e57\0\u9e9a\0\u9edd\0\u9f20\0\u9f63\0\u9fa6\0\u014f"+
    "\0\u9fe9\0\ua02c\0\ua06f\0\ua0b2\0\ua0f5\0\ua138\0\ua17b\0\ua1be"+
    "\0\ua201\0\ua244\0\ua287\0\ua2ca\0\ua30d\0\ua350\0\ua393\0\ua3d6"+
    "\0\ua419\0\ua45c\0\ua49f\0\ua4e2\0\ua525\0\ua568\0\ua5ab\0\ua5ee"+
    "\0\ua631\0\ua674\0\ua6b7\0\ua6fa\0\ua73d\0\ua780\0\ua7c3\0\ua806"+
    "\0\ua849\0\ua88c\0\ua8cf\0\ua912\0\ua955\0\ua998\0\ua9db\0\uaa1e"+
    "\0\uaa61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[665];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\5\4\2\6\1\4\1\6\4\4\13\6"+
    "\1\4\7\6\3\4\22\6\1\4\2\6\1\7\1\4"+
    "\6\6\1\4\72\10\1\11\10\10\7\12\1\13\2\12"+
    "\1\14\5\12\1\13\2\12\1\14\2\12\2\15\2\16"+
    "\7\12\1\17\3\12\6\17\4\12\2\20\2\21\2\22"+
    "\5\12\1\23\10\12\7\0\1\24\2\0\1\25\5\0"+
    "\1\24\2\0\1\25\2\0\2\26\2\27\25\0\2\30"+
    "\2\31\2\32\20\0\1\33\4\0\1\24\2\0\1\25"+
    "\5\0\1\24\2\0\1\25\2\0\2\26\2\27\25\0"+
    "\2\30\2\31\2\32\130\0\1\24\2\0\1\25\5\0"+
    "\1\24\2\0\1\25\2\0\2\26\2\27\23\0\2\34"+
    "\2\30\2\31\2\32\61\0\1\35\40\0\2\36\3\0"+
    "\1\37\1\40\2\0\1\41\1\0\1\36\3\0\1\40"+
    "\2\0\1\41\2\0\2\42\2\43\3\0\2\44\2\45"+
    "\1\0\1\36\16\0\2\46\2\47\15\0\1\36\61\0"+
    "\2\50\32\0\1\51\10\0\1\51\132\0\2\52\67\0"+
    "\1\17\3\0\6\17\31\0\4\53\1\0\1\54\5\0"+
    "\1\53\24\0\1\55\3\0\6\55\31\0\2\56\3\0"+
    "\1\57\5\0\1\56\13\0\2\60\3\61\2\0\2\62"+
    "\1\0\1\56\20\0\2\63\7\0\2\63\6\0\4\53"+
    "\1\0\1\54\5\0\1\53\11\0\2\64\11\0\1\55"+
    "\3\0\6\55\105\0\2\65\25\0\2\66\3\0\1\67"+
    "\1\70\2\0\1\71\1\0\1\66\3\0\1\70\2\0"+
    "\1\71\2\0\2\72\2\73\3\0\2\74\2\75\1\0"+
    "\1\66\16\0\2\76\2\77\15\0\1\66\61\0\2\100"+
    "\32\0\1\101\10\0\1\101\132\0\2\102\27\0\4\30"+
    "\1\0\1\103\5\0\1\30\24\0\1\104\3\0\6\104"+
    "\31\0\2\105\3\0\1\106\5\0\1\105\13\0\2\107"+
    "\3\110\2\0\2\111\1\0\1\105\20\0\2\112\7\0"+
    "\2\112\6\0\4\30\1\0\1\103\5\0\1\30\11\0"+
    "\2\113\11\0\1\104\3\0\6\104\117\0\3\114\66\0"+
    "\2\115\25\0\2\36\3\0\1\37\1\116\2\0\1\41"+
    "\1\0\1\36\3\0\1\116\2\0\1\41\2\0\2\42"+
    "\2\43\27\0\2\117\2\47\25\0\1\120\10\0\1\120"+
    "\63\0\2\36\3\0\1\37\1\116\2\0\1\41\1\0"+
    "\1\36\3\0\1\116\2\0\1\41\2\0\2\42\2\43"+
    "\3\0\2\121\2\122\1\0\1\36\16\0\2\123\2\47"+
    "\15\0\1\124\61\0\2\125\32\0\1\126\10\0\1\126"+
    "\132\0\2\127\27\0\2\36\3\0\1\37\1\116\2\0"+
    "\1\41\1\0\1\36\3\0\1\116\2\0\1\41\2\0"+
    "\2\42\2\43\10\0\1\36\16\0\2\117\2\47\71\0"+
    "\2\130\27\0\2\131\3\0\1\132\1\116\2\0\1\41"+
    "\1\0\1\131\3\0\1\116\2\0\1\41\2\0\2\42"+
    "\2\133\3\134\2\0\2\135\1\0\1\131\16\0\2\117"+
    "\2\136\7\0\2\63\33\0\2\137\110\0\2\140\56\0"+
    "\1\141\10\0\1\141\105\0\2\142\2\143\60\0\1\144"+
    "\10\0\1\144\123\0\1\55\3\0\6\55\31\0\2\56"+
    "\3\0\1\57\5\0\1\56\46\0\2\63\7\0\2\63"+
    "\14\0\1\145\10\0\1\145\73\0\1\146\10\0\1\146"+
    "\2\0\1\146\140\0\2\147\53\0\2\150\45\0\2\151"+
    "\3\0\1\152\1\153\4\0\1\151\3\0\1\153\21\0"+
    "\1\154\16\0\2\155\31\0\1\156\10\0\1\156\2\0"+
    "\1\156\11\0\2\157\131\0\3\160\12\0\2\66\3\0"+
    "\1\67\1\161\2\0\1\71\1\0\1\66\3\0\1\161"+
    "\2\0\1\71\2\0\2\72\2\73\27\0\2\162\2\77"+
    "\25\0\1\163\10\0\1\163\63\0\2\66\3\0\1\67"+
    "\1\161\2\0\1\71\1\0\1\66\3\0\1\161\2\0"+
    "\1\71\2\0\2\72\2\73\3\0\2\164\2\165\1\0"+
    "\1\66\16\0\2\166\2\77\15\0\1\167\61\0\2\170"+
    "\32\0\1\171\10\0\1\171\132\0\2\172\27\0\2\66"+
    "\3\0\1\67\1\161\2\0\1\71\1\0\1\66\3\0"+
    "\1\161\2\0\1\71\2\0\2\72\2\73\10\0\1\66"+
    "\16\0\2\162\2\77\71\0\2\173\27\0\2\174\3\0"+
    "\1\175\1\161\2\0\1\71\1\0\1\174\3\0\1\161"+
    "\2\0\1\71\2\0\2\72\2\176\3\177\2\0\2\200"+
    "\1\0\1\174\16\0\2\162\2\201\7\0\2\112\33\0"+
    "\2\202\110\0\2\203\56\0\1\204\10\0\1\204\105\0"+
    "\2\205\2\206\60\0\1\207\10\0\1\207\63\0\2\210"+
    "\3\0\1\211\5\0\1\210\11\0\2\212\11\0\1\104"+
    "\1\0\2\213\6\104\17\0\1\214\11\0\2\105\3\0"+
    "\1\106\5\0\1\105\46\0\2\112\7\0\2\112\14\0"+
    "\1\215\10\0\1\215\73\0\1\216\10\0\1\216\2\0"+
    "\1\216\140\0\2\217\53\0\2\220\45\0\2\221\2\30"+
    "\1\0\1\222\1\223\4\0\1\221\3\0\1\223\20\0"+
    "\1\104\1\221\2\0\6\104\4\0\2\30\2\224\2\30"+
    "\27\0\1\225\10\0\1\225\2\0\1\225\11\0\2\226"+
    "\51\0\1\227\10\0\1\227\151\0\3\230\12\0\2\124"+
    "\3\0\1\231\1\121\4\0\1\124\3\0\1\121\14\0"+
    "\2\121\2\122\1\0\1\124\16\0\2\232\17\0\1\124"+
    "\1\0\2\56\3\0\1\57\5\0\1\56\13\0\2\233"+
    "\3\134\2\0\2\135\1\0\1\56\20\0\2\63\7\0"+
    "\2\63\15\0\1\234\10\0\1\234\62\0\2\124\3\0"+
    "\1\231\5\0\1\124\25\0\1\124\16\0\2\235\73\0"+
    "\2\236\27\0\2\237\3\0\1\240\5\0\1\237\13\0"+
    "\2\233\3\134\2\0\2\135\1\0\1\237\16\0\2\235"+
    "\2\63\7\0\2\63\6\0\2\124\3\0\1\231\5\0"+
    "\1\124\44\0\2\235\55\0\2\241\56\0\1\242\10\0"+
    "\1\242\105\0\2\243\2\244\52\0\2\36\3\0\1\37"+
    "\1\116\2\0\1\41\1\0\1\36\3\0\1\116\2\0"+
    "\1\41\2\0\2\42\2\245\10\0\1\36\16\0\2\117"+
    "\2\47\17\0\2\131\3\0\1\132\1\116\2\0\1\41"+
    "\1\0\1\131\3\0\1\116\2\0\1\41\2\0\2\42"+
    "\2\43\27\0\2\117\2\136\7\0\2\63\14\0\1\246"+
    "\10\0\1\246\73\0\1\247\10\0\1\247\2\0\1\247"+
    "\25\0\2\127\111\0\2\250\53\0\2\251\45\0\2\151"+
    "\3\0\1\152\1\153\4\0\1\151\3\0\1\153\5\0"+
    "\2\137\12\0\1\154\16\0\2\155\31\0\1\252\10\0"+
    "\1\252\2\0\1\252\11\0\2\253\51\0\1\254\10\0"+
    "\1\254\32\0\2\255\6\0\2\256\73\0\2\257\33\0"+
    "\1\260\10\0\1\260\73\0\1\60\10\0\1\60\2\0"+
    "\1\60\65\0\1\261\10\0\1\261\71\0\1\262\10\0"+
    "\1\262\107\0\1\263\1\0\1\263\2\0\1\263\1\0"+
    "\1\263\46\0\2\151\3\0\1\152\1\153\4\0\1\151"+
    "\3\0\1\153\14\0\2\264\3\0\1\154\16\0\2\155"+
    "\75\0\2\265\25\0\2\151\3\0\1\152\1\153\4\0"+
    "\1\151\3\0\1\153\40\0\2\155\27\0\1\266\10\0"+
    "\1\266\71\0\1\267\10\0\1\267\14\0\2\267\2\270"+
    "\1\0\1\271\16\0\2\267\17\0\1\271\32\0\3\272"+
    "\101\0\1\154\1\0\1\154\56\0\1\273\10\0\1\273"+
    "\2\0\1\273\64\0\1\274\10\0\1\274\63\0\2\167"+
    "\3\0\1\275\1\164\4\0\1\167\3\0\1\164\14\0"+
    "\2\164\2\165\1\0\1\167\16\0\2\276\17\0\1\167"+
    "\1\0\2\105\3\0\1\106\5\0\1\105\13\0\2\277"+
    "\3\177\2\0\2\200\1\0\1\105\20\0\2\112\7\0"+
    "\2\112\15\0\1\300\10\0\1\300\62\0\2\167\3\0"+
    "\1\275\5\0\1\167\25\0\1\167\16\0\2\301\73\0"+
    "\2\302\27\0\2\303\3\0\1\304\5\0\1\303\13\0"+
    "\2\277\3\177\2\0\2\200\1\0\1\303\16\0\2\301"+
    "\2\112\7\0\2\112\6\0\2\167\3\0\1\275\5\0"+
    "\1\167\44\0\2\301\55\0\2\305\56\0\1\306\10\0"+
    "\1\306\105\0\2\307\2\310\52\0\2\66\3\0\1\67"+
    "\1\161\2\0\1\71\1\0\1\66\3\0\1\161\2\0"+
    "\1\71\2\0\2\72\2\311\10\0\1\66\16\0\2\162"+
    "\2\77\17\0\2\174\3\0\1\175\1\161\2\0\1\71"+
    "\1\0\1\174\3\0\1\161\2\0\1\71\2\0\2\72"+
    "\2\73\27\0\2\162\2\201\7\0\2\112\14\0\1\312"+
    "\10\0\1\312\73\0\1\313\10\0\1\313\2\0\1\313"+
    "\25\0\2\172\111\0\2\314\53\0\2\315\45\0\2\221"+
    "\2\30\1\0\1\222\1\223\4\0\1\221\3\0\1\223"+
    "\5\0\2\202\11\0\1\104\1\221\2\0\6\104\4\0"+
    "\2\30\2\224\2\30\27\0\1\316\10\0\1\316\2\0"+
    "\1\316\11\0\2\317\51\0\1\320\10\0\1\320\32\0"+
    "\2\321\6\0\2\322\73\0\2\323\33\0\1\324\10\0"+
    "\1\324\73\0\1\107\10\0\1\107\2\0\1\107\65\0"+
    "\1\325\10\0\1\325\62\0\2\210\3\0\1\211\5\0"+
    "\1\210\11\0\2\212\13\0\2\213\25\0\1\214\17\0"+
    "\1\326\10\0\1\326\71\0\1\327\10\0\1\327\63\0"+
    "\2\213\2\0\1\330\1\331\5\0\1\213\24\0\1\332"+
    "\3\0\1\333\3\332\1\334\1\332\105\0\2\335\34\0"+
    "\1\336\10\0\1\336\107\0\1\337\1\0\1\337\2\0"+
    "\1\337\1\0\1\337\46\0\2\221\2\30\1\0\1\222"+
    "\1\223\4\0\1\221\3\0\1\223\14\0\2\340\2\0"+
    "\1\104\1\221\2\0\6\104\4\0\2\30\2\224\2\30"+
    "\73\0\2\341\25\0\2\221\2\30\1\0\1\222\1\223"+
    "\4\0\1\221\3\0\1\223\20\0\1\104\3\0\6\104"+
    "\4\0\2\30\2\224\2\30\25\0\1\342\10\0\1\342"+
    "\63\0\2\343\2\30\1\0\1\344\1\345\4\0\1\343"+
    "\3\0\1\345\14\0\2\345\2\346\1\104\1\343\2\0"+
    "\6\104\4\0\2\30\2\345\2\30\15\0\1\343\32\0"+
    "\3\347\101\0\1\221\1\0\1\221\56\0\1\350\10\0"+
    "\1\350\2\0\1\350\73\0\1\351\73\0\1\352\10\0"+
    "\1\352\71\0\1\353\10\0\1\353\63\0\2\354\3\0"+
    "\1\355\5\0\1\354\25\0\1\354\16\0\2\235\2\356"+
    "\7\0\2\356\16\0\1\247\10\0\1\247\2\0\1\247"+
    "\66\0\1\357\10\0\1\357\2\0\1\357\56\0\2\360"+
    "\3\0\1\361\5\0\1\360\25\0\1\360\20\0\2\356"+
    "\7\0\2\356\6\0\2\124\3\0\1\231\5\0\1\124"+
    "\13\0\2\362\10\0\1\124\16\0\2\235\21\0\2\237"+
    "\3\0\1\240\5\0\1\237\44\0\2\235\2\63\7\0"+
    "\2\63\14\0\1\363\10\0\1\363\71\0\1\364\10\0"+
    "\1\364\32\0\2\365\6\0\2\366\73\0\2\367\33\0"+
    "\1\370\10\0\1\370\73\0\1\233\10\0\1\233\2\0"+
    "\1\233\130\0\2\127\4\0\2\371\30\0\1\372\10\0"+
    "\1\372\107\0\1\373\1\0\1\373\2\0\1\373\1\0"+
    "\1\373\46\0\2\374\3\0\1\375\5\0\1\374\20\0"+
    "\2\376\3\0\1\377\16\0\2\u0100\75\0\2\u0101\57\0"+
    "\1\377\1\0\1\377\56\0\1\u0102\10\0\1\u0102\2\0"+
    "\1\u0102\114\0\2\u0103\101\0\2\u0104\72\0\2\u0105\10\0"+
    "\1\154\102\0\1\154\66\0\2\u0106\64\0\1\u0107\10\0"+
    "\1\u0107\2\0\1\u0107\66\0\1\u0108\10\0\1\u0108\2\0"+
    "\1\u0108\56\0\4\263\1\0\1\u0109\1\u010a\2\0\1\u010b"+
    "\4\263\1\0\1\u010a\2\0\1\u010b\2\0\2\u010c\31\0"+
    "\2\u010d\2\u010e\5\0\1\u010f\71\0\2\u0110\55\0\2\154"+
    "\54\0\1\u0111\10\0\1\u0111\123\0\1\271\113\0\2\u0112"+
    "\65\0\2\u0113\70\0\1\154\1\0\1\154\70\0\1\u0114"+
    "\73\0\1\u0115\10\0\1\u0115\63\0\2\u0116\3\0\1\u0117"+
    "\5\0\1\u0116\25\0\1\u0116\16\0\2\301\2\u0118\7\0"+
    "\2\u0118\16\0\1\313\10\0\1\313\2\0\1\313\66\0"+
    "\1\u0119\10\0\1\u0119\2\0\1\u0119\56\0\2\u011a\3\0"+
    "\1\u011b\5\0\1\u011a\25\0\1\u011a\20\0\2\u0118\7\0"+
    "\2\u0118\6\0\2\167\3\0\1\275\5\0\1\167\13\0"+
    "\2\u011c\10\0\1\167\16\0\2\301\21\0\2\303\3\0"+
    "\1\304\5\0\1\303\44\0\2\301\2\112\7\0\2\112"+
    "\14\0\1\u011d\10\0\1\u011d\71\0\1\u011e\10\0\1\u011e"+
    "\32\0\2\u011f\6\0\2\u0120\73\0\2\u0121\33\0\1\u0122"+
    "\10\0\1\u0122\73\0\1\277\10\0\1\277\2\0\1\277"+
    "\130\0\2\172\4\0\2\u0123\30\0\1\u0124\10\0\1\u0124"+
    "\107\0\1\u0125\1\0\1\u0125\2\0\1\u0125\1\0\1\u0125"+
    "\46\0\2\u0126\2\30\1\0\1\u0127\5\0\1\u0126\20\0"+
    "\2\u0128\2\0\1\104\1\u0126\2\0\6\104\4\0\2\30"+
    "\2\u0129\2\30\73\0\2\u012a\57\0\1\u0126\1\0\1\u0126"+
    "\56\0\1\u012b\10\0\1\u012b\2\0\1\u012b\114\0\2\u012c"+
    "\101\0\2\u012d\72\0\2\u012e\10\0\1\221\102\0\1\221"+
    "\66\0\2\u012f\64\0\1\u0130\10\0\1\u0130\2\0\1\u0130"+
    "\65\0\1\u0131\10\0\1\u0131\70\0\1\u0132\10\0\1\u0132"+
    "\123\0\1\332\3\0\6\332\37\0\1\u0133\10\0\1\u0133"+
    "\123\0\1\u0134\3\0\6\u0134\71\0\1\u0134\3\0\1\u0134"+
    "\1\u0135\1\u0134\1\u0136\2\u0134\71\0\1\u0134\3\0\5\u0134"+
    "\1\u0137\117\0\3\u0138\22\0\1\u0139\10\0\1\u0139\2\0"+
    "\1\u0139\56\0\4\337\1\0\1\u013a\1\u013b\2\0\1\u013c"+
    "\4\337\1\0\1\u013b\2\0\1\u013c\2\0\2\26\31\0"+
    "\2\u013d\2\u013e\5\0\1\u013f\71\0\2\u0140\55\0\2\221"+
    "\54\0\1\u0141\10\0\1\u0141\62\0\2\343\2\30\1\0"+
    "\1\344\5\0\1\343\24\0\1\104\3\0\6\104\4\0"+
    "\2\30\2\0\2\30\25\0\1\u0142\10\0\1\u0142\63\0"+
    "\2\343\2\30\1\0\1\344\5\0\1\343\24\0\1\104"+
    "\1\343\2\0\6\104\4\0\2\30\2\0\2\30\71\0"+
    "\2\u0143\65\0\2\u0144\70\0\1\221\1\0\1\221\56\0"+
    "\1\u0145\2\0\2\u0145\1\0\1\u0145\11\0\2\u0145\1\0"+
    "\1\u0145\1\0\1\u0145\2\0\1\u0145\1\0\1\u0145\1\0"+
    "\1\u0145\13\0\1\u0145\1\0\1\u0145\1\0\1\u0145\1\0"+
    "\1\u0145\1\0\1\u0145\1\0\1\u0145\2\0\1\u0145\3\0"+
    "\1\u0145\1\0\1\u0145\1\0\1\u0145\11\0\1\u0146\10\0"+
    "\1\u0146\62\0\2\354\3\0\1\355\5\0\1\354\44\0"+
    "\2\235\2\356\7\0\2\356\14\0\1\u0147\10\0\1\u0147"+
    "\63\0\2\374\3\0\1\375\5\0\1\374\25\0\1\377"+
    "\16\0\2\u0100\32\0\1\u0148\10\0\1\u0148\60\0\2\360"+
    "\3\0\1\361\5\0\1\360\46\0\2\356\7\0\2\356"+
    "\14\0\1\u0149\10\0\1\u0149\143\0\2\u014a\30\0\1\u014b"+
    "\10\0\1\u014b\120\0\2\u014c\101\0\2\u014d\72\0\2\u014e"+
    "\10\0\1\377\102\0\1\377\66\0\2\u014f\105\0\5\36"+
    "\55\0\1\u0150\10\0\1\u0150\2\0\1\u0150\56\0\4\373"+
    "\1\0\1\u0151\1\116\2\0\1\u0152\4\373\1\0\1\116"+
    "\2\0\1\u0152\2\0\2\42\31\0\2\u0153\2\47\5\0"+
    "\1\u0154\11\0\2\374\3\0\1\375\5\0\1\374\44\0"+
    "\2\u0100\27\0\1\u0155\10\0\1\u0155\143\0\2\u0156\52\0"+
    "\3\u0157\103\0\2\377\72\0\1\377\1\0\1\377\61\0"+
    "\1\u0158\10\0\1\u0158\137\0\2\u0159\35\0\1\u015a\10\0"+
    "\1\u015a\2\0\1\u015a\37\0\2\u015b\73\0\2\146\34\0"+
    "\1\u015c\10\0\1\u015c\71\0\1\u015d\10\0\1\u015d\66\0"+
    "\1\u015e\10\0\1\u015e\63\0\2\u015f\3\0\1\u0160\1\u0161"+
    "\4\0\1\u015f\3\0\1\u0161\14\0\2\u0161\2\u0162\1\0"+
    "\1\u015f\16\0\2\u0163\17\0\1\u015f\61\0\2\u0164\21\0"+
    "\2\56\3\0\1\57\5\0\1\56\15\0\3\61\2\0"+
    "\2\62\1\0\1\56\20\0\2\63\7\0\2\63\33\0"+
    "\2\64\130\0\2\u0165\35\0\1\156\10\0\1\156\2\0"+
    "\1\156\33\0\2\u0166\31\0\1\u0167\10\0\1\u0167\2\0"+
    "\1\u0167\105\0\2\u0168\10\0\1\271\47\0\1\u0169\10\0"+
    "\1\u0169\66\0\1\u016a\2\0\2\u016a\1\0\1\u016a\11\0"+
    "\2\u016a\1\0\1\u016a\1\0\1\u016a\2\0\1\u016a\1\0"+
    "\1\u016a\1\0\1\u016a\13\0\1\u016a\1\0\1\u016a\1\0"+
    "\1\u016a\1\0\1\u016a\1\0\1\u016a\1\0\1\u016a\2\0"+
    "\1\u016a\3\0\1\u016a\1\0\1\u016a\1\0\1\u016a\11\0"+
    "\1\u016b\10\0\1\u016b\62\0\2\u0116\3\0\1\u0117\5\0"+
    "\1\u0116\44\0\2\301\2\u0118\7\0\2\u0118\14\0\1\u016c"+
    "\10\0\1\u016c\63\0\2\u0126\2\30\1\0\1\u0127\5\0"+
    "\1\u0126\24\0\1\104\1\u0126\2\0\6\104\4\0\2\30"+
    "\2\u0129\2\30\30\0\1\u016d\10\0\1\u016d\60\0\2\u011a"+
    "\3\0\1\u011b\5\0\1\u011a\46\0\2\u0118\7\0\2\u0118"+
    "\14\0\1\u016e\10\0\1\u016e\143\0\2\u016f\30\0\1\u0170"+
    "\10\0\1\u0170\120\0\2\u0171\101\0\2\u0172\72\0\2\u0173"+
    "\10\0\1\u0126\102\0\1\u0126\66\0\2\u0174\105\0\5\66"+
    "\55\0\1\u0175\10\0\1\u0175\2\0\1\u0175\56\0\4\u0125"+
    "\1\0\1\u0176\1\161\2\0\1\u0177\4\u0125\1\0\1\161"+
    "\2\0\1\u0177\2\0\2\72\31\0\2\u0178\2\77\5\0"+
    "\1\u0179\11\0\2\u0126\2\30\1\0\1\u0127\5\0\1\u0126"+
    "\24\0\1\104\3\0\6\104\4\0\2\30\2\u0129\2\30"+
    "\25\0\1\u017a\10\0\1\u017a\143\0\2\u017b\52\0\3\u017c"+
    "\103\0\2\u0126\72\0\1\u0126\1\0\1\u0126\61\0\1\u017d"+
    "\10\0\1\u017d\137\0\2\u017e\35\0\1\u017f\10\0\1\u017f"+
    "\2\0\1\u017f\37\0\2\u0180\73\0\2\216\34\0\1\u0181"+
    "\10\0\1\u0181\70\0\1\u0182\10\0\1\u0182\2\0\1\u0182"+
    "\112\0\2\213\54\0\1\u0183\10\0\1\u0183\61\0\1\u0184"+
    "\1\u0185\5\u0184\2\0\1\u0184\1\0\4\u0184\13\0\1\u0184"+
    "\7\0\3\u0184\22\0\1\u0184\2\0\2\u0184\6\0\2\u0184"+
    "\1\u0185\5\u0184\2\0\1\u0184\1\0\4\u0184\13\0\1\u0184"+
    "\7\0\3\u0184\1\0\3\332\16\0\1\u0184\2\0\2\u0184"+
    "\6\0\2\u0184\1\u0185\5\u0184\2\0\1\u0184\1\0\4\u0184"+
    "\13\0\1\u0184\6\0\1\332\3\u0184\6\332\14\0\1\u0184"+
    "\2\0\2\u0184\6\0\2\u0184\1\u0185\5\u0184\2\0\1\u0184"+
    "\1\0\4\u0184\13\0\1\u0184\7\0\3\u0184\1\332\3\0"+
    "\2\332\14\0\1\u0184\2\0\2\u0184\6\0\1\u0184\7\0"+
    "\1\u0186\10\0\1\u0186\74\0\1\u0187\10\0\1\u0187\66\0"+
    "\1\u0188\10\0\1\u0188\63\0\2\u0189\3\0\1\u018a\1\u018b"+
    "\4\0\1\u0189\3\0\1\u018b\14\0\2\u018b\2\u018c\1\0"+
    "\1\u0189\16\0\2\u018d\17\0\1\u0189\61\0\2\u018e\21\0"+
    "\2\105\3\0\1\106\5\0\1\105\15\0\3\110\2\0"+
    "\2\111\1\0\1\105\20\0\2\112\7\0\2\112\33\0"+
    "\2\113\130\0\2\u018f\35\0\1\225\10\0\1\225\2\0"+
    "\1\225\33\0\2\u0190\31\0\1\u0191\10\0\1\u0191\2\0"+
    "\1\u0191\65\0\1\u0192\10\0\1\u0192\62\0\2\343\2\30"+
    "\1\0\1\344\5\0\1\343\13\0\2\u0193\7\0\1\104"+
    "\1\343\2\0\6\104\4\0\2\30\2\0\2\30\25\0"+
    "\1\u0194\10\0\1\u0194\66\0\1\u0145\2\0\2\u0145\1\0"+
    "\1\u0145\3\0\1\u0195\5\0\2\u0145\1\0\1\u0145\1\0"+
    "\1\u0145\2\0\1\u0145\1\0\1\u0145\1\0\1\u0145\13\0"+
    "\1\u0145\1\0\1\u0145\1\0\1\u0145\1\0\1\u0145\1\0"+
    "\1\u0145\1\0\1\u0145\2\0\1\u0145\3\0\1\u0145\1\0"+
    "\1\u0145\1\0\1\u0145\12\0\1\u0196\10\0\1\u0196\2\0"+
    "\1\u0196\65\0\1\u0197\10\0\1\u0197\74\0\1\36\77\0"+
    "\1\u0198\10\0\1\u0198\113\0\5\124\55\0\1\u0199\10\0"+
    "\1\u0199\2\0\1\u0199\64\0\1\u019a\10\0\1\u019a\137\0"+
    "\2\u019b\35\0\1\u019c\10\0\1\u019c\2\0\1\u019c\37\0"+
    "\2\u019d\73\0\2\247\34\0\1\u019e\10\0\1\u019e\66\0"+
    "\1\u019f\10\0\1\u019f\143\0\2\u01a0\21\0\2\360\3\0"+
    "\1\361\5\0\1\360\15\0\3\134\2\0\2\135\1\0"+
    "\1\360\20\0\2\356\7\0\2\356\62\0\2\u01a1\34\0"+
    "\1\u01a2\10\0\1\u01a2\72\0\1\252\10\0\1\252\2\0"+
    "\1\252\33\0\2\u01a3\57\0\2\u01a4\125\0\2\u01a5\112\0"+
    "\2\260\16\0\1\156\10\0\1\156\2\0\1\156\107\0"+
    "\3\u01a6\61\0\1\53\102\0\1\56\77\0\1\u01a7\10\0"+
    "\1\u01a7\62\0\2\u015f\3\0\1\u0160\5\0\1\u015f\44\0"+
    "\2\u01a8\27\0\1\u01a9\10\0\1\u01a9\63\0\2\u015f\3\0"+
    "\1\u0160\5\0\1\u015f\25\0\1\u015f\16\0\2\u01a8\73\0"+
    "\2\u01aa\27\0\2\u01ab\3\0\1\u01ac\5\0\1\u01ab\25\0"+
    "\1\u01ab\16\0\2\u01a8\2\63\7\0\2\63\42\0\2\u01ad"+
    "\133\0\3\u01ae\41\0\2\u01af\63\0\1\u01b0\10\0\1\u01b0"+
    "\140\0\2\u01b1\52\0\3\u01b2\52\0\1\u016a\2\0\2\u016a"+
    "\1\0\1\u016a\3\0\1\u01b3\5\0\2\u016a\1\0\1\u016a"+
    "\1\0\1\u016a\2\0\1\u016a\1\0\1\u016a\1\0\1\u016a"+
    "\13\0\1\u016a\1\0\1\u016a\1\0\1\u016a\1\0\1\u016a"+
    "\1\0\1\u016a\1\0\1\u016a\2\0\1\u016a\3\0\1\u016a"+
    "\1\0\1\u016a\1\0\1\u016a\12\0\1\u01b4\10\0\1\u01b4"+
    "\2\0\1\u01b4\65\0\1\u01b5\10\0\1\u01b5\74\0\1\66"+
    "\77\0\1\u01b6\10\0\1\u01b6\113\0\5\167\55\0\1\u01b7"+
    "\10\0\1\u01b7\2\0\1\u01b7\64\0\1\u01b8\10\0\1\u01b8"+
    "\137\0\2\u01b9\35\0\1\u01ba\10\0\1\u01ba\2\0\1\u01ba"+
    "\37\0\2\u01bb\73\0\2\313\34\0\1\u01bc\10\0\1\u01bc"+
    "\66\0\1\u01bd\10\0\1\u01bd\143\0\2\u01be\21\0\2\u011a"+
    "\3\0\1\u011b\5\0\1\u011a\15\0\3\177\2\0\2\200"+
    "\1\0\1\u011a\20\0\2\u0118\7\0\2\u0118\62\0\2\u01bf"+
    "\34\0\1\u01c0\10\0\1\u01c0\72\0\1\316\10\0\1\316"+
    "\2\0\1\316\33\0\2\u01c1\57\0\2\u01c2\125\0\2\u01c3"+
    "\112\0\2\324\16\0\1\225\10\0\1\225\2\0\1\225"+
    "\107\0\3\u01c4\61\0\1\30\101\0\1\u01c5\10\0\1\u01c5"+
    "\70\0\1\u01c6\10\0\1\u01c6\2\0\1\u01c6\57\0\1\u0184"+
    "\116\0\1\u01c7\77\0\1\105\77\0\1\u01c8\10\0\1\u01c8"+
    "\62\0\2\u0189\3\0\1\u018a\5\0\1\u0189\44\0\2\u01c9"+
    "\27\0\1\u01ca\10\0\1\u01ca\63\0\2\u0189\3\0\1\u018a"+
    "\5\0\1\u0189\25\0\1\u0189\16\0\2\u01c9\73\0\2\u01cb"+
    "\27\0\2\u01cc\3\0\1\u01cd\5\0\1\u01cc\25\0\1\u01cc"+
    "\16\0\2\u01c9\2\112\7\0\2\112\42\0\2\u01ce\133\0"+
    "\3\u01cf\41\0\2\u01d0\63\0\1\u01d1\10\0\1\u01d1\70\0"+
    "\1\u01d2\10\0\1\u01d2\2\0\1\u01d2\136\0\2\u01d3\52\0"+
    "\3\u01d4\51\0\2\u0195\2\0\2\u0195\1\0\1\u0195\3\0"+
    "\1\u01d5\5\0\2\u0195\1\0\1\u0195\1\0\1\u0195\2\0"+
    "\1\u0195\1\0\1\u0195\1\0\2\u0195\3\0\6\u0195\1\0"+
    "\1\u0195\1\0\1\u0195\1\0\1\u0195\1\0\1\u0195\1\0"+
    "\1\u0195\1\0\1\u0195\2\0\1\u0195\3\0\1\u0195\1\0"+
    "\1\u0195\1\0\1\u0195\13\0\1\u01d6\10\0\1\u01d6\70\0"+
    "\1\u01d7\10\0\1\u01d7\2\0\1\u01d7\66\0\1\u01d8\10\0"+
    "\1\u01d8\2\0\1\u01d8\67\0\1\u01d9\10\0\1\u01d9\142\0"+
    "\2\u01da\112\0\2\370\16\0\1\252\10\0\1\252\2\0"+
    "\1\252\107\0\3\u01db\61\0\1\131\77\0\1\u01dc\10\0"+
    "\1\u01dc\116\0\2\u01dd\133\0\3\u01de\22\0\1\u01df\10\0"+
    "\1\u01df\2\0\1\u01df\105\0\2\u01e0\60\0\1\u01e1\10\0"+
    "\1\u01e1\114\0\3\260\121\0\2\u01e2\37\0\1\u01e3\10\0"+
    "\1\u01e3\2\0\1\u01e3\56\0\2\56\3\0\1\57\5\0"+
    "\1\56\25\0\1\56\20\0\2\63\7\0\2\63\15\0"+
    "\1\u01e4\10\0\1\u01e4\62\0\2\u015f\3\0\1\u0160\5\0"+
    "\1\u015f\13\0\2\u01e5\10\0\1\u015f\16\0\2\u01a8\21\0"+
    "\2\u01ab\3\0\1\u01ac\5\0\1\u01ab\44\0\2\u01a8\2\63"+
    "\7\0\2\63\14\0\1\u01e6\10\0\1\u01e6\145\0\2\256"+
    "\25\0\1\u01e7\10\0\1\u01e7\71\0\1\u01e8\10\0\1\u01e8"+
    "\75\0\1\151\121\0\5\271\123\0\2\u01e9\25\0\2\u01b3"+
    "\2\0\2\u01b3\1\0\1\u01b3\3\0\1\u01ea\5\0\2\u01b3"+
    "\1\0\1\u01b3\1\0\1\u01b3\2\0\1\u01b3\1\0\1\u01b3"+
    "\1\0\2\u01b3\3\0\6\u01b3\1\0\1\u01b3\1\0\1\u01b3"+
    "\1\0\1\u01b3\1\0\1\u01b3\1\0\1\u01b3\1\0\1\u01b3"+
    "\2\0\1\u01b3\3\0\1\u01b3\1\0\1\u01b3\1\0\1\u01b3"+
    "\13\0\1\u01eb\10\0\1\u01eb\70\0\1\u01ec\10\0\1\u01ec"+
    "\2\0\1\u01ec\66\0\1\u01ed\10\0\1\u01ed\2\0\1\u01ed"+
    "\67\0\1\u01ee\10\0\1\u01ee\142\0\2\u01ef\112\0\2\u0122"+
    "\16\0\1\316\10\0\1\316\2\0\1\316\107\0\3\u01f0"+
    "\61\0\1\174\77\0\1\u01f1\10\0\1\u01f1\116\0\2\u01f2"+
    "\133\0\3\u01f3\22\0\1\u01f4\10\0\1\u01f4\2\0\1\u01f4"+
    "\105\0\2\u01f5\60\0\1\u01f6\10\0\1\u01f6\114\0\3\324"+
    "\121\0\2\u01f7\41\0\1\210\101\0\1\u01f8\10\0\1\u01f8"+
    "\70\0\1\u01f9\10\0\1\u01f9\2\0\1\u01f9\66\0\1\u01fa"+
    "\10\0\1\u01fa\2\0\1\u01fa\56\0\2\105\3\0\1\106"+
    "\5\0\1\105\25\0\1\105\20\0\2\112\7\0\2\112"+
    "\15\0\1\u01fb\10\0\1\u01fb\62\0\2\u0189\3\0\1\u018a"+
    "\5\0\1\u0189\13\0\2\u01fc\10\0\1\u0189\16\0\2\u01c9"+
    "\21\0\2\u01cc\3\0\1\u01cd\5\0\1\u01cc\44\0\2\u01c9"+
    "\2\112\7\0\2\112\14\0\1\u01fd\10\0\1\u01fd\145\0"+
    "\2\322\25\0\1\u01fe\10\0\1\u01fe\71\0\1\u01ff\10\0"+
    "\1\u01ff\75\0\1\221\101\0\1\u0200\10\0\1\u0200\111\0"+
    "\5\343\123\0\2\u0201\63\0\1\u0202\3\0\6\u0202\43\0"+
    "\1\124\101\0\1\u0203\10\0\1\u0203\71\0\1\u0204\10\0"+
    "\1\u0204\72\0\1\237\121\0\3\370\121\0\2\u0205\37\0"+
    "\1\u0206\10\0\1\u0206\2\0\1\u0206\140\0\2\366\25\0"+
    "\1\u0207\10\0\1\u0207\74\0\1\u0208\10\0\1\u0208\66\0"+
    "\1\u0209\10\0\1\u0209\114\0\3\u020a\76\0\2\u020b\63\0"+
    "\1\u020c\10\0\1\u020c\70\0\1\u020d\10\0\1\u020d\2\0"+
    "\1\u020d\136\0\2\u020e\30\0\1\u020f\10\0\1\u020f\77\0"+
    "\1\u0210\143\0\2\u0211\52\0\1\u0212\2\0\1\u0212\110\0"+
    "\1\u0213\3\0\6\u0213\43\0\1\167\101\0\1\u0214\10\0"+
    "\1\u0214\71\0\1\u0215\10\0\1\u0215\72\0\1\303\121\0"+
    "\3\u0122\121\0\2\u0216\37\0\1\u0217\10\0\1\u0217\2\0"+
    "\1\u0217\140\0\2\u0120\25\0\1\u0218\10\0\1\u0218\74\0"+
    "\1\u0219\10\0\1\u0219\66\0\1\u021a\10\0\1\u021a\114\0"+
    "\3\u021b\76\0\2\u021c\64\0\1\213\146\0\2\u021d\34\0"+
    "\1\u021e\10\0\1\u021e\70\0\1\u021f\10\0\1\u021f\2\0"+
    "\1\u021f\136\0\2\u0220\30\0\1\u0221\10\0\1\u0221\77\0"+
    "\1\u0222\143\0\2\u0223\35\0\1\343\117\0\1\u0224\2\0"+
    "\1\u0224\110\0\1\u0202\3\0\6\u0202\20\0\1\u0225\22\0"+
    "\1\354\102\0\1\360\117\0\2\u0226\63\0\1\u0227\10\0"+
    "\1\u0227\75\0\1\u0228\77\0\1\374\146\0\2\u0229\101\0"+
    "\2\u022a\31\0\1\u022b\10\0\1\u022b\75\0\1\263\101\0"+
    "\1\u022c\10\0\1\u022c\111\0\5\u015f\55\0\1\u022d\10\0"+
    "\1\u022d\2\0\1\u022d\66\0\1\u022e\10\0\1\u022e\2\0"+
    "\1\u022e\105\0\2\154\52\0\2\u022f\3\0\1\u0230\1\153"+
    "\4\0\1\u022f\3\0\1\153\123\0\1\u0213\3\0\6\u0213"+
    "\20\0\1\u0231\22\0\1\u0116\102\0\1\u011a\117\0\2\u0232"+
    "\63\0\1\u0233\10\0\1\u0233\75\0\1\u0234\77\0\1\u0126"+
    "\146\0\2\u0235\101\0\2\u0236\31\0\1\u0237\10\0\1\u0237"+
    "\74\0\1\u0238\10\0\1\u0238\72\0\1\337\101\0\1\u0239"+
    "\10\0\1\u0239\111\0\5\u0189\55\0\1\u023a\10\0\1\u023a"+
    "\2\0\1\u023a\66\0\1\u023b\10\0\1\u023b\2\0\1\u023b"+
    "\105\0\2\221\52\0\2\u0224\2\30\1\0\1\u023c\1\223"+
    "\4\0\1\u0224\3\0\1\223\20\0\1\104\3\0\6\104"+
    "\4\0\2\30\2\0\2\30\25\0\1\u023d\10\0\1\u023d"+
    "\75\0\1\373\100\0\1\u023e\10\0\1\u023e\2\0\1\u023e"+
    "\105\0\2\377\101\0\1\271\2\0\1\271\126\0\2\156"+
    "\35\0\1\u015f\101\0\1\u023f\10\0\1\u023f\136\0\2\u0240"+
    "\31\0\1\u0241\10\0\1\u0241\62\0\72\u0242\1\0\10\u0242"+
    "\7\0\1\u0243\10\0\1\u0243\75\0\1\u0125\100\0\1\u0244"+
    "\10\0\1\u0244\2\0\1\u0244\105\0\2\u0126\101\0\1\343"+
    "\2\0\1\343\126\0\2\225\122\0\2\u0245\14\0\1\u0189"+
    "\101\0\1\u0246\10\0\1\u0246\136\0\2\u0247\31\0\1\u0248"+
    "\10\0\1\u0248\141\0\2\252\101\0\2\u0249\35\0\1\u01ab"+
    "\101\0\1\u024a\10\0\1\u024a\67\0\1\u024b\10\0\1\u024b"+
    "\61\0\72\u0242\1\u024c\10\u0242\57\0\2\316\101\0\2\u024d"+
    "\40\0\1\u024e\77\0\1\u01cc\101\0\1\u024f\10\0\1\u024f"+
    "\67\0\1\u0250\10\0\1\u0250\73\0\1\u0251\10\0\1\u0251"+
    "\157\0\2\u0252\12\0\1\u0253\10\0\1\u0253\2\0\1\u0253"+
    "\120\0\1\u0254\51\0\1\u0255\10\0\1\u0255\111\0\3\u0256"+
    "\2\u0257\144\0\2\u0258\12\0\1\u0259\10\0\1\u0259\2\0"+
    "\1\u0259\155\0\2\u025a\17\0\1\u025b\76\0\1\u025c\10\0"+
    "\1\u025c\134\0\2\u025d\124\0\2\u025e\10\0\1\u025f\10\0"+
    "\1\u025f\160\0\2\u025f\21\0\1\u0260\76\0\1\u0261\10\0"+
    "\1\u0261\75\0\1\u0262\67\0\2\u025b\2\0\2\u025b\1\0"+
    "\1\u025b\3\0\1\u0263\5\0\2\u025b\1\0\1\u025b\1\0"+
    "\1\u025b\2\0\1\u025b\1\0\1\u025b\1\0\2\u025b\3\0"+
    "\6\u025b\1\0\1\u025b\1\0\1\u025b\1\0\1\u025b\1\0"+
    "\1\u025b\1\0\1\u025b\1\0\1\u025b\2\0\1\u025b\3\0"+
    "\1\u025b\1\0\1\u025b\1\0\1\u025b\14\0\1\u022f\156\0"+
    "\3\u0264\27\0\1\u0265\102\0\1\u0266\67\0\2\u0260\2\0"+
    "\2\u0260\1\0\1\u0260\3\0\1\u0267\5\0\2\u0260\1\0"+
    "\1\u0260\1\0\1\u0260\2\0\1\u0260\1\0\1\u0260\1\0"+
    "\2\u0260\3\0\6\u0260\1\0\1\u0260\1\0\1\u0260\1\0"+
    "\1\u0260\1\0\1\u0260\1\0\1\u0260\1\0\1\u0260\2\0"+
    "\1\u0260\3\0\1\u0260\1\0\1\u0260\1\0\1\u0260\14\0"+
    "\1\u0224\72\0\2\u0262\2\0\2\u0262\1\0\1\u0262\3\0"+
    "\1\u0268\5\0\2\u0262\1\0\1\u0262\1\0\1\u0262\2\0"+
    "\1\u0262\1\0\1\u0262\1\0\2\u0262\3\0\6\u0262\1\0"+
    "\1\u0262\1\0\1\u0262\1\0\1\u0262\1\0\1\u0262\1\0"+
    "\1\u0262\1\0\1\u0262\2\0\1\u0262\3\0\1\u0262\1\0"+
    "\1\u0262\1\0\1\u0262\42\0\1\u0269\3\0\6\u0269\37\0"+
    "\1\u026a\10\0\1\u026a\65\0\2\u0265\2\0\2\u0265\1\0"+
    "\1\u0265\3\0\1\u026b\5\0\2\u0265\1\0\1\u0265\1\0"+
    "\1\u0265\2\0\1\u0265\1\0\1\u0265\1\0\2\u0265\3\0"+
    "\6\u0265\1\0\1\u0265\1\0\1\u0265\1\0\1\u0265\1\0"+
    "\1\u0265\1\0\1\u0265\1\0\1\u0265\2\0\1\u0265\3\0"+
    "\1\u0265\1\0\1\u0265\1\0\1\u0265\42\0\1\u026c\3\0"+
    "\6\u026c\71\0\1\u026d\3\0\6\u026d\71\0\1\u026e\3\0"+
    "\6\u026e\71\0\1\u0269\3\0\6\u0269\20\0\1\u026f\102\0"+
    "\1\u0270\50\0\1\u0271\3\0\6\u0271\71\0\1\u026c\3\0"+
    "\6\u026c\20\0\1\u0272\50\0\1\u026d\3\0\6\u026d\20\0"+
    "\1\u0273\50\0\1\u026e\3\0\6\u026e\20\0\1\u0274\7\0"+
    "\72\u0275\1\0\10\u0275\41\0\1\u0271\3\0\6\u0271\20\0"+
    "\1\u0276\7\0\72\u0277\1\0\10\u0277\72\u0278\1\0\10\u0278"+
    "\72\u0279\1\0\10\u0279\72\u0275\1\u027a\10\u0275\72\u027b\1\0"+
    "\10\u027b\72\u0277\1\u027c\10\u0277\72\u0278\1\u027d\10\u0278\72\u0279"+
    "\1\u027e\10\u0279\43\0\1\u027f\37\0\72\u027b\1\u0280\10\u027b"+
    "\43\0\1\u0281\102\0\1\u0282\102\0\1\u0283\114\0\2\u0284"+
    "\67\0\1\u0285\114\0\2\u0286\101\0\2\u0287\101\0\2\u0288"+
    "\113\0\3\u0289\66\0\2\u028a\113\0\3\u028b\100\0\3\u028c"+
    "\100\0\3\u028d\20\0\1\u028e\10\0\1\u028e\151\0\3\u028f"+
    "\20\0\1\u0290\10\0\1\u0290\71\0\1\u0291\10\0\1\u0291"+
    "\71\0\1\u0292\10\0\1\u0292\155\0\1\263\16\0\1\u0293"+
    "\10\0\1\u0293\155\0\1\u0294\102\0\1\337\102\0\1\373"+
    "\102\0\1\u0125\10\0\2\u0294\2\0\1\330\1\u0295\5\0"+
    "\1\u0294\11\0\2\212\11\0\1\332\3\0\1\333\3\332"+
    "\1\334\1\332\37\0\1\u0296\10\0\1\u0296\72\0\1\u0297"+
    "\10\0\1\u0297\72\0\1\u0298\10\0\1\u0298\2\0\1\u0298"+
    "\67\0\1\u0299\10\0\1\u0299\72\0\1\u0294\67\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[43684];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\1\11\1\1\1\11\1\1\1\11\11\1"+
    "\31\0\1\1\5\0\1\1\52\0\1\1\10\0\1\1"+
    "\3\0\2\1\73\0\1\1\16\0\1\1\1\0\1\11"+
    "\60\0\1\11\3\0\1\1\20\0\1\1\22\0\1\1"+
    "\161\0\1\11\1\1\214\0\1\1\22\0\1\11\112\0"+
    "\1\11\51\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[665];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.9"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public CaseNumbers() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
	} 

	private boolean numberSet = false;
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaseNumbers(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 378) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            }
          case 11: break;
          case 2: 
            { addText(yytext());
		position++;
            }
          case 12: break;
          case 3: 
            { checkEnd();
            }
          case 13: break;
          case 4: 
            { if(annotationEntity.getValue().equals("")) {
		
			annotationEntity.setValue(yytext());
		
		} else {
		
			if(numberSet) {
				
				annotationEntity.setValue(annotationEntity.getValue() + "-" + yytext());
				numberSet = false;
			
			} else {
			
				annotationEntity.setValue(annotationEntity.getValue() + "-" + yytext());
				numberSet = true;
			}
		}
		
		position += yylength();
		offset += yylength();
            }
          case 14: break;
          case 5: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
            { if(annotationEntity.getValue().equals("")) {
		
			annotationEntity.setValue(yytext());
		
		} else {
		
			annotationEntity.setValue(annotationEntity.getValue() + "_" + yytext());
		}
		
		position += yylength();
		offset += yylength();
            }
          case 15: break;
          case 6: 
            { position += yylength();
		offset += yylength();
            }
          case 16: break;
          case 7: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            }
          case 17: break;
          case 8: 
            { numberSet = false; start(new CaseNumber(), caseNumberState, true, true);
            }
          case 18: break;
          case 9: 
            { addText(yytext()); 
	yybegin(lkn);
            }
          case 19: break;
          case 10: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		offset += yylength();
		position += retrievedEntity.getText().length();
            }
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java CaseNumbers [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        CaseNumbers scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new CaseNumbers(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
