/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
/* The following code was generated by JFlex 1.7.0 */

package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex/CaseNumbers.jflex</tt>
 */
public class CaseNumbers extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int caseNumberState = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\2\1\0\1\14\1\1\22\0\1\73\5\0\1\6"+
    "\1\5\1\15\1\15\2\0\1\15\1\3\1\54\1\55\1\64\1\57"+
    "\1\63\1\53\1\53\1\53\1\61\1\61\1\60\1\62\1\16\1\13"+
    "\5\0\1\27\1\10\1\41\1\72\1\37\1\104\1\31\1\102\1\50"+
    "\1\24\1\76\1\70\1\66\1\7\1\52\1\12\1\24\1\33\1\25"+
    "\1\45\1\43\1\35\1\106\1\24\1\24\1\24\1\77\1\56\1\100"+
    "\1\0\1\4\1\5\1\26\1\21\1\40\1\71\1\36\1\103\1\30"+
    "\1\101\1\47\1\17\1\75\1\67\1\65\1\20\1\51\1\23\1\17"+
    "\1\32\1\22\1\44\1\42\1\34\1\105\1\17\1\17\1\17\12\0"+
    "\1\0\44\0\1\0\5\0\1\107\3\0\1\5\5\0\1\0\5\0"+
    "\1\17\1\17\4\17\1\0\1\17\1\17\1\17\2\17\1\17\1\17"+
    "\2\17\1\0\1\17\1\17\1\17\3\17\2\0\1\17\1\17\2\17"+
    "\3\0\1\17\1\17\4\17\1\0\1\17\1\17\1\17\2\17\1\17"+
    "\1\17\2\17\1\0\1\17\1\17\1\17\3\17\2\0\1\17\1\17"+
    "\2\17\53\0\1\17\1\17\6\0\2\46\66\0\1\17\1\17\4\0"+
    "\1\17\1\17\17\0\1\11\u1c88\0\1\17\1\17\216\0\2\17\42\0"+
    "\1\17\1\17\u0144\0\1\14\20\0\1\3\1\3\4\0\1\5\16\0"+
    "\1\0\1\0\u0100\0\1\74\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\2\2\6\3\1\4\2\3\63\0\1\5"+
    "\161\0\1\6\114\0\2\7\102\0\1\7\55\0\2\10"+
    "\105\0\5\10\16\0\1\11\172\0\1\12\131\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[677];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u0168"+
    "\0\u01f8\0\u0168\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8"+
    "\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8"+
    "\0\u0630\0\u0678\0\u06c0\0\330\0\u0708\0\u0750\0\u0798\0\u07e0"+
    "\0\u0828\0\u0870\0\u0360\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8"+
    "\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88\0\u0bd0\0\u0c18"+
    "\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10\0\u0e58"+
    "\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098"+
    "\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248\0\u1290\0\u12d8"+
    "\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u1440\0\u1488\0\u14d0\0\u1518"+
    "\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758"+
    "\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998"+
    "\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8"+
    "\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18"+
    "\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058"+
    "\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298"+
    "\0\u22e0\0\u02d0\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2490"+
    "\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0"+
    "\0\u2718\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910"+
    "\0\u2958\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50"+
    "\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90"+
    "\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0"+
    "\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u0168"+
    "\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408"+
    "\0\u3450\0\u3498\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648"+
    "\0\u3690\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888"+
    "\0\u38d0\0\u3918\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u3ac8"+
    "\0\u3b10\0\u3b58\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\u3d08"+
    "\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70\0\u3eb8\0\u3f00\0\u3f48"+
    "\0\u3f90\0\u3fd8\0\u4020\0\u4068\0\u40b0\0\u40f8\0\u4140\0\u4188"+
    "\0\u41d0\0\u4218\0\u4260\0\u42a8\0\u42f0\0\u4338\0\u4380\0\u43c8"+
    "\0\u4410\0\u4458\0\u44a0\0\u44e8\0\u4530\0\u4578\0\u45c0\0\u4608"+
    "\0\u4650\0\u4698\0\u46e0\0\u4728\0\u4770\0\u47b8\0\u4800\0\u4848"+
    "\0\u4890\0\u48d8\0\u4920\0\u4968\0\u49b0\0\u49f8\0\u4a40\0\u4a88"+
    "\0\u4ad0\0\u4b18\0\u4b60\0\u4ba8\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8"+
    "\0\u4d10\0\u4d58\0\u4da0\0\u4de8\0\u4e30\0\u4e78\0\u4ec0\0\u4f08"+
    "\0\u4f50\0\u4f98\0\u4fe0\0\u5028\0\u5070\0\u50b8\0\u5100\0\u5148"+
    "\0\u5190\0\u51d8\0\u5220\0\u5268\0\u52b0\0\u52f8\0\u5340\0\u5388"+
    "\0\u53d0\0\u5418\0\u5460\0\u54a8\0\u54f0\0\u5538\0\u5580\0\u55c8"+
    "\0\u5610\0\u5658\0\u56a0\0\u56e8\0\u5730\0\u5778\0\u57c0\0\u5808"+
    "\0\u5850\0\u5898\0\u58e0\0\u5928\0\u5970\0\u59b8\0\u5a00\0\u5a48"+
    "\0\u0168\0\u5a90\0\u5ad8\0\u5b20\0\u5b68\0\u5bb0\0\u5bf8\0\u5c40"+
    "\0\u5c88\0\u5cd0\0\u5d18\0\u5d60\0\u5da8\0\u5df0\0\u5e38\0\u5e80"+
    "\0\u5ec8\0\u5f10\0\u5f58\0\u5fa0\0\u5fe8\0\u6030\0\u6078\0\u60c0"+
    "\0\u6108\0\u6150\0\u6198\0\u61e0\0\u6228\0\u6270\0\u62b8\0\u6300"+
    "\0\u6348\0\u6390\0\u63d8\0\u6420\0\u6468\0\u64b0\0\u64f8\0\u6540"+
    "\0\u6588\0\u65d0\0\u6618\0\u6660\0\u66a8\0\u66f0\0\u0168\0\u6738"+
    "\0\u6780\0\u67c8\0\u6810\0\u6858\0\u68a0\0\u68e8\0\u6930\0\u6978"+
    "\0\u69c0\0\u6a08\0\u6a50\0\u6a98\0\u6ae0\0\u6b28\0\u6b70\0\u6bb8"+
    "\0\u6c00\0\u6c48\0\u6c90\0\u6cd8\0\u6d20\0\u6d68\0\u6db0\0\u6df8"+
    "\0\u6e40\0\u6e88\0\u6ed0\0\u6f18\0\u6f60\0\u6fa8\0\u6ff0\0\u7038"+
    "\0\u7080\0\u70c8\0\u7110\0\u7158\0\u71a0\0\u71e8\0\u7230\0\u7278"+
    "\0\u72c0\0\u7308\0\u7350\0\u7398\0\u73e0\0\u7428\0\u7470\0\u74b8"+
    "\0\u7500\0\u7548\0\u7590\0\u75d8\0\u7620\0\u7668\0\u76b0\0\u76f8"+
    "\0\u7740\0\u7788\0\u77d0\0\u7818\0\u7860\0\u78a8\0\u78f0\0\u7938"+
    "\0\u7980\0\u79c8\0\u7a10\0\u7a58\0\u7aa0\0\u7ae8\0\u38d0\0\u4b18"+
    "\0\u4b60\0\u4bf0\0\u7b30\0\u7b78\0\u7bc0\0\u7c08\0\u7c50\0\u7c98"+
    "\0\u7ce0\0\u7d28\0\u7d70\0\u7db8\0\u7e00\0\u7e48\0\u7e90\0\u7ed8"+
    "\0\u0168\0\u7f20\0\u7f68\0\u7fb0\0\u7ff8\0\u8040\0\u8088\0\u80d0"+
    "\0\u8118\0\u8160\0\u81a8\0\u81f0\0\u8238\0\u8280\0\u82c8\0\u8310"+
    "\0\u8358\0\u83a0\0\u83e8\0\u8430\0\u8478\0\u84c0\0\u8508\0\u8550"+
    "\0\u8598\0\u85e0\0\u8628\0\u8670\0\u86b8\0\u8700\0\u8748\0\u8790"+
    "\0\u87d8\0\u8820\0\u8868\0\u88b0\0\u88f8\0\u8940\0\u8988\0\u89d0"+
    "\0\u8a18\0\u8a60\0\u8aa8\0\u8af0\0\u8b38\0\u8b80\0\u8bc8\0\u8c10"+
    "\0\u8c58\0\u8ca0\0\u8ce8\0\u8d30\0\u8d78\0\u8dc0\0\u8e08\0\u8e50"+
    "\0\u8e98\0\u8ee0\0\u8f28\0\u8f70\0\u8fb8\0\u9000\0\u9048\0\u9090"+
    "\0\u90d8\0\u9120\0\u9168\0\u91b0\0\u91f8\0\u9240\0\u9288\0\u92d0"+
    "\0\u9318\0\u9360\0\u93a8\0\u93f0\0\u9438\0\u9480\0\u94c8\0\u9510"+
    "\0\u9558\0\u95a0\0\u95e8\0\u9630\0\u9678\0\u96c0\0\u9708\0\u9750"+
    "\0\u9798\0\u97e0\0\u9828\0\u9870\0\u98b8\0\u9900\0\u9948\0\u9990"+
    "\0\u99d8\0\u9a20\0\u9a68\0\u9ab0\0\u9af8\0\u9b40\0\u9b88\0\u9bd0"+
    "\0\u9c18\0\u9c60\0\u9ca8\0\u9cf0\0\u9d38\0\u9d80\0\u9dc8\0\u9e10"+
    "\0\u9e58\0\u9ea0\0\u9ee8\0\u9f30\0\u9f78\0\u9fc0\0\ua008\0\ua050"+
    "\0\ua098\0\ua0e0\0\ua128\0\u0168\0\ua170\0\ua1b8\0\ua200\0\ua248"+
    "\0\ua290\0\ua2d8\0\ua320\0\ua368\0\ua3b0\0\ua3f8\0\ua440\0\ua488"+
    "\0\ua4d0\0\ua518\0\ua560\0\ua5a8\0\ua5f0\0\ua638\0\ua680\0\ua6c8"+
    "\0\ua710\0\ua758\0\ua7a0\0\ua7e8\0\ua830\0\ua878\0\ua8c0\0\ua908"+
    "\0\ua950\0\ua998\0\ua9e0\0\uaa28\0\uaa70\0\uaab8\0\uab00\0\uab48"+
    "\0\uab90\0\uabd8\0\uac20\0\uac68\0\uacb0\0\uacf8\0\uad40\0\uad88"+
    "\0\uadd0\0\uae18\0\uae60\0\uaea8\0\uaef0\0\uaf38\0\uaf80\0\uafc8"+
    "\0\ub010\0\ub058\0\ub0a0\0\ub0e8\0\ub130\0\ub178\0\ub1c0\0\ub208"+
    "\0\ub250\0\ub298\0\ub2e0\0\ub328\0\ub370\0\ub3b8\0\ub400\0\ub448"+
    "\0\ub490\0\ub4d8\0\ub520\0\ub568\0\ub5b0\0\ub5f8\0\ub640\0\ub688"+
    "\0\ub6d0\0\ub718\0\ub760\0\ub7a8\0\ub7f0\0\ub838\0\ub880\0\ub8c8"+
    "\0\ub910\0\ub958\0\ub9a0\0\ub9e8\0\uba30";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[677];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\5\4\2\6\1\4\1\6\4\4\27\6"+
    "\1\4\5\6\3\4\14\6\2\4\2\6\1\7\1\4"+
    "\6\6\1\4\77\10\1\11\10\10\12\12\1\13\10\12"+
    "\1\13\6\12\2\14\2\12\2\15\2\16\2\12\2\17"+
    "\5\12\1\20\3\12\6\20\12\12\1\21\1\12\2\22"+
    "\5\12\7\0\1\23\2\0\1\24\5\0\1\23\2\0"+
    "\1\24\2\0\2\25\2\0\2\26\2\0\2\27\2\30"+
    "\2\0\2\31\3\32\30\0\2\33\7\0\1\34\4\0"+
    "\1\23\2\0\1\24\5\0\1\23\2\0\1\24\2\0"+
    "\2\25\2\0\2\26\2\0\2\27\2\30\2\0\2\31"+
    "\3\32\30\0\2\33\124\0\1\23\2\0\1\24\5\0"+
    "\1\23\2\0\1\24\2\0\2\25\2\0\2\26\2\0"+
    "\2\27\2\30\2\0\2\31\3\32\16\0\2\35\10\0"+
    "\2\33\62\0\1\36\64\0\2\37\112\0\2\40\6\0"+
    "\3\41\124\0\2\42\22\0\2\43\2\44\1\0\1\45"+
    "\5\0\1\43\11\0\2\46\43\0\1\43\15\0\2\43"+
    "\2\44\1\0\1\45\5\0\1\43\56\0\1\43\67\0"+
    "\1\20\3\0\6\20\112\0\2\47\45\0\2\50\61\0"+
    "\2\51\3\0\1\52\1\53\2\0\1\24\1\0\1\51"+
    "\3\0\1\53\2\0\1\24\2\0\2\54\2\0\2\55"+
    "\2\0\2\27\2\30\2\56\2\31\3\0\2\53\1\57"+
    "\1\51\2\0\6\57\6\0\1\51\5\0\2\33\4\0"+
    "\1\51\32\0\2\60\66\0\1\61\10\0\1\61\114\0"+
    "\2\62\4\0\2\63\2\62\2\64\2\0\3\65\3\0"+
    "\1\66\12\0\2\67\104\0\2\70\22\0\2\31\2\71"+
    "\1\0\1\72\5\0\1\31\11\0\2\73\43\0\1\31"+
    "\15\0\2\31\2\71\1\0\1\72\5\0\1\31\56\0"+
    "\1\31\25\0\1\74\10\0\1\74\2\0\1\74\110\0"+
    "\2\75\154\0\3\76\100\0\2\77\70\0\2\100\46\0"+
    "\1\101\10\0\1\101\2\0\1\101\122\0\2\102\74\0"+
    "\2\103\6\0\2\104\51\0\2\44\3\0\1\105\5\0"+
    "\1\44\36\0\1\106\3\0\6\106\6\0\1\44\23\0"+
    "\1\107\10\0\1\107\100\0\1\110\10\0\1\110\2\0"+
    "\1\110\14\0\2\111\140\0\3\112\12\0\2\113\3\0"+
    "\1\114\5\0\1\113\56\0\1\113\15\0\2\51\3\0"+
    "\1\52\3\0\1\24\1\0\1\51\6\0\1\24\2\0"+
    "\2\54\2\0\2\115\2\0\2\27\2\30\2\0\2\31"+
    "\5\0\1\57\3\0\6\57\6\0\1\51\5\0\2\33"+
    "\14\0\1\116\10\0\1\116\70\0\2\51\3\0\1\52"+
    "\3\0\1\24\1\0\1\51\6\0\1\24\2\0\2\54"+
    "\2\0\2\115\2\0\2\27\2\30\2\0\2\31\5\0"+
    "\1\57\1\51\2\0\6\57\6\0\1\51\5\0\2\33"+
    "\17\0\1\117\10\0\1\117\65\0\2\51\3\0\1\52"+
    "\3\0\1\24\1\0\1\51\6\0\1\24\2\0\2\54"+
    "\2\71\2\115\2\0\2\120\2\121\2\122\2\31\3\65"+
    "\2\0\1\57\1\123\2\0\6\57\2\0\2\71\2\0"+
    "\1\51\5\0\2\33\72\0\2\124\22\0\2\125\3\0"+
    "\1\126\5\0\1\125\11\0\2\127\23\0\1\57\1\0"+
    "\2\130\6\57\6\0\1\125\3\0\1\131\61\0\2\132"+
    "\47\0\1\133\10\0\1\133\65\0\2\62\3\0\1\134"+
    "\1\135\4\0\1\62\3\0\1\135\52\0\1\62\25\0"+
    "\1\136\10\0\1\136\2\0\1\136\72\0\1\137\10\0"+
    "\1\137\27\0\2\140\75\0\2\141\76\0\2\142\6\0"+
    "\2\142\31\0\1\143\15\0\2\67\3\0\1\144\1\135"+
    "\4\0\1\67\3\0\1\135\32\0\1\145\3\0\6\145"+
    "\6\0\1\67\42\0\2\146\6\0\2\147\51\0\2\71"+
    "\3\0\1\150\5\0\1\71\36\0\1\145\3\0\6\145"+
    "\6\0\1\71\23\0\1\151\10\0\1\151\100\0\1\152"+
    "\10\0\1\152\2\0\1\152\14\0\2\153\104\0\2\154"+
    "\47\0\2\155\3\0\1\156\5\0\1\155\56\0\1\155"+
    "\23\0\1\157\10\0\1\157\163\0\3\160\20\0\1\161"+
    "\10\0\1\161\17\0\2\162\23\0\2\163\47\0\2\164"+
    "\6\0\2\164\7\0\4\164\36\0\2\165\3\0\1\166"+
    "\3\0\1\167\1\0\1\165\6\0\1\167\14\0\2\170"+
    "\7\0\2\171\1\0\1\165\16\0\1\165\23\0\1\172"+
    "\10\0\1\172\100\0\1\40\10\0\1\40\2\0\1\40"+
    "\71\0\1\173\10\0\1\173\142\0\1\106\3\0\6\106"+
    "\33\0\1\174\10\0\1\174\134\0\3\175\2\165\46\0"+
    "\1\176\10\0\1\176\2\0\1\176\71\0\1\177\10\0"+
    "\1\177\70\0\2\113\3\0\1\114\3\0\1\200\1\0"+
    "\1\113\6\0\1\200\6\0\2\201\2\0\2\202\33\0"+
    "\1\113\23\0\1\203\10\0\1\203\117\0\2\71\4\0"+
    "\2\63\2\71\2\122\2\0\3\65\3\0\1\204\12\0"+
    "\2\71\27\0\1\205\10\0\1\205\100\0\1\206\10\0"+
    "\1\206\75\0\1\136\10\0\1\136\2\0\1\136\37\0"+
    "\2\70\22\0\2\207\2\71\1\0\1\210\5\0\1\207"+
    "\11\0\2\73\23\0\1\145\3\0\6\145\6\0\1\207"+
    "\65\0\2\211\36\0\2\51\3\0\1\52\3\0\1\24"+
    "\1\0\1\51\6\0\1\24\2\0\2\54\2\212\2\115"+
    "\2\0\2\27\2\213\2\0\2\31\5\0\1\57\3\0"+
    "\6\57\6\0\1\214\5\0\2\33\6\0\2\51\3\0"+
    "\1\52\3\0\1\24\1\0\1\51\6\0\1\24\2\0"+
    "\2\54\2\0\2\115\2\0\2\215\2\30\2\0\2\31"+
    "\5\0\1\57\1\51\2\0\6\57\6\0\1\51\5\0"+
    "\2\33\6\0\2\125\3\0\1\126\5\0\1\125\11\0"+
    "\2\127\25\0\2\130\14\0\1\125\3\0\1\131\17\0"+
    "\1\216\10\0\1\216\76\0\1\217\10\0\1\217\70\0"+
    "\2\130\2\0\1\220\1\221\5\0\1\130\36\0\1\222"+
    "\3\0\1\223\3\222\1\224\1\222\6\0\1\130\103\0"+
    "\2\225\26\0\1\226\10\0\1\226\17\0\2\227\23\0"+
    "\2\230\110\0\2\231\26\0\1\232\10\0\1\232\70\0"+
    "\2\71\3\0\1\150\1\233\4\0\1\71\3\0\1\233"+
    "\11\0\2\233\6\0\2\234\5\0\2\233\1\145\1\71"+
    "\2\0\6\145\6\0\1\71\13\0\1\71\26\0\2\235"+
    "\6\0\2\235\7\0\4\235\67\0\2\236\143\0\2\237"+
    "\20\0\2\240\3\0\1\241\1\242\2\0\1\243\1\0"+
    "\1\240\3\0\1\242\2\0\1\243\2\0\2\25\2\0"+
    "\2\244\4\0\2\245\2\0\2\31\3\246\2\247\1\145"+
    "\1\240\2\0\6\145\6\0\1\240\70\0\1\62\63\0"+
    "\2\142\6\0\2\142\55\0\1\250\10\0\1\250\70\0"+
    "\2\251\3\0\1\252\5\0\1\251\11\0\2\253\23\0"+
    "\1\145\1\0\2\254\6\145\6\0\1\251\3\0\1\255"+
    "\17\0\1\256\10\0\1\256\100\0\1\63\10\0\1\63"+
    "\2\0\1\63\71\0\1\257\10\0\1\257\77\0\1\260"+
    "\10\0\1\260\134\0\3\261\2\240\46\0\1\262\10\0"+
    "\1\262\2\0\1\262\114\0\2\263\55\0\2\155\3\0"+
    "\1\156\3\0\1\264\1\0\1\155\6\0\1\264\6\0"+
    "\2\265\2\0\2\27\33\0\1\155\23\0\1\266\10\0"+
    "\1\266\105\0\1\267\100\0\1\270\10\0\1\270\131\0"+
    "\2\271\102\0\2\272\14\0\1\165\75\0\2\273\45\0"+
    "\4\274\1\0\1\275\4\0\4\274\54\0\1\274\3\0"+
    "\1\276\11\0\2\165\3\0\1\166\3\0\1\167\1\0"+
    "\1\165\6\0\1\167\14\0\2\170\31\0\1\165\23\0"+
    "\1\277\10\0\1\277\125\0\2\300\116\0\3\301\71\0"+
    "\2\302\102\0\2\303\70\0\1\304\10\0\1\304\77\0"+
    "\1\305\10\0\1\305\2\0\1\305\162\0\1\165\35\0"+
    "\2\165\6\0\2\175\66\0\1\306\123\0\2\307\112\0"+
    "\2\40\60\0\1\310\10\0\1\310\116\0\2\212\6\0"+
    "\2\212\31\0\1\311\25\0\1\312\10\0\1\312\2\0"+
    "\1\312\151\0\2\212\20\0\2\207\2\71\1\0\1\210"+
    "\5\0\1\207\36\0\1\145\3\0\6\145\6\0\1\207"+
    "\23\0\1\313\10\0\1\313\156\0\2\314\73\0\1\71"+
    "\34\0\2\31\2\71\1\0\1\72\5\0\1\31\11\0"+
    "\2\73\24\0\1\71\16\0\1\31\15\0\2\51\3\0"+
    "\1\52\3\0\1\24\1\0\1\51\6\0\1\24\2\0"+
    "\2\54\2\212\2\115\2\0\2\27\2\213\2\0\2\31"+
    "\5\0\1\57\3\0\6\57\6\0\1\51\5\0\2\33"+
    "\37\0\2\315\31\0\2\70\31\0\1\316\10\0\1\316"+
    "\75\0\1\317\10\0\1\317\142\0\1\222\3\0\6\222"+
    "\32\0\1\320\10\0\1\320\142\0\1\321\3\0\6\321"+
    "\76\0\1\321\3\0\1\321\1\322\1\321\1\323\2\321"+
    "\76\0\1\321\3\0\5\321\1\324\117\0\3\325\53\0"+
    "\2\326\102\0\2\327\14\0\1\240\75\0\2\330\120\0"+
    "\1\67\43\0\1\331\10\0\1\331\67\0\2\71\3\0"+
    "\1\150\5\0\1\71\36\0\1\145\1\71\2\0\6\145"+
    "\6\0\1\71\101\0\2\332\22\0\4\333\1\0\1\334"+
    "\4\0\4\333\54\0\1\333\3\0\1\335\56\0\3\336"+
    "\110\0\2\67\36\0\2\240\3\0\1\241\1\242\2\0"+
    "\1\243\1\0\1\240\3\0\1\242\2\0\1\243\2\0"+
    "\2\25\2\0\2\244\4\0\2\245\2\0\2\31\3\246"+
    "\2\0\1\145\3\0\6\145\6\0\1\240\23\0\1\337"+
    "\10\0\1\337\70\0\2\340\3\0\1\341\1\342\4\0"+
    "\1\340\3\0\1\342\5\0\2\54\2\0\2\343\4\0"+
    "\2\31\2\344\2\31\3\0\2\342\1\345\1\340\2\0"+
    "\6\345\6\0\1\340\13\0\1\340\36\0\2\346\100\0"+
    "\2\62\6\0\2\62\2\347\10\0\1\66\12\0\2\67"+
    "\20\0\2\31\2\71\1\0\1\72\5\0\1\31\31\0"+
    "\3\350\22\0\1\31\25\0\1\351\10\0\1\351\2\0"+
    "\1\351\114\0\2\352\64\0\1\353\10\0\1\353\67\0"+
    "\2\251\3\0\1\252\5\0\1\251\11\0\2\253\25\0"+
    "\2\254\14\0\1\251\3\0\1\255\17\0\1\354\10\0"+
    "\1\354\76\0\1\355\10\0\1\355\70\0\2\254\2\0"+
    "\1\356\1\357\5\0\1\254\36\0\1\360\3\0\1\361"+
    "\3\360\1\362\1\360\6\0\1\254\103\0\2\363\45\0"+
    "\2\364\70\0\1\365\10\0\1\365\77\0\1\366\10\0"+
    "\1\366\2\0\1\366\162\0\1\240\35\0\2\240\6\0"+
    "\2\261\116\0\3\367\71\0\2\370\112\0\2\63\60\0"+
    "\1\371\10\0\1\371\72\0\1\372\2\0\2\372\1\0"+
    "\1\372\11\0\2\372\1\0\1\372\1\0\1\372\1\0"+
    "\1\372\1\0\1\372\1\0\1\372\1\0\1\372\1\0"+
    "\1\372\1\0\1\372\2\0\1\372\1\0\1\372\13\0"+
    "\1\372\1\0\1\372\1\0\1\372\3\0\1\372\3\0"+
    "\1\372\1\0\1\372\1\0\1\372\10\0\1\373\10\0"+
    "\1\373\100\0\1\374\10\0\1\374\2\0\1\374\43\0"+
    "\2\375\104\0\2\376\20\0\4\274\1\0\1\275\3\0"+
    "\1\377\4\274\4\0\1\377\6\0\2\u0100\4\0\2\u0101"+
    "\31\0\1\274\3\0\1\276\17\0\1\u0102\10\0\1\u0102"+
    "\156\0\2\u0103\27\0\1\u0104\10\0\1\u0104\75\0\1\u0105"+
    "\10\0\1\u0105\123\0\2\u0106\63\0\1\u0107\10\0\1\u0107"+
    "\2\0\1\u0107\4\0\2\u0108\120\0\2\101\53\0\1\u0109"+
    "\10\0\1\u0109\2\0\1\u0109\74\0\1\u010a\10\0\1\u010a"+
    "\70\0\1\u010b\2\0\2\u010b\1\0\1\u010b\11\0\2\u010b"+
    "\1\0\1\u010b\1\0\1\u010b\1\0\1\u010b\1\0\1\u010b"+
    "\1\0\1\u010b\1\0\1\u010b\1\0\1\u010b\1\0\1\u010b"+
    "\2\0\1\u010b\1\0\1\u010b\13\0\1\u010b\1\0\1\u010b"+
    "\1\0\1\u010b\3\0\1\u010b\3\0\1\u010b\1\0\1\u010b"+
    "\1\0\1\u010b\52\0\2\u010c\46\0\1\u010d\10\0\1\u010d"+
    "\2\0\1\u010d\112\0\2\212\6\0\2\212\60\0\1\u010e"+
    "\10\0\1\u010e\74\0\1\u010f\10\0\1\u010f\137\0\2\71"+
    "\103\0\5\51\46\0\1\u0110\10\0\1\u0110\2\0\1\u0110"+
    "\133\0\2\130\45\0\1\u0111\10\0\1\u0111\67\0\2\321"+
    "\2\u0112\1\0\1\u0113\4\0\1\u0112\1\321\2\u0112\13\0"+
    "\2\u0114\37\0\1\321\3\0\1\u0115\11\0\2\321\2\u0112"+
    "\1\0\1\u0113\4\0\1\u0112\1\321\2\u0112\13\0\2\u0114"+
    "\24\0\3\222\10\0\1\321\3\0\1\u0115\11\0\2\321"+
    "\2\u0112\1\0\1\u0113\4\0\1\u0112\1\321\2\u0112\13\0"+
    "\2\u0114\17\0\1\222\3\0\6\222\6\0\1\321\3\0"+
    "\1\u0115\11\0\2\321\2\u0112\1\0\1\u0113\4\0\1\u0112"+
    "\1\321\2\u0112\13\0\2\u0114\23\0\1\222\3\0\2\222"+
    "\6\0\1\321\3\0\1\u0115\17\0\1\u0116\10\0\1\u0116"+
    "\76\0\1\u0117\10\0\1\u0117\100\0\1\u0118\10\0\1\u0118"+
    "\2\0\1\u0118\43\0\2\u0119\104\0\2\u011a\30\0\1\u011b"+
    "\10\0\1\u011b\2\0\1\u011b\63\0\2\71\3\0\1\150"+
    "\5\0\1\71\21\0\2\u011c\13\0\1\145\1\71\2\0"+
    "\6\145\6\0\1\71\15\0\4\333\1\0\1\334\3\0"+
    "\1\u011d\4\333\4\0\1\u011d\6\0\2\u011e\4\0\2\u011f"+
    "\31\0\1\333\3\0\1\335\17\0\1\u0120\10\0\1\u0120"+
    "\156\0\2\u0121\57\0\2\u0122\56\0\1\u0123\10\0\1\u0123"+
    "\67\0\2\340\3\0\1\341\5\0\1\340\11\0\2\54"+
    "\2\0\2\u0124\4\0\2\31\2\0\2\31\5\0\1\345"+
    "\3\0\6\345\6\0\1\340\23\0\1\u0125\10\0\1\u0125"+
    "\70\0\2\340\3\0\1\341\5\0\1\340\11\0\2\54"+
    "\2\0\2\u0124\4\0\2\31\2\0\2\31\5\0\1\345"+
    "\1\340\2\0\6\345\6\0\1\340\15\0\2\340\3\0"+
    "\1\341\5\0\1\340\11\0\2\54\2\71\2\u0124\4\0"+
    "\2\207\2\122\2\31\5\0\1\345\1\u0126\2\0\6\345"+
    "\2\0\2\71\2\0\1\340\101\0\2\u0127\22\0\2\u0128"+
    "\3\0\1\u0129\5\0\1\u0128\11\0\2\u012a\23\0\1\345"+
    "\1\0\2\u012b\6\345\6\0\1\u0128\3\0\1\u012c\17\0"+
    "\1\u012d\10\0\1\u012d\77\0\1\u012e\10\0\1\u012e\27\0"+
    "\2\140\71\0\2\u012f\112\0\2\u0130\57\0\1\u0131\10\0"+
    "\1\u0131\2\0\1\u0131\4\0\2\u0132\65\0\1\u0133\10\0"+
    "\1\u0133\2\0\1\u0133\72\0\1\u0134\10\0\1\u0134\75\0"+
    "\1\u0135\10\0\1\u0135\142\0\1\360\3\0\6\360\32\0"+
    "\1\u0136\10\0\1\u0136\142\0\1\u0137\3\0\6\u0137\76\0"+
    "\1\u0137\3\0\1\u0137\1\u0138\1\u0137\1\u0139\2\u0137\76\0"+
    "\1\u0137\3\0\5\u0137\1\u013a\117\0\3\u013b\55\0\2\136"+
    "\53\0\1\u013c\10\0\1\u013c\2\0\1\u013c\74\0\1\u013d"+
    "\10\0\1\u013d\130\0\2\u013e\113\0\2\u013f\46\0\1\u0140"+
    "\10\0\1\u0140\2\0\1\u0140\66\0\1\372\2\0\2\372"+
    "\1\0\1\372\3\0\1\u0141\5\0\2\372\1\0\1\372"+
    "\1\0\1\372\1\0\1\372\1\0\1\372\1\0\1\372"+
    "\1\0\1\372\1\0\1\372\1\0\1\372\2\0\1\372"+
    "\1\0\1\372\13\0\1\372\1\0\1\372\1\0\1\372"+
    "\3\0\1\372\3\0\1\372\1\0\1\372\1\0\1\372"+
    "\41\0\2\u0142\57\0\1\u0107\10\0\1\u0107\2\0\1\u0107"+
    "\130\0\3\u0143\67\0\2\172\110\0\2\u0144\122\0\3\41"+
    "\65\0\2\46\70\0\1\u0145\10\0\1\u0145\162\0\3\u0146"+
    "\22\0\1\u0147\10\0\1\u0147\2\0\1\u0147\110\0\2\u0148"+
    "\24\0\1\u0149\101\0\3\u0148\3\0\1\u0149\101\0\5\165"+
    "\73\0\2\u014a\62\0\1\u014b\10\0\1\u014b\77\0\1\43"+
    "\100\0\1\u010b\2\0\2\u010b\1\0\1\u010b\3\0\1\u014c"+
    "\5\0\2\u010b\1\0\1\u010b\1\0\1\u010b\1\0\1\u010b"+
    "\1\0\1\u010b\1\0\1\u010b\1\0\1\u010b\1\0\1\u010b"+
    "\1\0\1\u010b\2\0\1\u010b\1\0\1\u010b\13\0\1\u010b"+
    "\1\0\1\u010b\1\0\1\u010b\3\0\1\u010b\3\0\1\u010b"+
    "\1\0\1\u010b\1\0\1\u010b\10\0\1\161\10\0\1\161"+
    "\44\0\2\163\33\0\1\u014d\10\0\1\u014d\77\0\1\51"+
    "\105\0\1\u014e\10\0\1\u014e\2\0\1\u014e\74\0\1\u014f"+
    "\10\0\1\u014f\75\0\1\u0150\10\0\1\u0150\2\0\1\u0150"+
    "\63\0\4\u0112\1\0\1\u0151\4\0\4\u0112\13\0\2\u0152"+
    "\37\0\1\u0112\3\0\1\u0115\17\0\1\u0153\10\0\1\u0153"+
    "\117\0\2\u0137\4\0\2\u0154\2\u0137\12\0\1\u0155\122\0"+
    "\2\u0156\35\0\1\u0157\131\0\2\u0158\57\0\1\u0131\10\0"+
    "\1\u0131\2\0\1\u0131\130\0\3\u0159\67\0\2\256\70\0"+
    "\1\u015a\10\0\1\u015a\116\0\2\u015b\106\0\2\u015c\122\0"+
    "\3\65\65\0\2\73\70\0\1\u015d\10\0\1\u015d\162\0"+
    "\3\u015e\37\0\2\u013e\71\0\1\u015f\10\0\1\u015f\2\0"+
    "\1\u015f\112\0\2\71\6\0\2\71\2\122\10\0\1\204"+
    "\12\0\2\71\27\0\1\u0160\10\0\1\u0160\67\0\2\340"+
    "\3\0\1\341\5\0\1\340\11\0\2\54\2\212\2\u0124"+
    "\4\0\2\u0161\2\0\2\31\5\0\1\345\3\0\6\345"+
    "\6\0\1\u0162\15\0\2\340\3\0\1\341\5\0\1\340"+
    "\11\0\2\54\2\0\2\u0124\2\0\2\u0163\2\31\2\0"+
    "\2\31\5\0\1\345\1\340\2\0\6\345\6\0\1\340"+
    "\15\0\2\u0128\3\0\1\u0129\5\0\1\u0128\11\0\2\u012a"+
    "\25\0\2\u012b\14\0\1\u0128\3\0\1\u012c\17\0\1\u0164"+
    "\10\0\1\u0164\76\0\1\u0165\10\0\1\u0165\70\0\2\u012b"+
    "\2\0\1\u0166\1\u0167\5\0\1\u012b\36\0\1\u0168\3\0"+
    "\1\u0169\3\u0168\1\u016a\1\u0168\6\0\1\u012b\103\0\2\u016b"+
    "\20\0\2\u016c\3\0\1\u016d\1\u016e\4\0\1\u016c\3\0"+
    "\1\u016e\5\0\2\u016f\2\0\2\244\12\0\3\246\2\0"+
    "\1\145\1\u016c\2\0\6\145\6\0\1\u016c\46\0\2\u0170"+
    "\55\0\2\u016c\3\0\1\u016d\1\u016e\4\0\1\u016c\3\0"+
    "\1\u016e\5\0\2\25\2\0\2\244\12\0\3\u0171\2\0"+
    "\1\145\1\u016c\2\0\6\145\6\0\1\u016c\46\0\2\u0172"+
    "\122\0\5\240\73\0\2\u0173\62\0\1\u0174\10\0\1\u0174"+
    "\75\0\1\u0175\10\0\1\u0175\2\0\1\u0175\133\0\2\254"+
    "\45\0\1\u0176\10\0\1\u0176\66\0\1\u0177\1\u0178\5\u0177"+
    "\2\0\1\u0177\1\0\4\u0177\27\0\1\u0177\5\0\3\u0177"+
    "\14\0\2\u0177\2\0\2\u0177\6\0\2\u0177\1\u0178\5\u0177"+
    "\2\0\1\u0177\1\0\4\u0177\27\0\1\u0177\5\0\3\u0177"+
    "\1\0\3\360\10\0\2\u0177\2\0\2\u0177\6\0\2\u0177"+
    "\1\u0178\5\u0177\2\0\1\u0177\1\0\4\u0177\27\0\1\u0177"+
    "\4\0\1\360\3\u0177\6\360\6\0\2\u0177\2\0\2\u0177"+
    "\6\0\2\u0177\1\u0178\5\u0177\2\0\1\u0177\1\0\4\u0177"+
    "\27\0\1\u0177\5\0\3\u0177\1\360\3\0\2\360\6\0"+
    "\2\u0177\2\0\2\u0177\6\0\1\u0177\7\0\1\u0179\10\0"+
    "\1\u0179\101\0\1\u017a\10\0\1\u017a\77\0\1\31\140\0"+
    "\2\u017b\51\0\1\226\10\0\1\226\44\0\2\230\33\0"+
    "\1\u017c\10\0\1\u017c\67\0\2\u0141\2\0\2\u0141\1\0"+
    "\1\u0141\3\0\1\u017d\5\0\2\u0141\1\0\1\u0141\1\0"+
    "\1\u0141\1\0\1\u0141\1\0\1\u0141\1\0\1\u0141\1\0"+
    "\1\u0141\1\0\1\u0141\1\0\1\u0141\2\0\1\u0141\1\0"+
    "\2\u0141\3\0\6\u0141\1\0\1\u0141\1\0\1\u0141\1\0"+
    "\1\u0141\3\0\1\u0141\3\0\1\u0141\1\0\1\u0141\1\0"+
    "\1\u0141\47\0\3\172\124\0\2\u017e\72\0\2\u017f\46\0"+
    "\1\u0180\10\0\1\u0180\2\0\1\u0180\71\0\1\u0181\10\0"+
    "\1\u0181\101\0\1\u0182\10\0\1\u0182\153\0\2\u0183\26\0"+
    "\1\u0184\10\0\1\u0184\102\0\1\44\77\0\2\u014c\2\0"+
    "\2\u014c\1\0\1\u014c\3\0\1\u0185\5\0\2\u014c\1\0"+
    "\1\u014c\1\0\1\u014c\1\0\1\u014c\1\0\1\u014c\1\0"+
    "\1\u014c\1\0\1\u014c\1\0\1\u014c\1\0\1\u014c\2\0"+
    "\1\u014c\1\0\2\u014c\3\0\6\u014c\1\0\1\u014c\1\0"+
    "\1\u014c\1\0\1\u014c\3\0\1\u014c\3\0\1\u014c\1\0"+
    "\1\u014c\1\0\1\u014c\14\0\1\113\106\0\1\u0186\10\0"+
    "\1\u0186\77\0\1\125\106\0\1\u0187\10\0\1\u0187\73\0"+
    "\1\u0188\10\0\1\u0188\125\0\2\u0154\60\0\1\u0189\10\0"+
    "\1\u0189\116\0\2\u018a\106\0\2\u018b\6\0\2\u018b\31\0"+
    "\1\u018c\110\0\3\u018d\22\0\1\u018e\10\0\1\u018e\2\0"+
    "\1\u018e\130\0\3\256\124\0\2\u018f\34\0\1\62\142\0"+
    "\5\71\106\0\2\u0190\46\0\1\u0191\10\0\1\u0191\2\0"+
    "\1\u0191\71\0\1\u0192\10\0\1\u0192\101\0\1\u0193\10\0"+
    "\1\u0193\75\0\1\u0194\10\0\1\u0194\2\0\1\u0194\63\0"+
    "\2\31\2\71\1\0\1\72\5\0\1\31\37\0\1\71"+
    "\16\0\1\31\15\0\2\340\3\0\1\341\5\0\1\340"+
    "\11\0\2\54\2\212\2\u0124\4\0\2\u0161\2\0\2\31"+
    "\5\0\1\345\3\0\6\345\6\0\1\340\46\0\2\u0195"+
    "\64\0\1\u0196\10\0\1\u0196\75\0\1\u0197\10\0\1\u0197"+
    "\142\0\1\u0168\3\0\6\u0168\32\0\1\u0198\10\0\1\u0198"+
    "\142\0\1\u0199\3\0\6\u0199\76\0\1\u0199\3\0\1\u0199"+
    "\1\u019a\1\u0199\1\u019b\2\u0199\76\0\1\u0199\3\0\5\u0199"+
    "\1\u019c\117\0\3\u019d\12\0\2\u016c\3\0\1\u016d\1\u016e"+
    "\4\0\1\u016c\3\0\1\u016e\5\0\2\25\2\0\2\244"+
    "\12\0\3\246\2\0\1\145\3\0\6\145\6\0\1\u016c"+
    "\23\0\1\u019e\10\0\1\u019e\70\0\2\u019f\3\0\1\u01a0"+
    "\1\u01a1\4\0\1\u019f\3\0\1\u01a1\5\0\2\54\2\0"+
    "\2\u01a2\6\0\2\u01a3\5\0\2\u01a1\1\345\1\u019f\2\0"+
    "\6\345\6\0\1\u019f\13\0\1\u019f\12\0\1\61\10\0"+
    "\1\61\43\0\2\u01a4\65\0\3\u01a5\50\0\1\351\10\0"+
    "\1\351\2\0\1\351\41\0\2\u01a4\65\0\3\u01a6\46\0"+
    "\1\u01a7\10\0\1\u01a7\102\0\1\67\106\0\1\u01a8\10\0"+
    "\1\u01a8\75\0\1\u01a9\10\0\1\u01a9\2\0\1\u01a9\64\0"+
    "\1\u0177\123\0\1\u01aa\104\0\1\71\122\0\2\u01ab\6\0"+
    "\2\u01ab\7\0\4\u01ab\50\0\1\155\147\0\1\u01ac\3\0"+
    "\6\u01ac\61\0\2\u01ad\110\0\2\162\60\0\1\u01ae\10\0"+
    "\1\u01ae\102\0\1\u01af\104\0\1\165\132\0\2\u0149\114\0"+
    "\2\u01b0\115\0\1\u01b1\3\0\6\u01b1\36\0\1\207\107\0"+
    "\1\130\104\0\1\u01b2\10\0\1\u01b2\77\0\1\u01b3\10\0"+
    "\1\u01b3\2\0\1\u01b3\130\0\3\u01b4\3\0\1\u01b5\107\0"+
    "\1\u0137\63\0\2\u018b\6\0\2\u018b\55\0\1\u01b6\10\0"+
    "\1\u01b6\133\0\2\u01b7\100\0\2\u01b8\110\0\2\227\60\0"+
    "\1\u01b9\10\0\1\u01b9\102\0\1\u01ba\104\0\1\240\106\0"+
    "\1\u01bb\10\0\1\u01bb\132\0\5\340\46\0\1\u01bc\10\0"+
    "\1\u01bc\2\0\1\u01bc\133\0\2\u012b\45\0\1\u01bd\10\0"+
    "\1\u01bd\66\0\1\u0177\1\u01be\1\u01bf\2\u01c0\1\u0177\1\u01c1"+
    "\2\0\1\u0177\1\0\1\u01c0\1\u01bf\2\u01c0\13\0\2\u0114"+
    "\12\0\1\u0177\5\0\3\u0177\14\0\1\u01bf\1\u0177\2\0"+
    "\1\u01c2\1\u0177\6\0\2\u0177\1\u01be\1\u01bf\2\u01c0\1\u0177"+
    "\1\u01c1\2\0\1\u0177\1\0\1\u01c0\1\u01bf\2\u01c0\13\0"+
    "\2\u0114\12\0\1\u0177\5\0\3\u0177\1\0\3\u0168\10\0"+
    "\1\u01bf\1\u0177\2\0\1\u01c2\1\u0177\6\0\2\u0177\1\u01be"+
    "\1\u01bf\2\u01c0\1\u0177\1\u01c1\2\0\1\u0177\1\0\1\u01c0"+
    "\1\u01bf\2\u01c0\13\0\2\u0114\12\0\1\u0177\4\0\1\u0168"+
    "\3\u0177\6\u0168\6\0\1\u01bf\1\u0177\2\0\1\u01c2\1\u0177"+
    "\6\0\2\u0177\1\u01be\1\u01bf\2\u01c0\1\u0177\1\u01c1\2\0"+
    "\1\u0177\1\0\1\u01c0\1\u01bf\2\u01c0\13\0\2\u0114\12\0"+
    "\1\u0177\5\0\3\u0177\1\u0168\3\0\2\u0168\6\0\1\u01bf"+
    "\1\u0177\2\0\1\u01c2\1\u0177\6\0\1\u0177\7\0\1\u01c3"+
    "\10\0\1\u01c3\77\0\1\u01c4\10\0\1\u01c4\67\0\2\u019f"+
    "\3\0\1\u01a0\5\0\1\u019f\11\0\2\54\2\0\2\u0124"+
    "\17\0\1\345\3\0\6\345\6\0\1\u019f\23\0\1\u01c5"+
    "\10\0\1\u01c5\70\0\2\u019f\3\0\1\u01a0\5\0\1\u019f"+
    "\11\0\2\54\2\0\2\u0124\17\0\1\345\1\u019f\2\0"+
    "\6\345\6\0\1\u019f\15\0\2\u019f\3\0\1\u01a0\5\0"+
    "\1\u019f\11\0\2\54\2\71\2\u0124\4\0\2\71\2\122"+
    "\7\0\1\345\1\u01c6\2\0\6\345\2\0\2\71\2\0"+
    "\1\u019f\101\0\2\u01c7\57\0\2\u016c\110\0\2\u01c8\112\0"+
    "\2\u01c9\106\0\2\u01ca\55\0\1\251\106\0\1\u01cb\10\0"+
    "\1\u01cb\75\0\1\u01cc\10\0\1\u01cc\2\0\1\u01cc\63\0"+
    "\4\u01ab\1\0\1\u01cd\1\u01ce\3\0\4\u01ab\1\0\1\u01ce"+
    "\5\0\2\25\2\0\2\u01cf\37\0\1\u01ab\3\0\1\u01d0"+
    "\63\0\1\u01ac\3\0\6\u01ac\13\0\1\u01d1\16\0\1\u01d2"+
    "\10\0\1\u01d2\102\0\1\274\105\0\1\u01d3\10\0\1\u01d3"+
    "\2\0\1\u01d3\120\0\2\165\123\0\1\u01b1\3\0\6\u01b1"+
    "\13\0\1\u01d4\20\0\1\u01d5\10\0\1\u01d5\2\0\1\u01d5"+
    "\74\0\1\u01d6\10\0\1\u01d6\75\0\1\u01d7\10\0\1\u01d7"+
    "\2\0\1\u01d7\63\0\2\u01b5\3\0\1\u01d8\5\0\1\u01b5"+
    "\13\0\2\u01d9\41\0\1\u01b5\32\0\1\u01da\103\0\1\u01db"+
    "\10\0\1\u01db\73\0\1\u01dc\10\0\1\u01dc\102\0\1\333"+
    "\105\0\1\u01dd\10\0\1\u01dd\2\0\1\u01dd\75\0\1\340"+
    "\106\0\1\u01de\10\0\1\u01de\75\0\1\u01df\10\0\1\u01df"+
    "\2\0\1\u01df\63\0\1\321\1\u01bf\2\u0112\1\0\1\u0113"+
    "\4\0\1\u0112\1\321\2\u0112\13\0\2\u0114\37\0\1\321"+
    "\3\0\1\u0115\26\0\1\u01e0\102\0\1\u01e1\10\0\1\u01e1"+
    "\2\0\1\u01e1\72\0\1\u01e2\10\0\1\u01e2\67\0\2\u019f"+
    "\3\0\1\u01a0\5\0\1\u019f\11\0\2\54\2\212\2\u0124"+
    "\4\0\2\212\11\0\1\345\3\0\6\345\6\0\1\u01e3"+
    "\15\0\2\u019f\3\0\1\u01a0\5\0\1\u019f\11\0\2\54"+
    "\2\0\2\u0124\2\0\2\u01e4\13\0\1\345\1\u019f\2\0"+
    "\6\345\6\0\1\u019f\42\0\2\u01c9\124\0\2\u01e5\100\0"+
    "\2\240\63\0\1\254\140\0\2\u01e6\51\0\1\u01e7\10\0"+
    "\1\u01e7\70\0\2\u01e8\3\0\1\u01e9\1\u01ea\4\0\1\u01e8"+
    "\3\0\1\u01ea\5\0\2\54\2\0\2\u01eb\6\0\2\u01ec"+
    "\5\0\2\u01ea\1\57\1\u01e8\2\0\6\57\6\0\1\u01e8"+
    "\13\0\1\u01e8\30\0\2\62\6\0\2\62\2\u01ed\10\0"+
    "\1\66\12\0\2\67\106\0\2\u01ee\63\0\2\u0107\106\0"+
    "\2\u01ef\42\0\77\u01f0\1\0\10\u01f0\12\0\1\u01f1\10\0"+
    "\1\u01f1\77\0\1\321\140\0\2\u01f2\51\0\1\u01f3\10\0"+
    "\1\u01f3\125\0\2\u01f4\61\0\1\u01f5\10\0\1\u01f5\2\0"+
    "\1\u01f5\167\0\2\u01f6\45\0\2\u0131\106\0\2\u01f7\55\0"+
    "\1\u0128\106\0\1\u01f8\10\0\1\u01f8\75\0\1\u01f9\10\0"+
    "\1\u01f9\2\0\1\u01f9\74\0\1\u01fa\10\0\1\u01fa\75\0"+
    "\1\u01fb\10\0\1\u01fb\2\0\1\u01fb\63\0\2\u019f\3\0"+
    "\1\u01a0\5\0\1\u019f\11\0\2\54\2\212\2\u0124\4\0"+
    "\2\212\11\0\1\345\3\0\6\345\6\0\1\u019f\46\0"+
    "\2\u01fc\102\0\2\u01fd\6\0\2\u01fd\7\0\4\u01fd\47\0"+
    "\1\u01fe\10\0\1\u01fe\74\0\1\u01ff\10\0\1\u01ff\67\0"+
    "\2\u01e8\3\0\1\u01e9\5\0\1\u01e8\11\0\2\54\2\0"+
    "\2\u0124\17\0\1\57\3\0\6\57\6\0\1\u01e8\23\0"+
    "\1\u0200\10\0\1\u0200\70\0\2\u01e8\3\0\1\u01e9\5\0"+
    "\1\u01e8\11\0\2\54\2\0\2\u0124\17\0\1\57\1\u01e8"+
    "\2\0\6\57\6\0\1\u01e8\15\0\2\u01e8\3\0\1\u01e9"+
    "\5\0\1\u01e8\11\0\2\54\2\71\2\u0124\4\0\2\71"+
    "\2\122\7\0\1\57\1\u0201\2\0\6\57\2\0\2\71"+
    "\2\0\1\u01e8\101\0\2\u0202\72\0\2\140\131\0\3\u0203"+
    "\23\0\1\u0204\10\0\1\u0204\64\0\77\u01f0\1\u0205\10\u01f0"+
    "\13\0\1\u0112\126\0\2\u0206\64\0\1\u0207\10\0\1\u0207"+
    "\75\0\1\u0208\10\0\1\u0208\133\0\2\u0209\60\0\1\u020a"+
    "\103\0\1\u020b\10\0\1\u020b\77\0\1\u012b\140\0\2\u020c"+
    "\55\0\1\u016c\106\0\1\u020d\10\0\1\u020d\132\0\5\u019f"+
    "\36\0\4\u01fd\1\0\1\u020e\1\u016e\3\0\4\u01fd\1\0"+
    "\1\u016e\5\0\2\25\2\0\2\u01cf\17\0\1\145\3\0"+
    "\6\145\6\0\1\u01fd\3\0\1\u020f\115\0\2\u0210\12\0"+
    "\1\u0211\10\0\1\u0211\2\0\1\u0211\72\0\1\u0212\10\0"+
    "\1\u0212\67\0\2\u01e8\3\0\1\u01e9\5\0\1\u01e8\11\0"+
    "\2\54\2\212\2\u0124\4\0\2\212\11\0\1\57\3\0"+
    "\6\57\6\0\1\u0213\15\0\2\u01e8\3\0\1\u01e9\5\0"+
    "\1\u01e8\11\0\2\54\2\0\2\u0124\2\0\2\u0214\13\0"+
    "\1\57\1\u01e8\2\0\6\57\6\0\1\u01e8\23\0\1\u0215"+
    "\10\0\1\u0215\174\0\2\u0216\56\0\1\u0217\103\0\2\u01b5"+
    "\46\0\1\u0218\10\0\1\u0218\2\0\1\u0218\120\0\2\u0219"+
    "\14\0\1\u0137\45\0\1\u021a\10\0\1\u021a\132\0\3\u021b"+
    "\2\u021c\142\0\2\u021d\13\0\1\u021e\10\0\1\u021e\77\0"+
    "\1\u019f\103\0\1\u021f\10\0\1\u021f\156\0\2\u0220\35\0"+
    "\1\u0221\103\0\1\u0222\10\0\1\u0222\75\0\1\u0223\10\0"+
    "\1\u0223\2\0\1\u0223\63\0\2\u01e8\3\0\1\u01e9\5\0"+
    "\1\u01e8\11\0\2\54\2\212\2\u0124\4\0\2\212\11\0"+
    "\1\57\3\0\6\57\6\0\1\u01e8\46\0\2\u0224\72\0"+
    "\1\u0225\107\0\1\u0226\160\0\2\u0227\31\0\1\u0228\10\0"+
    "\1\u0228\116\0\2\u0229\161\0\2\u022a\10\0\1\u022b\10\0"+
    "\1\u022b\172\0\2\u022b\21\0\1\u022c\176\0\2\u022d\11\0"+
    "\1\u022e\10\0\1\u022e\162\0\3\u022f\57\0\3\u0230\2\u0231"+
    "\50\0\1\u01ab\106\0\1\u0232\10\0\1\u0232\132\0\5\u01e8"+
    "\46\0\1\u0233\10\0\1\u0233\2\0\1\u0233\65\0\2\u0226"+
    "\2\0\2\u0226\1\0\1\u0226\3\0\1\u0234\5\0\2\u0226"+
    "\1\0\1\u0226\1\0\1\u0226\1\0\1\u0226\1\0\1\u0226"+
    "\1\0\1\u0226\1\0\1\u0226\1\0\1\u0226\1\0\1\u0226"+
    "\2\0\1\u0226\1\0\2\u0226\3\0\6\u0226\1\0\1\u0226"+
    "\1\0\1\u0226\1\0\1\u0226\3\0\1\u0226\3\0\1\u0226"+
    "\1\0\1\u0226\1\0\1\u0226\75\0\3\u0235\24\0\1\u01b5"+
    "\122\0\2\u0236\76\0\1\u0237\107\0\1\u0238\74\0\2\u022c"+
    "\2\0\2\u022c\1\0\1\u022c\3\0\1\u0239\5\0\2\u022c"+
    "\1\0\1\u022c\1\0\1\u022c\1\0\1\u022c\1\0\1\u022c"+
    "\1\0\1\u022c\1\0\1\u022c\1\0\1\u022c\1\0\1\u022c"+
    "\2\0\1\u022c\1\0\2\u022c\3\0\6\u022c\1\0\1\u022c"+
    "\1\0\1\u022c\1\0\1\u022c\3\0\1\u022c\3\0\1\u022c"+
    "\1\0\1\u022c\1\0\1\u022c\17\0\1\u023a\102\0\1\u023b"+
    "\10\0\1\u023b\2\0\1\u023b\71\0\1\u023c\10\0\1\u023c"+
    "\76\0\1\u023d\10\0\1\u023d\172\0\2\u023d\16\0\1\u01e8"+
    "\140\0\2\u023e\115\0\1\u023f\3\0\6\u023f\32\0\1\u0240"+
    "\10\0\1\u0240\156\0\2\u0241\22\0\2\u0237\2\0\2\u0237"+
    "\1\0\1\u0237\3\0\1\u0242\5\0\2\u0237\1\0\1\u0237"+
    "\1\0\1\u0237\1\0\1\u0237\1\0\1\u0237\1\0\1\u0237"+
    "\1\0\1\u0237\1\0\1\u0237\1\0\1\u0237\2\0\1\u0237"+
    "\1\0\2\u0237\3\0\6\u0237\1\0\1\u0237\1\0\1\u0237"+
    "\1\0\1\u0237\3\0\1\u0237\3\0\1\u0237\1\0\1\u0237"+
    "\1\0\1\u0237\54\0\1\u0243\3\0\6\u0243\76\0\1\u0244"+
    "\3\0\6\u0244\71\0\3\u0245\2\u0246\47\0\1\u0247\10\0"+
    "\1\u0247\102\0\1\u0248\107\0\1\u0249\103\0\1\u024a\10\0"+
    "\1\u024a\137\0\1\u023f\3\0\6\u023f\13\0\1\u024b\107\0"+
    "\1\u024c\45\0\2\u0137\123\0\1\u024d\3\0\6\u024d\76\0"+
    "\1\u0243\3\0\6\u0243\13\0\1\u024e\62\0\1\u0244\3\0"+
    "\6\u0244\13\0\1\u024f\16\0\1\u0250\10\0\1\u0250\172\0"+
    "\2\u0250\16\0\1\u01fd\105\0\1\u0251\10\0\1\u0251\2\0"+
    "\1\u0251\135\0\1\u0252\3\0\6\u0252\130\0\2\u0253\1\0"+
    "\77\u0254\1\0\10\u0254\53\0\1\u024d\3\0\6\u024d\13\0"+
    "\1\u0255\7\0\77\u0256\1\0\10\u0256\77\u0257\1\0\10\u0257"+
    "\16\0\1\u0258\135\0\2\u0259\115\0\1\u0252\3\0\6\u0252"+
    "\13\0\1\u025a\25\0\1\u025b\71\0\77\u0254\1\u025c\10\u0254"+
    "\77\u025d\1\0\10\u025d\77\u0256\1\u025e\10\u0256\77\u0257\1\u025f"+
    "\10\u0257\53\0\1\u0260\3\0\6\u0260\35\0\1\u0261\10\0"+
    "\1\u0261\64\0\77\u0262\1\0\10\u0262\3\0\2\u025b\2\0"+
    "\2\u025b\1\0\1\u025b\3\0\1\u0263\5\0\2\u025b\1\0"+
    "\1\u025b\1\0\1\u025b\1\0\1\u025b\1\0\1\u025b\1\0"+
    "\1\u025b\1\0\1\u025b\1\0\1\u025b\1\0\1\u025b\2\0"+
    "\1\u025b\1\0\2\u025b\3\0\6\u025b\1\0\1\u025b\1\0"+
    "\1\u025b\1\0\1\u025b\3\0\1\u025b\3\0\1\u025b\1\0"+
    "\1\u025b\1\0\1\u025b\56\0\1\u0264\32\0\77\u025d\1\u0265"+
    "\10\u025d\55\0\1\u0266\107\0\1\u0267\105\0\1\u0260\3\0"+
    "\6\u0260\13\0\1\u0268\114\0\2\u0269\1\0\77\u0262\1\u026a"+
    "\10\u0262\53\0\1\u026b\3\0\6\u026b\112\0\2\u026c\74\0"+
    "\1\u026d\121\0\2\u026e\106\0\2\u026f\17\0\77\u0270\1\0"+
    "\10\u0270\16\0\1\u0271\146\0\1\u0272\105\0\1\u026b\3\0"+
    "\6\u026b\13\0\1\u0273\103\0\3\u0274\100\0\2\u0275\113\0"+
    "\3\u0276\105\0\3\u0277\11\0\77\u0270\1\u0278\10\u0270\3\0"+
    "\2\u0271\2\0\2\u0271\1\0\1\u0271\3\0\1\u0279\5\0"+
    "\2\u0271\1\0\1\u0271\1\0\1\u0271\1\0\1\u0271\1\0"+
    "\1\u0271\1\0\1\u0271\1\0\1\u0271\1\0\1\u0271\1\0"+
    "\1\u0271\2\0\1\u0271\1\0\2\u0271\3\0\6\u0271\1\0"+
    "\1\u0271\1\0\1\u0271\1\0\1\u0271\3\0\1\u0271\3\0"+
    "\1\u0271\1\0\1\u0271\1\0\1\u0271\70\0\2\u027a\17\0"+
    "\77\u027b\1\0\10\u027b\7\0\1\u027c\10\0\1\u027c\163\0"+
    "\3\u027d\20\0\1\u027e\10\0\1\u027e\76\0\1\u027f\10\0"+
    "\1\u027f\144\0\1\u0280\105\0\1\u0281\3\0\6\u0281\117\0"+
    "\3\u0282\11\0\77\u027b\1\u0283\10\u027b\100\0\1\274\16\0"+
    "\1\u0284\10\0\1\u0284\167\0\1\u0285\107\0\1\333\76\0"+
    "\2\u0286\72\0\1\u0281\3\0\6\u0281\13\0\1\u0287\16\0"+
    "\1\u0288\10\0\1\u0288\144\0\1\u0289\132\0\1\u0112\10\0"+
    "\2\u0285\2\0\1\220\1\u028a\5\0\1\u0285\11\0\2\127"+
    "\23\0\1\222\3\0\1\223\3\222\1\224\1\222\6\0"+
    "\1\u0285\110\0\3\u028b\11\0\77\u028c\1\0\10\u028c\100\0"+
    "\1\u028d\76\0\2\u028e\26\0\1\u028f\10\0\1\u028f\76\0"+
    "\1\u0290\10\0\1\u0290\67\0\77\u028c\1\u0291\10\u028c\1\0"+
    "\2\u028d\2\0\1\356\1\u0292\5\0\1\u028d\11\0\2\253"+
    "\23\0\1\360\3\0\1\361\3\360\1\362\1\360\6\0"+
    "\1\u028d\110\0\3\u0293\21\0\1\u0294\10\0\1\u0294\166\0"+
    "\1\u0295\64\0\1\u0296\41\0\1\u0297\10\0\1\u0297\76\0"+
    "\1\u0298\10\0\1\u0298\100\0\1\u0299\10\0\1\u0299\2\0"+
    "\1\u0299\63\0\2\u0295\2\0\1\u0166\1\u029a\5\0\1\u0295"+
    "\11\0\2\u012a\23\0\1\u0168\3\0\1\u0169\3\u0168\1\u016a"+
    "\1\u0168\6\0\1\u0295\103\0\2\u029b\27\0\1\u029c\10\0"+
    "\1\u029c\166\0\1\u01ab\21\0\1\u029d\10\0\1\u029d\73\0"+
    "\1\u029e\10\0\1\u029e\163\0\3\u029f\22\0\1\u02a0\10\0"+
    "\1\u02a0\2\0\1\u02a0\75\0\1\u0285\104\0\1\u02a1\10\0"+
    "\1\u02a1\75\0\1\u02a2\10\0\1\u02a2\101\0\1\u02a3\10\0"+
    "\1\u02a3\75\0\1\u02a4\10\0\1\u02a4\2\0\1\u02a4\162\0"+
    "\1\u01fd\22\0\1\u028d\106\0\1\u02a5\10\0\1\u02a5\77\0"+
    "\1\u0295\74\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[47736];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\1\11\1\1\1\11\1\1\1\11\10\1"+
    "\63\0\1\1\161\0\1\11\114\0\2\1\102\0\1\11"+
    "\55\0\1\11\1\1\105\0\5\1\16\0\1\11\172\0"+
    "\1\11\131\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[677];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "1.0"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public CaseNumbers() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
	} 

	//private boolean numberSet = false;
	
	private String getSubjectValue() {
	
		if(yytext().toLowerCase().indexOf("pen") > -1) return "CRIMINAL";
		if(yytext().toLowerCase().indexOf("civ") > -1) return "CIVIL";
		
		return "";
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaseNumbers(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            } 
            // fall through
          case 11: break;
          case 2: 
            { addText(yytext());
		position++;
            } 
            // fall through
          case 12: break;
          case 3: 
            { checkEnd();
            } 
            // fall through
          case 13: break;
          case 4: 
            { if(annotationEntity.getValue().equals("")) {
		
			annotationEntity.setValue(yytext());
		
		} else {
		
			annotationEntity.setValue(annotationEntity.getValue() + "-" + yytext());
		}
		
		position += yylength();
		offset += yylength();
            } 
            // fall through
          case 14: break;
          case 5: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
            { if(annotationEntity.getValue().equals("")) {
		
			annotationEntity.setValue(yytext().toUpperCase());
		
		} else {
		
			annotationEntity.setValue(annotationEntity.getValue() + "-" + yytext().toUpperCase());
		}
		
		position += yylength();
		offset += yylength();
            } 
            // fall through
          case 15: break;
          case 6: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            } 
            // fall through
          case 16: break;
          case 7: 
            { AnnotationEntity subject = new Subject();
		subject.setText(Util.removeAllAnnotations(yytext()));
		subject.setPosition(position);
		subject.setValue(getSubjectValue());
		
		subject.addRelatedEntity(annotationEntity);
		annotationEntity.addRelatedEntity(subject);
		
		addEntity(subject, false);
		
		position += yylength();
		offset += yylength();
            } 
            // fall through
          case 17: break;
          case 8: 
            { start(new CaseNumber(), caseNumberState, true, true);
            } 
            // fall through
          case 18: break;
          case 9: 
            { addText(yytext()); 
	yybegin(lkn);
            } 
            // fall through
          case 19: break;
          case 10: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		offset += yylength();
		position += retrievedEntity.getText().length();
            } 
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java CaseNumbers [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        CaseNumbers scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new CaseNumbers(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
