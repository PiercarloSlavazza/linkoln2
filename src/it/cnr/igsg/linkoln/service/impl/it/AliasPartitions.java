/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
/* The following code was generated by JFlex 1.6.1 */

package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

import it.cnr.igsg.linkoln.service.impl.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AliasPartitions.jflex</tt>
 */
public class AliasPartitions extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;
  public static final int isolatePartitionState = 4;
  public static final int createPartitionState = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\5\0\1\4"+
    "\1\0\1\1\1\1\2\0\1\1\1\2\1\0\1\31\1\30\1\30"+
    "\1\30\1\30\1\30\1\30\1\30\1\30\1\30\1\30\1\12\1\11"+
    "\5\0\1\21\1\6\1\43\1\16\1\23\1\16\1\51\1\16\1\25"+
    "\1\16\1\45\1\35\1\33\1\5\1\27\1\10\1\16\1\41\1\17"+
    "\1\37\1\16\1\16\1\53\1\16\1\16\1\16\1\46\1\0\1\47"+
    "\1\0\1\3\1\0\1\20\1\14\1\42\1\0\1\22\1\0\1\50"+
    "\1\0\1\24\1\0\1\44\1\34\1\32\1\13\1\26\1\15\1\0"+
    "\1\40\1\7\1\36\1\0\1\0\1\52\1\0\1\0\1\0\12\0"+
    "\1\0\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0\1\0"+
    "\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0\2\0"+
    "\3\0\1\0\1\0\4\0\1\0\1\0\1\0\1\0\2\0\1\0"+
    "\1\0\2\0\1\0\1\0\1\0\1\0\3\0\2\0\1\0\1\0"+
    "\2\0\53\0\1\0\1\0\6\0\2\24\66\0\1\0\1\0\4\0"+
    "\1\0\1\0\17\0\1\7\u1c88\0\1\0\1\0\216\0\2\0\42\0"+
    "\1\0\1\0\u0155\0\1\2\1\2\4\0\1\0\16\0\1\0\1\0"+
    "\u0100\0\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\2\2\2\3\2\4\15\0\1\5\112\0"+
    "\1\6\101\0\1\6\10\0\1\7\4\0\1\10\16\0"+
    "\1\11\3\0\1\12\3\0\1\11\1\0\1\11\26\0"+
    "\1\13\175\0\1\14\6\0\1\14\2\0\1\14\150\0"+
    "\2\14\65\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[524];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\260\0\u0108"+
    "\0\260\0\u0134\0\260\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210"+
    "\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370"+
    "\0\u039c\0\260\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4"+
    "\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604"+
    "\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764"+
    "\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4"+
    "\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84"+
    "\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4"+
    "\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44"+
    "\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4"+
    "\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\260\0\u1080\0\u10ac\0\u10d8"+
    "\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238"+
    "\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398"+
    "\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8"+
    "\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658"+
    "\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8"+
    "\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918"+
    "\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78"+
    "\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1b80\0\u1bac"+
    "\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\260"+
    "\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\260\0\u1dbc\0\u1de8\0\u1e14"+
    "\0\u1e40\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74"+
    "\0\u1fa0\0\u1fcc\0\u1ff8\0\260\0\u2024\0\u2050\0\u207c\0\260"+
    "\0\u20a8\0\u20d4\0\u2100\0\u212c\0\u2158\0\u2184\0\u21b0\0\u212c"+
    "\0\u21dc\0\u2208\0\u2234\0\u2184\0\u2260\0\u228c\0\u22b8\0\u22e4"+
    "\0\u2310\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444"+
    "\0\u2470\0\u249c\0\u24c8\0\u24f4\0\260\0\u2520\0\u254c\0\u2578"+
    "\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u2654\0\u2680\0\u26ac\0\u26d8"+
    "\0\u2704\0\u2730\0\u275c\0\u2788\0\u27b4\0\u27e0\0\u280c\0\u2838"+
    "\0\u2864\0\u2890\0\u28bc\0\u28e8\0\u2914\0\u2940\0\u296c\0\u2998"+
    "\0\u29c4\0\u29f0\0\u2a1c\0\u2a48\0\u2a74\0\u2aa0\0\u2acc\0\u2af8"+
    "\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58"+
    "\0\u2c84\0\u2cb0\0\u2cdc\0\u2d08\0\u2d34\0\u2d60\0\u2d8c\0\u2db8"+
    "\0\u2de4\0\u2e10\0\u2e3c\0\u2e68\0\u2e94\0\u2ec0\0\u2eec\0\u2f18"+
    "\0\u2f44\0\u2f70\0\u2f9c\0\u2fc8\0\u2ff4\0\u3020\0\u304c\0\u3078"+
    "\0\u30a4\0\u30d0\0\u30fc\0\u3128\0\u3154\0\u3180\0\u31ac\0\u31d8"+
    "\0\u3204\0\u3230\0\u325c\0\u3288\0\u32b4\0\u32e0\0\u330c\0\u3338"+
    "\0\u3364\0\u3390\0\u33bc\0\u33e8\0\u3414\0\u3440\0\u346c\0\u3498"+
    "\0\u34c4\0\u34f0\0\u351c\0\u3548\0\u3574\0\u35a0\0\u35cc\0\u35f8"+
    "\0\u3624\0\u3650\0\u367c\0\u36a8\0\u36d4\0\u3700\0\u372c\0\u3758"+
    "\0\u3784\0\u37b0\0\u37dc\0\u3808\0\u3834\0\u3860\0\u388c\0\u38b8"+
    "\0\u38e4\0\u3910\0\u393c\0\u3968\0\u3994\0\u39c0\0\u39ec\0\u3a18"+
    "\0\u3a44\0\u3a70\0\u3a9c\0\u3ac8\0\u3af4\0\u3a9c\0\u3b20\0\u3b4c"+
    "\0\u3b78\0\u3ba4\0\u3bd0\0\u3bfc\0\u3c28\0\u3ba4\0\u3c54\0\u3c80"+
    "\0\u3cac\0\u3cd8\0\u3c28\0\u3d04\0\u3d30\0\u3d5c\0\u3d88\0\u3db4"+
    "\0\u3de0\0\u3e0c\0\u3e38\0\u3e64\0\u3e90\0\u3ebc\0\u3ee8\0\u3f14"+
    "\0\u3f40\0\u3f6c\0\u3f98\0\u3fc4\0\u3ff0\0\u401c\0\u4048\0\u4074"+
    "\0\u40a0\0\u40cc\0\u40f8\0\u4124\0\u4150\0\u417c\0\u41a8\0\u41d4"+
    "\0\u4200\0\u422c\0\u4258\0\u4284\0\u42b0\0\u42dc\0\u4308\0\u4334"+
    "\0\u4360\0\u438c\0\u43b8\0\u43e4\0\u4410\0\u443c\0\u4468\0\u4494"+
    "\0\u44c0\0\u44ec\0\u4518\0\u4544\0\u4570\0\u459c\0\u45c8\0\u45f4"+
    "\0\u4620\0\u464c\0\u4678\0\u46a4\0\u46d0\0\u46fc\0\u4728\0\u4754"+
    "\0\u4780\0\u47ac\0\u47d8\0\u4804\0\u4830\0\u485c\0\u4888\0\u48b4"+
    "\0\u48e0\0\u490c\0\u4938\0\u4964\0\u4990\0\u49bc\0\u49e8\0\u4a14"+
    "\0\u4a40\0\u4a6c\0\u4a98\0\u4ac4\0\u4af0\0\u4b1c\0\u4b48\0\u4b74"+
    "\0\u4ba0\0\u4bcc\0\u4bf8\0\u4c24\0\u4c50\0\u4c7c\0\u4ca8\0\u4cd4"+
    "\0\u4d00\0\u4d2c\0\u4d58\0\u4d84\0\u4db0\0\u4ddc\0\u4e08\0\u4ddc"+
    "\0\u4e34\0\u4e60\0\u4e08\0\u4e8c\0\u4eb8\0\u4ee4\0\u4f10\0\u4f3c"+
    "\0\u4f68\0\u4f94\0\u4fc0\0\u4fec\0\u5018\0\u5044\0\u5070\0\u509c"+
    "\0\u50c8\0\u50f4\0\u5120\0\u514c\0\u5178\0\u51a4\0\u51d0\0\u51fc"+
    "\0\u5228\0\u5254\0\u5280\0\u52ac\0\u52d8\0\u5304\0\u5330\0\u535c"+
    "\0\u5388\0\u53b4\0\u53e0\0\u540c\0\u5438\0\u5464\0\u5490\0\u54bc"+
    "\0\u54e8\0\u5514\0\u5540\0\u556c\0\u5598\0\u55c4\0\u55f0\0\u561c"+
    "\0\u5648\0\u5674\0\u56a0\0\u56cc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[524];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\46\5\1\6\5\5\46\7\1\10\5\7\46\11\1\12"+
    "\5\11\46\13\1\14\5\13\110\0\2\15\47\0\1\16"+
    "\56\0\2\17\52\0\2\20\62\0\2\21\42\0\2\22"+
    "\62\0\2\23\52\0\2\24\13\0\1\25\5\0\1\25"+
    "\104\0\2\26\13\0\1\27\5\0\1\27\45\0\1\30"+
    "\5\0\1\30\52\0\1\31\46\0\1\32\5\0\1\32"+
    "\52\0\1\33\53\0\1\34\44\0\1\35\1\0\2\35"+
    "\1\0\1\35\5\0\2\35\1\36\1\37\1\0\1\35"+
    "\1\0\1\35\1\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\3\0\1\35\1\0\1\35\3\0\1\40\1\0\2\40"+
    "\1\0\1\40\5\0\2\40\1\0\1\40\1\0\1\40"+
    "\1\41\1\42\1\0\1\40\3\0\1\40\1\43\1\44"+
    "\1\0\1\40\1\0\1\40\1\45\1\46\1\0\1\40"+
    "\3\0\1\40\1\0\1\40\3\0\1\47\1\0\2\47"+
    "\1\0\1\47\5\0\2\47\1\0\1\47\1\0\1\47"+
    "\1\50\1\51\1\0\1\47\3\0\1\47\1\52\1\53"+
    "\1\0\1\47\1\0\1\47\1\54\1\55\1\0\1\47"+
    "\3\0\1\47\1\0\1\47\3\0\1\35\1\0\2\35"+
    "\1\0\1\35\1\0\1\56\3\0\2\35\1\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\3\0\1\35"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\3\0\1\35\1\0\1\35\40\0\2\57"+
    "\15\0\1\35\1\0\2\35\1\0\1\35\1\0\1\56"+
    "\3\0\2\35\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\3\0\1\35\1\0\1\35\1\0\1\35"+
    "\1\57\1\60\1\0\1\35\1\0\1\35\3\0\1\35"+
    "\1\0\1\35\3\0\1\40\1\0\2\40\1\0\1\40"+
    "\1\0\1\61\3\0\2\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\3\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\3\0\1\40\1\0\1\40\36\0\2\62\17\0\1\40"+
    "\1\0\2\40\1\0\1\40\1\0\1\61\3\0\2\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\3\0\1\40\1\0\1\40\1\62\1\63\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\3\0\1\40\1\0\1\40"+
    "\22\0\2\64\33\0\1\40\1\0\2\40\1\0\1\40"+
    "\1\0\1\61\3\0\2\40\1\0\1\40\1\64\1\65"+
    "\1\0\1\40\1\0\1\40\3\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\3\0\1\40\1\0\1\40\26\0\2\66\27\0\1\40"+
    "\1\0\2\40\1\0\1\40\1\0\1\61\3\0\2\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\1\66\1\67"+
    "\3\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\3\0\1\40\1\0\1\40"+
    "\3\0\1\47\1\0\2\47\1\0\1\47\1\0\1\70"+
    "\3\0\2\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\3\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\3\0\1\47"+
    "\1\0\1\47\36\0\2\71\17\0\1\47\1\0\2\47"+
    "\1\0\1\47\1\0\1\70\3\0\2\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\3\0\1\47"+
    "\1\0\1\47\1\71\1\72\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\3\0\1\47\1\0\1\47\22\0\2\73"+
    "\33\0\1\47\1\0\2\47\1\0\1\47\1\0\1\70"+
    "\3\0\2\47\1\0\1\47\1\73\1\74\1\0\1\47"+
    "\1\0\1\47\3\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\3\0\1\47"+
    "\1\0\1\47\26\0\2\75\27\0\1\47\1\0\2\47"+
    "\1\0\1\47\1\0\1\70\3\0\2\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\75\1\76\3\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\3\0\1\47\1\0\1\47\2\0\2\56"+
    "\1\0\2\56\1\0\1\56\1\0\1\77\3\0\2\56"+
    "\1\0\1\56\1\0\1\56\1\0\1\56\1\0\2\56"+
    "\2\0\1\56\1\0\1\56\1\0\1\56\1\0\1\56"+
    "\1\0\1\56\1\0\1\56\3\0\1\56\1\0\1\56"+
    "\36\0\2\100\17\0\1\35\1\0\2\35\1\0\1\35"+
    "\1\0\1\56\3\0\2\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\1\35\3\0\1\35\1\0\1\35"+
    "\1\100\1\101\1\0\1\35\1\0\1\35\1\0\1\35"+
    "\3\0\1\35\1\0\1\35\2\0\2\61\1\0\2\61"+
    "\1\0\1\61\1\0\1\102\3\0\2\61\1\0\1\61"+
    "\1\0\1\61\1\0\1\61\1\0\2\61\2\0\1\61"+
    "\1\0\1\61\1\0\1\61\1\0\1\61\1\0\1\61"+
    "\1\0\1\61\3\0\1\61\1\0\1\61\22\0\2\103"+
    "\33\0\1\40\1\0\2\40\1\0\1\40\1\0\1\61"+
    "\3\0\2\40\1\0\1\40\1\103\1\104\1\0\1\40"+
    "\1\0\1\40\3\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\3\0\1\40"+
    "\1\0\1\40\36\0\2\105\10\0\2\106\5\0\1\40"+
    "\1\0\2\40\1\0\1\40\1\0\1\61\3\0\2\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\3\0\1\40\1\0\1\40\1\105\1\107\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\2\0\1\106\1\110\1\0"+
    "\1\40\32\0\2\111\23\0\1\40\1\0\2\40\1\0"+
    "\1\40\1\0\1\61\3\0\2\40\1\0\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\1\40\2\0\1\111\1\112"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\3\0\1\40\1\0\1\40\2\0\2\70"+
    "\1\0\2\70\1\0\1\70\1\0\1\113\3\0\2\70"+
    "\1\0\1\70\1\0\1\70\1\0\1\70\1\0\2\70"+
    "\2\0\1\70\1\0\1\70\1\0\1\70\1\0\1\70"+
    "\1\0\1\70\1\0\1\70\3\0\1\70\1\0\1\70"+
    "\22\0\2\114\33\0\1\47\1\0\2\47\1\0\1\47"+
    "\1\0\1\70\3\0\2\47\1\0\1\47\1\114\1\115"+
    "\1\0\1\47\1\0\1\47\3\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\3\0\1\47\1\0\1\47\36\0\2\116\17\0\1\47"+
    "\1\0\2\47\1\0\1\47\1\0\1\70\3\0\2\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\3\0\1\47\1\0\1\47\1\116\1\117\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\3\0\1\47\1\0\1\47"+
    "\32\0\2\120\23\0\1\47\1\0\2\47\1\0\1\47"+
    "\1\0\1\70\3\0\2\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\2\0\1\120\1\121\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\3\0\1\47\1\0\1\47\30\0\1\122\47\0"+
    "\2\123\31\0\1\35\1\0\2\35\1\0\1\35\1\0"+
    "\1\56\3\0\2\35\1\0\1\35\1\0\1\35\1\123"+
    "\1\124\1\0\1\35\3\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\3\0"+
    "\1\35\1\0\1\35\30\0\1\125\55\0\2\126\23\0"+
    "\1\40\1\0\2\40\1\0\1\40\1\0\1\61\3\0"+
    "\2\40\1\0\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\1\40\2\0\1\126\1\127\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\3\0\1\40"+
    "\1\0\1\40\36\0\2\130\17\0\1\131\53\0\1\40"+
    "\1\0\2\40\1\0\1\40\1\0\1\61\3\0\2\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\3\0\1\40\1\0\1\40\1\130\1\132\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\3\0\1\40\1\0\1\40"+
    "\3\0\1\133\1\0\2\40\1\0\1\40\1\0\1\61"+
    "\3\0\2\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\3\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\3\0\1\40"+
    "\1\0\1\40\32\0\2\134\23\0\1\40\1\0\2\40"+
    "\1\0\1\40\1\0\1\61\3\0\2\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\2\0\1\134"+
    "\1\135\1\0\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\1\40\1\0\1\40\3\0\1\40\1\0\1\40\30\0"+
    "\1\136\55\0\2\137\23\0\1\47\1\0\2\47\1\0"+
    "\1\47\1\0\1\70\3\0\2\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\2\0\1\137\1\140"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\3\0\1\47\1\0\1\47\36\0\2\141"+
    "\17\0\1\47\1\0\2\47\1\0\1\47\1\0\1\70"+
    "\3\0\2\47\1\0\1\47\1\0\1\47\1\0\1\47"+
    "\1\0\1\47\3\0\1\47\1\0\1\47\1\141\1\142"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\3\0\1\47"+
    "\1\0\1\47\32\0\2\143\23\0\1\47\1\0\2\47"+
    "\1\0\1\47\1\0\1\70\3\0\2\47\1\0\1\47"+
    "\1\0\1\47\1\0\1\47\1\0\1\47\2\0\1\143"+
    "\1\144\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\3\0\1\47\1\0\1\47\30\0"+
    "\1\122\16\0\1\145\46\0\2\146\13\0\1\35\1\0"+
    "\2\35\1\0\1\35\1\0\1\56\3\0\2\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\3\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\1\146"+
    "\1\147\1\0\1\35\3\0\1\35\1\0\1\35\30\0"+
    "\1\125\16\0\1\150\16\0\1\151\44\0\1\40\1\0"+
    "\2\40\1\0\1\40\1\0\1\151\3\0\2\40\1\0"+
    "\1\40\1\0\1\40\1\0\1\40\1\0\1\40\3\0"+
    "\1\40\1\0\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\1\40\1\0\1\40\3\0\1\40\1\0\1\40\22\0"+
    "\2\152\50\0\2\153\35\0\1\40\1\0\2\40\1\0"+
    "\1\40\1\0\1\61\3\0\2\40\1\0\1\40\1\152"+
    "\1\154\1\0\1\40\1\0\1\40\3\0\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\1\40\3\0\1\40\1\0\1\40\3\0\1\40\1\0"+
    "\2\40\1\0\1\40\1\0\1\61\3\0\2\40\1\153"+
    "\1\155\1\0\1\40\1\0\1\40\1\0\1\40\3\0"+
    "\1\40\1\0\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\1\40\1\0\1\40\3\0\1\40\1\0\1\40\20\0"+
    "\2\156\35\0\1\40\1\0\2\40\1\0\1\40\1\0"+
    "\1\61\3\0\2\40\1\156\1\157\1\0\1\40\1\0"+
    "\1\40\1\0\1\40\3\0\1\40\1\0\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\1\40\1\0\1\40\3\0"+
    "\1\40\1\0\1\40\30\0\1\136\16\0\1\160\16\0"+
    "\1\161\44\0\1\47\1\0\2\47\1\0\1\47\1\0"+
    "\1\161\3\0\2\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\3\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\3\0"+
    "\1\47\1\0\1\47\22\0\2\162\33\0\1\47\1\0"+
    "\2\47\1\0\1\47\1\0\1\70\3\0\2\47\1\0"+
    "\1\47\1\162\1\163\1\0\1\47\1\0\1\47\3\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\3\0\1\47\1\0\1\47\20\0"+
    "\2\137\35\0\1\47\1\0\2\47\1\0\1\47\1\0"+
    "\1\70\3\0\2\47\1\137\1\140\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\3\0\1\47\1\0\1\47\1\0"+
    "\1\47\1\0\1\47\1\0\1\47\1\0\1\47\3\0"+
    "\1\47\1\0\1\47\34\0\2\164\21\0\1\35\1\0"+
    "\2\35\1\0\1\35\1\0\1\56\3\0\2\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\3\0"+
    "\1\35\1\164\1\165\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\3\0\1\35\1\0\1\35\46\166"+
    "\1\0\5\166\2\0\2\151\1\0\2\151\1\0\1\151"+
    "\1\0\1\167\3\0\2\151\1\0\1\151\1\0\1\151"+
    "\1\0\1\151\1\0\2\151\2\0\1\151\1\0\1\151"+
    "\1\0\1\151\1\0\1\151\1\0\1\151\1\0\1\151"+
    "\3\0\1\151\1\0\1\151\40\0\2\170\46\0\2\171"+
    "\21\0\1\40\1\0\2\40\1\0\1\40\1\0\1\61"+
    "\3\0\2\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\3\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\170\1\172\1\0\1\40\1\0\1\40\3\0\1\40"+
    "\1\0\1\40\3\0\1\40\1\0\2\40\1\0\1\40"+
    "\1\0\1\61\3\0\2\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\3\0\1\40\1\171\1\173"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\3\0\1\40\1\0\1\40\12\0\1\174\44\0\1\40"+
    "\1\0\2\40\1\0\1\40\1\0\1\174\3\0\2\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\3\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\3\0\1\40\1\0\1\40"+
    "\46\175\1\0\5\175\2\0\2\161\1\0\2\161\1\0"+
    "\1\161\1\0\1\176\3\0\2\161\1\0\1\161\1\0"+
    "\1\161\1\0\1\161\1\0\2\161\2\0\1\161\1\0"+
    "\1\161\1\0\1\161\1\0\1\161\1\0\1\161\1\0"+
    "\1\161\3\0\1\161\1\0\1\161\40\0\2\137\15\0"+
    "\1\47\1\0\2\47\1\0\1\47\1\0\1\70\3\0"+
    "\2\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\1\47\3\0\1\47\1\0\1\47\1\0\1\47\1\137"+
    "\1\140\1\0\1\47\1\0\1\47\3\0\1\47\1\0"+
    "\1\47\22\0\2\177\33\0\1\35\1\0\2\35\1\0"+
    "\1\35\1\0\1\56\3\0\2\35\1\0\1\35\1\177"+
    "\1\200\1\0\1\35\1\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\3\0\1\35\1\0\1\35\46\166\1\201\5\166"+
    "\30\0\1\202\35\0\1\203\65\0\2\204\31\0\1\40"+
    "\1\0\2\40\1\0\1\40\1\0\1\203\3\0\2\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\3\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\3\0\1\40\1\0\1\40"+
    "\3\0\1\40\1\0\2\40\1\0\1\40\1\0\1\61"+
    "\3\0\2\40\1\0\1\40\1\0\1\40\1\204\1\205"+
    "\1\0\1\40\3\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\3\0\1\40"+
    "\1\0\1\40\2\0\2\174\1\0\2\174\1\0\1\174"+
    "\1\0\1\206\3\0\2\174\1\0\1\174\1\0\1\174"+
    "\1\0\1\174\1\0\2\174\2\0\1\174\1\0\1\174"+
    "\1\0\1\174\1\0\1\174\1\0\1\174\1\0\1\174"+
    "\3\0\1\174\1\0\1\174\46\175\1\207\5\175\30\0"+
    "\1\210\35\0\1\211\44\0\1\35\1\0\2\35\1\0"+
    "\1\35\1\0\1\212\3\0\2\35\1\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\3\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0"+
    "\1\35\3\0\1\35\1\0\1\35\31\0\1\213\52\0"+
    "\1\202\16\0\1\214\6\0\2\203\1\0\2\203\1\0"+
    "\1\203\1\0\1\215\3\0\2\203\1\0\1\203\1\0"+
    "\1\203\1\0\1\203\1\0\2\203\2\0\1\203\1\0"+
    "\1\203\1\0\1\203\1\0\1\203\1\0\1\203\1\0"+
    "\1\203\3\0\1\203\1\0\1\203\20\0\2\216\35\0"+
    "\1\40\1\0\2\40\1\0\1\40\1\0\1\61\3\0"+
    "\2\40\1\216\1\217\1\0\1\40\1\0\1\40\1\0"+
    "\1\40\3\0\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\1\40\3\0\1\40\1\0"+
    "\1\40\30\0\1\220\54\0\1\221\52\0\1\210\16\0"+
    "\1\222\6\0\2\211\1\0\2\211\1\0\1\211\1\0"+
    "\1\223\3\0\2\211\1\0\1\211\1\0\1\211\1\0"+
    "\1\211\1\0\2\211\2\0\1\211\1\0\1\211\1\0"+
    "\1\211\1\0\1\211\1\0\1\211\1\0\1\211\3\0"+
    "\1\211\1\0\1\211\2\0\2\212\1\0\2\212\1\0"+
    "\1\212\1\0\1\224\3\0\2\212\1\0\1\212\1\0"+
    "\1\212\1\0\1\212\1\0\2\212\2\0\1\212\1\0"+
    "\1\212\1\0\1\212\1\0\1\212\1\0\1\212\1\0"+
    "\1\212\3\0\1\212\1\0\1\212\34\0\2\225\16\0"+
    "\46\226\1\0\5\226\30\0\1\227\32\0\1\230\7\0"+
    "\1\230\37\0\1\40\1\0\2\40\1\230\1\40\1\0"+
    "\1\61\3\0\1\40\1\231\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\3\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\3\0\1\40\1\0\1\40\30\0\1\220\16\0\1\232"+
    "\40\0\2\233\16\0\46\234\1\0\5\234\30\0\1\235"+
    "\53\0\1\236\67\0\2\237\6\0\46\226\1\240\5\226"+
    "\30\0\1\227\16\0\1\241\16\0\1\242\44\0\1\40"+
    "\1\0\2\40\1\0\1\40\1\0\1\242\3\0\2\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\3\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\3\0\1\40\1\0\1\40"+
    "\46\243\1\0\5\243\44\0\2\244\6\0\46\234\1\245"+
    "\5\234\30\0\1\235\16\0\1\246\34\0\1\236\16\0"+
    "\1\247\11\0\1\250\5\0\1\250\71\0\1\251\22\0"+
    "\46\252\1\0\5\252\2\0\2\242\1\0\2\242\1\0"+
    "\1\242\1\0\1\253\3\0\2\242\1\0\1\242\1\0"+
    "\1\242\1\0\1\242\1\0\2\242\2\0\1\242\1\0"+
    "\1\242\1\0\1\242\1\0\1\242\1\0\1\242\1\0"+
    "\1\242\3\0\1\242\1\0\1\242\46\243\1\254\5\243"+
    "\5\0\1\255\5\0\1\255\71\0\1\256\22\0\46\257"+
    "\1\0\5\257\47\0\1\260\40\0\2\261\16\0\46\252"+
    "\1\262\5\252\30\0\1\263\54\0\1\264\71\0\1\265"+
    "\40\0\2\266\16\0\46\257\1\267\5\257\44\0\2\270"+
    "\37\0\1\271\52\0\1\263\16\0\1\272\40\0\2\273"+
    "\62\0\2\274\37\0\1\275\27\0\1\276\5\0\1\276"+
    "\74\0\2\277\16\0\46\300\1\0\5\300\44\0\2\301"+
    "\13\0\1\302\5\0\1\302\74\0\2\303\65\0\1\304"+
    "\50\0\2\305\6\0\46\300\1\306\5\300\5\0\1\307"+
    "\5\0\1\307\107\0\1\310\50\0\2\311\13\0\1\312"+
    "\5\0\1\312\71\0\1\313\71\0\1\314\11\0\1\315"+
    "\5\0\1\315\107\0\1\316\40\0\2\317\17\0\3\320"+
    "\1\321\4\0\2\320\33\0\1\322\54\0\1\323\5\0"+
    "\3\324\1\325\4\0\2\324\33\0\1\326\51\0\2\327"+
    "\13\0\1\330\5\0\1\330\74\0\2\331\17\0\3\323"+
    "\1\332\4\0\2\323\33\0\1\333\12\0\1\334\5\0"+
    "\1\334\74\0\2\335\23\0\1\336\5\0\1\336\46\0"+
    "\1\337\5\0\1\337\103\0\2\340\13\0\1\341\5\0"+
    "\1\341\74\0\2\342\24\0\1\343\5\0\1\343\103\0"+
    "\2\344\55\0\1\345\13\0\1\346\7\0\1\346\41\0"+
    "\1\347\5\0\1\347\46\0\1\350\5\0\1\350\103\0"+
    "\2\351\15\0\1\352\7\0\1\352\41\0\1\353\5\0"+
    "\1\353\50\0\1\354\4\0\1\354\50\0\1\355\50\0"+
    "\1\356\7\0\1\356\41\0\1\357\5\0\1\357\50\0"+
    "\1\360\4\0\1\360\50\0\1\361\52\0\1\320\51\0"+
    "\1\362\7\0\1\362\4\0\2\41\6\0\2\363\26\0"+
    "\1\364\4\0\1\364\50\0\1\365\52\0\1\324\51\0"+
    "\1\366\7\0\1\366\4\0\2\41\64\0\2\367\36\0"+
    "\2\370\41\0\1\323\51\0\1\371\7\0\1\371\14\0"+
    "\2\372\54\0\2\373\24\0\1\374\4\0\1\374\74\0"+
    "\2\375\52\0\2\376\36\0\2\377\40\0\1\u0100\4\0"+
    "\1\u0100\110\0\2\u0101\36\0\2\u0102\24\0\1\u0103\4\0"+
    "\1\u0103\106\0\2\u0104\54\0\2\u0105\12\0\1\u0106\63\0"+
    "\2\u0107\102\0\2\177\3\0\1\u0108\62\0\1\u0109\43\0"+
    "\2\u0106\1\0\2\u0106\1\0\1\u0106\1\0\1\u010a\3\0"+
    "\2\u0106\1\0\1\u0106\1\0\1\u0106\1\0\1\u0106\1\0"+
    "\2\u0106\2\0\1\u0106\1\0\1\u0106\1\0\1\u0106\1\0"+
    "\1\u0106\1\0\1\u0106\1\0\1\u0106\3\0\1\u0106\1\0"+
    "\1\u0106\40\0\2\u0105\32\0\2\u010b\34\0\2\u0109\1\0"+
    "\2\u0109\1\0\1\u0109\1\0\1\u010c\3\0\2\u0109\1\0"+
    "\1\u0109\1\0\1\u0109\1\0\1\u0109\1\0\2\u0109\2\0"+
    "\1\u0109\1\0\1\u0109\1\0\1\u0109\1\0\1\u0109\1\0"+
    "\1\u0109\1\0\1\u0109\3\0\1\u0109\1\0\1\u0109\30\0"+
    "\1\u010d\57\0\2\u010e\46\0\1\u010f\53\0\1\u010d\16\0"+
    "\1\u0110\30\0\2\u0111\56\0\1\u010f\16\0\1\u0112\4\0"+
    "\46\u0113\1\0\5\u0113\20\0\2\u0114\32\0\46\u0115\1\0"+
    "\5\u0115\46\u0113\1\u0116\5\u0113\7\0\1\u0117\7\0\1\u0117"+
    "\34\0\46\u0115\1\u0118\5\u0115\31\0\1\u0119\34\0\1\u011a"+
    "\72\0\1\u011b\56\0\2\u011c\20\0\2\u011a\1\0\2\u011a"+
    "\1\0\1\u011a\1\0\1\u011d\3\0\2\u011a\1\0\1\u011a"+
    "\1\0\1\u011a\1\0\1\u011a\1\0\2\u011a\2\0\1\u011a"+
    "\1\0\1\u011a\1\0\1\u011a\1\0\1\u011a\1\0\1\u011a"+
    "\1\0\1\u011a\3\0\1\u011a\1\0\1\u011a\34\0\2\u011e"+
    "\62\0\2\u011f\36\0\1\u0120\67\0\2\u0121\13\0\1\u0122"+
    "\5\0\1\u0122\70\0\1\u0120\16\0\1\u0123\11\0\1\u0124"+
    "\5\0\1\u0124\107\0\1\320\4\0\46\u0125\1\0\5\u0125"+
    "\47\0\1\324\4\0\46\u0125\1\u0126\5\u0125\31\0\1\u0127"+
    "\56\0\2\u0128\62\0\2\u0129\13\0\1\u012a\5\0\1\u012a"+
    "\107\0\1\u012b\5\0\3\u012b\1\u012c\4\0\2\u012b\33\0"+
    "\1\u012d\12\0\1\u012e\5\0\1\u012e\74\0\2\u012f\24\0"+
    "\1\u0130\5\0\1\u0130\103\0\2\u0131\15\0\1\u0132\7\0"+
    "\1\u0132\41\0\1\u0133\5\0\1\u0133\50\0\1\u0134\4\0"+
    "\1\u0134\50\0\1\u0135\52\0\1\u012b\51\0\1\u0136\7\0"+
    "\1\u0136\4\0\2\u0137\6\0\2\u0138\4\0\2\u0139\46\0"+
    "\2\u013a\52\0\2\u013b\36\0\2\u013c\56\0\2\u013d\34\0"+
    "\1\u013e\4\0\1\u013e\60\0\2\u013f\66\0\2\u0140\46\0"+
    "\2\u0141\72\0\2\u0117\32\0\2\u0142\56\0\2\u0143\46\0"+
    "\2\u0144\32\0\1\u0145\63\0\2\u0146\50\0\2\u0147\34\0"+
    "\2\u0145\1\0\2\u0145\1\0\1\u0145\1\0\1\u0148\3\0"+
    "\2\u0145\1\0\1\u0145\1\0\1\u0145\1\0\1\u0145\1\0"+
    "\2\u0145\2\0\1\u0145\1\0\1\u0145\1\0\1\u0145\1\0"+
    "\1\u0145\1\0\1\u0145\1\0\1\u0145\3\0\1\u0145\1\0"+
    "\1\u0145\40\0\2\u0149\24\0\1\u014a\71\0\1\u014b\35\0"+
    "\1\u014c\43\0\2\u014a\1\0\2\u014a\1\0\1\u014a\1\0"+
    "\1\u014d\3\0\2\u014a\1\0\1\u014a\1\0\1\u014a\1\0"+
    "\1\u014a\1\0\2\u014a\2\0\1\u014a\1\0\1\u014a\1\0"+
    "\1\u014a\1\0\1\u014a\1\0\1\u014a\1\0\1\u014a\3\0"+
    "\1\u014a\1\0\1\u014a\30\0\1\u014b\16\0\1\u014e\6\0"+
    "\2\u014c\1\0\2\u014c\1\0\1\u014c\1\0\1\u014f\3\0"+
    "\2\u014c\1\0\1\u014c\1\0\1\u014c\1\0\1\u014c\1\0"+
    "\2\u014c\2\0\1\u014c\1\0\1\u014c\1\0\1\u014c\1\0"+
    "\1\u014c\1\0\1\u014c\1\0\1\u014c\3\0\1\u014c\1\0"+
    "\1\u014c\30\0\1\u0150\23\0\46\u0151\1\0\5\u0151\30\0"+
    "\1\u0152\53\0\1\u0150\16\0\1\u0153\4\0\46\u0151\1\u0154"+
    "\5\u0151\30\0\1\u0152\16\0\1\u0155\4\0\46\u0156\1\0"+
    "\5\u0156\31\0\1\u0157\22\0\46\u0158\1\0\5\u0158\46\u0156"+
    "\1\u0159\5\u0156\34\0\2\u015a\16\0\46\u0158\1\u015b\5\u0158"+
    "\31\0\1\u015c\66\0\2\u015d\37\0\1\u015e\56\0\2\u015f"+
    "\23\0\1\u0160\5\0\1\u0160\74\0\2\u0161\62\0\2\u0162"+
    "\55\0\1\u0163\50\0\2\u0164\13\0\1\u0165\5\0\1\u0165"+
    "\41\0\3\u0166\1\u0167\4\0\2\u0166\33\0\1\u0168\12\0"+
    "\1\u0169\5\0\1\u0169\107\0\1\u016a\11\0\1\u016b\5\0"+
    "\1\u016b\74\0\2\u016c\65\0\1\u016d\5\0\3\u016e\1\u016f"+
    "\4\0\2\u016e\33\0\1\u0170\13\0\1\u0171\5\0\1\u0171"+
    "\103\0\2\u0172\7\0\3\u0173\1\u0174\4\0\2\u0173\33\0"+
    "\1\u0175\12\0\1\u0176\5\0\1\u0176\74\0\2\u0177\25\0"+
    "\1\u0178\7\0\1\u0178\41\0\1\u0179\5\0\1\u0179\45\0"+
    "\1\u017a\5\0\1\u017a\74\0\2\u017b\24\0\1\u017c\5\0"+
    "\1\u017c\103\0\2\u017d\16\0\1\u017e\4\0\1\u017e\50\0"+
    "\1\u017f\47\0\1\u0180\5\0\1\u0180\103\0\2\u0181\15\0"+
    "\1\u0182\7\0\1\u0182\41\0\1\u0183\5\0\1\u0183\51\0"+
    "\1\u0166\51\0\1\u0184\7\0\1\u0184\4\0\2\u0137\35\0"+
    "\1\u0185\7\0\1\u0185\41\0\1\u0186\5\0\1\u0186\50\0"+
    "\1\u0187\4\0\1\u0187\50\0\1\u0188\77\0\2\u0189\24\0"+
    "\1\u018a\4\0\1\u018a\50\0\1\u018b\52\0\1\u016e\51\0"+
    "\1\u018c\7\0\1\u018c\4\0\2\u018d\6\0\2\u018e\4\0"+
    "\2\u018f\20\0\1\u0190\4\0\1\u0190\47\0\1\u0173\51\0"+
    "\1\u0191\7\0\1\u0191\4\0\2\u018d\6\0\2\u0138\54\0"+
    "\2\u0192\52\0\2\u0193\36\0\2\u0194\56\0\2\u0195\76\0"+
    "\2\u0196\36\0\2\u0197\24\0\1\u0198\4\0\1\u0198\60\0"+
    "\2\u0199\66\0\2\u019a\46\0\2\u019b\32\0\1\u019c\51\0"+
    "\1\u019d\4\0\1\u019d\110\0\2\u019e\32\0\2\u0149\56\0"+
    "\2\u019f\46\0\2\u01a0\22\0\2\u019c\1\0\2\u019c\1\0"+
    "\1\u019c\1\0\1\u01a1\3\0\2\u019c\1\0\1\u019c\1\0"+
    "\1\u019c\1\0\1\u019c\1\0\2\u019c\2\0\1\u019c\1\0"+
    "\1\u019c\1\0\1\u019c\1\0\1\u019c\1\0\1\u019c\1\0"+
    "\1\u019c\3\0\1\u019c\1\0\1\u019c\52\0\2\u01a2\12\0"+
    "\1\u01a3\63\0\2\u01a4\50\0\2\u01a5\62\0\1\u01a6\35\0"+
    "\1\u01a7\43\0\2\u01a3\1\0\2\u01a3\1\0\1\u01a3\1\0"+
    "\1\u01a8\3\0\2\u01a3\1\0\1\u01a3\1\0\1\u01a3\1\0"+
    "\1\u01a3\1\0\2\u01a3\2\0\1\u01a3\1\0\1\u01a3\1\0"+
    "\1\u01a3\1\0\1\u01a3\1\0\1\u01a3\1\0\1\u01a3\3\0"+
    "\1\u01a3\1\0\1\u01a3\40\0\2\u01a9\24\0\1\u01aa\71\0"+
    "\1\u01a6\16\0\1\u01ab\6\0\2\u01a7\1\0\2\u01a7\1\0"+
    "\1\u01a7\1\0\1\u01ac\3\0\2\u01a7\1\0\1\u01a7\1\0"+
    "\1\u01a7\1\0\1\u01a7\1\0\2\u01a7\2\0\1\u01a7\1\0"+
    "\1\u01a7\1\0\1\u01a7\1\0\1\u01a7\1\0\1\u01a7\1\0"+
    "\1\u01a7\3\0\1\u01a7\1\0\1\u01a7\30\0\1\u01ad\35\0"+
    "\1\u01ae\43\0\2\u01aa\1\0\2\u01aa\1\0\1\u01aa\1\0"+
    "\1\u01af\3\0\2\u01aa\1\0\1\u01aa\1\0\1\u01aa\1\0"+
    "\1\u01aa\1\0\2\u01aa\2\0\1\u01aa\1\0\1\u01aa\1\0"+
    "\1\u01aa\1\0\1\u01aa\1\0\1\u01aa\1\0\1\u01aa\3\0"+
    "\1\u01aa\1\0\1\u01aa\46\u01b0\1\0\5\u01b0\30\0\1\u01b1"+
    "\53\0\1\u01ad\16\0\1\u01b2\6\0\2\u01ae\1\0\2\u01ae"+
    "\1\0\1\u01ae\1\0\1\u01b3\3\0\2\u01ae\1\0\1\u01ae"+
    "\1\0\1\u01ae\1\0\1\u01ae\1\0\2\u01ae\2\0\1\u01ae"+
    "\1\0\1\u01ae\1\0\1\u01ae\1\0\1\u01ae\1\0\1\u01ae"+
    "\1\0\1\u01ae\3\0\1\u01ae\1\0\1\u01ae\30\0\1\u01b4"+
    "\23\0\46\u01b0\1\u01b5\5\u01b0\30\0\1\u01b1\16\0\1\u01b6"+
    "\4\0\46\u01b7\1\0\5\u01b7\30\0\1\u01b8\53\0\1\u01b4"+
    "\16\0\1\u01b9\35\0\1\u01ba\22\0\46\u01bb\1\0\5\u01bb"+
    "\46\u01b7\1\u01bc\5\u01b7\30\0\1\u01b8\16\0\1\u01bd\4\0"+
    "\46\u01be\1\0\5\u01be\34\0\2\u01bf\16\0\46\u01bb\1\u01c0"+
    "\5\u01bb\31\0\1\u01c1\22\0\46\u01c2\1\0\5\u01c2\46\u01be"+
    "\1\u01c3\5\u01be\44\0\2\u01c4\37\0\1\u01c5\56\0\2\u01c6"+
    "\16\0\46\u01c2\1\u01c7\5\u01c2\31\0\1\u01c8\27\0\1\u01c9"+
    "\5\0\1\u01c9\74\0\2\u01ca\62\0\2\u01cb\37\0\1\u01cc"+
    "\56\0\2\u01cd\65\0\1\u0166\50\0\2\u01ce\13\0\1\u01cf"+
    "\5\0\1\u01cf\74\0\2\u01d0\62\0\2\u01d1\13\0\1\u01d2"+
    "\5\0\1\u01d2\107\0\1\u016e\50\0\2\u01d3\13\0\1\u01d4"+
    "\5\0\1\u01d4\107\0\1\u0173\11\0\1\u01d5\5\0\1\u01d5"+
    "\107\0\1\u01d6\53\0\1\u01d7\5\0\3\u01d8\1\u01d9\4\0"+
    "\2\u01d8\33\0\1\u01da\6\0\3\u01db\1\u01dc\4\0\2\u01db"+
    "\33\0\1\u01dd\12\0\1\u01de\5\0\1\u01de\74\0\2\u01df"+
    "\23\0\1\u01e0\5\0\1\u01e0\74\0\2\u01e1\24\0\1\u01e2"+
    "\5\0\1\u01e2\103\0\2\u01e3\14\0\1\u01e4\5\0\1\u01e4"+
    "\103\0\2\u01e5\15\0\1\u01e6\7\0\1\u01e6\41\0\1\u01e7"+
    "\5\0\1\u01e7\47\0\1\u01e8\7\0\1\u01e8\41\0\1\u01e9"+
    "\5\0\1\u01e9\50\0\1\u01ea\4\0\1\u01ea\50\0\1\u01eb"+
    "\51\0\1\u01ec\4\0\1\u01ec\50\0\1\u01ed\52\0\1\u01d8"+
    "\51\0\1\u01ee\7\0\1\u01ee\14\0\2\u018e\4\0\2\u018f"+
    "\21\0\1\u01db\51\0\1\u01ef\7\0\1\u01ef\4\0\2\u01f0"+
    "\6\0\2\u018e\4\0\2\u018f\46\0\2\u01f1\52\0\2\u01f2"+
    "\52\0\2\u01f3\24\0\1\u01f4\4\0\1\u01f4\46\0\1\u01f5"+
    "\4\0\1\u01f5\60\0\2\u01f6\102\0\2\u01f7\52\0\2\u01f8"+
    "\32\0\2\u01a9\32\0\1\u01f9\53\0\1\u01fa\43\0\2\u01f9"+
    "\1\0\2\u01f9\1\0\1\u01f9\1\0\1\u01fb\3\0\2\u01f9"+
    "\1\0\1\u01f9\1\0\1\u01f9\1\0\1\u01f9\1\0\2\u01f9"+
    "\2\0\1\u01f9\1\0\1\u01f9\1\0\1\u01f9\1\0\1\u01f9"+
    "\1\0\1\u01f9\1\0\1\u01f9\3\0\1\u01f9\1\0\1\u01f9"+
    "\2\0\2\u01fa\1\0\2\u01fa\1\0\1\u01fa\1\0\1\u01fc"+
    "\3\0\2\u01fa\1\0\1\u01fa\1\0\1\u01fa\1\0\1\u01fa"+
    "\1\0\2\u01fa\2\0\1\u01fa\1\0\1\u01fa\1\0\1\u01fa"+
    "\1\0\1\u01fa\1\0\1\u01fa\1\0\1\u01fa\3\0\1\u01fa"+
    "\1\0\1\u01fa\30\0\1\u01fd\53\0\1\u01fe\53\0\1\u01fd"+
    "\16\0\1\u01ff\34\0\1\u01fe\16\0\1\u0200\4\0\46\u0201"+
    "\1\0\5\u0201\46\u0202\1\0\5\u0202\46\u0201\1\u0203\5\u0201"+
    "\46\u0202\1\u0204\5\u0202\31\0\1\u0205\53\0\1\u0206\56\0"+
    "\2\u0207\52\0\2\u0208\62\0\2\u0209\52\0\2\u020a\13\0"+
    "\1\u020b\5\0\1\u020b\45\0\1\u020c\5\0\1\u020c\107\0"+
    "\1\u01d8\53\0\1\u01db\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22264];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\15\0\1\11\112\0\1\11\101\0\1\1\10\0"+
    "\1\11\4\0\1\11\16\0\1\11\3\0\1\11\3\0"+
    "\1\1\1\0\1\1\26\0\1\11\175\0\1\1\6\0"+
    "\1\1\2\0\1\1\150\0\2\1\65\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[524];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.2"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public AliasPartitions() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	@Override
	protected void addValue() {
	
		((LegislativePartition) annotationEntity).updateValue();
	} 
	
	private AnnotationEntity article = null;
	private AnnotationEntity legislationAlias = null;
	
	private int isolateOffset = 0;
	private int isolateLength = 0;
	
	private void startIsolate() {
	
		//System.out.println("ISOLATE PATTERN: " + yytext());
		
		article = retrieveEntity(yytext());
		
		isolateOffset = 0;
		isolateLength = yylength();		
		
		yypushback(isolateLength);
		yybegin(isolatePartitionState);
	}
	
	private void startCreate() {
	
		annotationEntity = new LegislativePartition();
		annotationEntity.setText(Util.removeAllAnnotations(yytext()));
		annotationEntity.setPosition(position);
		
		annotationEntity.addRelatedEntity(article);
		//non aggiungere l'inversa?
		
		offset = 0;
		length = yylength();

		isolateOffset += length;	
	
		yypushback(length);
		yybegin(createPartitionState);	
	}
	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AliasPartitions(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 378) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            }
          case 13: break;
          case 2: 
            { addText(yytext());
		position++;
            }
          case 14: break;
          case 3: 
            { isolateOffset++;
		position++;
		
		if(isolateOffset >= isolateLength) {
			
			if(isolateOffset > isolateLength) {
				yypushback(1);
				position--;
			}
			
			yybegin(0);
		}
		
		addText(yytext());
            }
          case 15: break;
          case 4: 
            { offset++;
		position++;
		
		if(offset >= length) {
			
			if(offset > length) {
				yypushback(1);
				position--;
			}
			
			if(annotationEntity != null) {
			
				addValue();
				
				addEntity(annotationEntity, false);
				
				LegislationReference legRef = new LegislationReference();
				legRef.setText(annotationEntity.getText());
				legRef.setPosition(annotationEntity.getPosition());
				
				legRef.addRelatedEntity(annotationEntity);
				annotationEntity.addRelatedEntity(legRef);
				
				legRef.addRelatedEntity(legislationAlias);
				//non aggiungere l'inversa?
				
				addEntity(legRef);
			}

			yybegin(isolatePartitionState);
		}
		
		if(annotationEntity == null) {
			
			addText(yytext());
		}
            }
          case 16: break;
          case 5: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            }
          case 17: break;
          case 6: 
            { addText(yytext()); 
	yybegin(lkn);
            }
          case 18: break;
          case 7: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		isolateOffset += yylength();
		position += retrievedEntity.getText().length();
		
		addText(yytext());
            }
          case 19: break;
          case 8: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		offset += yylength();
		position += retrievedEntity.getText().length();
            }
          case 20: break;
          case 9: 
            { startCreate();
            }
          case 21: break;
          case 10: 
            { AnnotationEntity retrievedEntity = retrieveEntity(yytext());
		
		annotationEntity.addRelatedEntity(retrievedEntity);
		retrievedEntity.addRelatedEntity(annotationEntity);
	
		offset += yylength();
		position += retrievedEntity.getText().length();
            }
          case 22: break;
          case 11: 
            { legislationAlias = retrieveEntity(yytext());
		
		LegislationReference legRef = new LegislationReference();
		legRef.setText(legislationAlias.getText());
		legRef.setPosition(legislationAlias.getPosition());
		
		legRef.addRelatedEntity(legislationAlias);
		legislationAlias.addRelatedEntity(legRef);
		
		isolateOffset += yylength();
		position += legislationAlias.getText().length();
		
		addEntity(legRef);
            }
          case 23: break;
          case 12: 
            { startIsolate();
            }
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AliasPartitions [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AliasPartitions scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AliasPartitions(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
