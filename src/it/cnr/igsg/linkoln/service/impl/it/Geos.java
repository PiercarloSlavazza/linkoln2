/*******************************************************************************
 * Copyright (c) 2016-2021 Institute of Legal Information and Judicial Systems IGSG-CNR (formerly ITTIG-CNR)
 * 
 * This program and the accompanying materials  are made available under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either version 3 of the License, or (at your option)
 * any later version. 
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: https://www.gnu.org/licenses/gpl-3.0.txt
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is 
 * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *  
 * Authors: Lorenzo Bacci (IGSG-CNR)
 ******************************************************************************/
/* The following code was generated by JFlex 1.6.1 */

package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Geos.jflex</tt>
 */
public class Geos extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\77\1\100\1\1\22\0\1\13\5\0\1\5"+
    "\1\0\1\0\1\0\2\0\1\0\1\3\1\53\1\54\1\52\1\52"+
    "\1\52\1\52\1\52\1\52\1\52\1\52\1\52\1\52\1\14\1\12"+
    "\5\0\1\26\1\7\1\40\1\65\1\36\1\76\1\30\1\74\1\47"+
    "\1\63\1\70\1\60\1\56\1\6\1\51\1\11\1\62\1\32\1\23"+
    "\1\44\1\42\1\34\1\63\1\63\1\63\1\22\1\71\1\0\1\72"+
    "\1\0\1\4\1\0\1\25\1\17\1\37\1\64\1\35\1\75\1\27"+
    "\1\73\1\46\1\24\1\67\1\57\1\55\1\16\1\50\1\21\1\61"+
    "\1\31\1\20\1\43\1\41\1\33\1\24\1\24\1\24\1\15\12\0"+
    "\1\77\44\0\1\0\5\0\1\0\3\0\1\0\5\0\1\0\5\0"+
    "\1\24\1\24\4\24\1\0\1\24\1\24\1\24\2\24\1\24\1\24"+
    "\2\24\1\0\1\24\1\24\1\24\3\24\2\0\1\24\1\24\2\24"+
    "\3\0\1\24\1\24\4\24\1\0\1\24\1\24\1\24\2\24\1\24"+
    "\1\24\2\24\1\0\1\24\1\24\1\24\3\24\2\0\1\24\1\24"+
    "\2\24\53\0\1\24\1\24\6\0\2\45\66\0\1\24\1\24\4\0"+
    "\1\24\1\24\17\0\1\10\u1c88\0\1\24\1\24\216\0\2\24\42\0"+
    "\1\24\1\24\u0144\0\1\13\20\0\1\3\1\3\4\0\1\0\16\0"+
    "\1\77\1\77\u0100\0\1\66\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\4\1\2\2\244\0\1\3\2\0\2\4\24\0"+
    "\2\5\44\0\2\6\10\0\2\7\50\0\2\10\1\0"+
    "\2\11\5\0\2\12\12\0\2\13\2\0\2\14\1\0"+
    "\2\15\2\16\4\0\2\17\3\0\4\20\21\0\2\21"+
    "\1\0\2\22\2\0\2\23\2\24\2\25\2\26\2\27"+
    "\2\0\4\30\4\0\2\31\2\32\2\33\1\0\2\34"+
    "\2\35\2\36\2\37\2\40\1\0\2\41\2\42\15\0"+
    "\2\43\2\44\7\0\2\45\12\0\2\46\2\47\2\50"+
    "\5\0\2\51\2\0\2\52\2\53\15\0\2\54\1\0"+
    "\2\55\1\0\2\56\5\0\4\57\4\0\1\60\11\0"+
    "\2\61\10\0\2\62\2\0\2\63\10\0\2\64\24\0"+
    "\1\20\4\0\2\65\14\0\1\57\3\0\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[568];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0104\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\u05d7\0\202\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d"+
    "\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965"+
    "\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d"+
    "\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75"+
    "\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d"+
    "\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185"+
    "\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d"+
    "\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595"+
    "\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5"+
    "\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad"+
    "\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5"+
    "\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd"+
    "\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5"+
    "\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd"+
    "\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5"+
    "\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd"+
    "\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5"+
    "\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u0104\0\u2b2a\0\u2b6b\0\u0104"+
    "\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73"+
    "\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b"+
    "\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u0104\0\u3101\0\u3142"+
    "\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a"+
    "\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552"+
    "\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a"+
    "\0\u379b\0\u37dc\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962"+
    "\0\u39a3\0\u39e4\0\u3a25\0\u0104\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29"+
    "\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\u0104\0\u3caf\0\u3cf0"+
    "\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8"+
    "\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100"+
    "\0\u4141\0\u4182\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308"+
    "\0\u4349\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510"+
    "\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696\0\u46d7\0\u0104"+
    "\0\u4718\0\u4759\0\u0104\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e"+
    "\0\u48df\0\u0104\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24\0\u4a65"+
    "\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u0104\0\u4beb\0\u4c2c"+
    "\0\u4c6d\0\u0104\0\u4cae\0\u4cef\0\u0104\0\u4d30\0\u0104\0\u4d71"+
    "\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u0104\0\u4eb6\0\u4ef7\0\u4f38"+
    "\0\u4f79\0\u0104\0\u4fba\0\u4ffb\0\u503c\0\u507d\0\u50be\0\u50ff"+
    "\0\u5140\0\u5181\0\u51c2\0\u5203\0\u5244\0\u5285\0\u52c6\0\u5307"+
    "\0\u5348\0\u5389\0\u53ca\0\u540b\0\u544c\0\u548d\0\u0104\0\u54ce"+
    "\0\u550f\0\u0104\0\u5550\0\u5591\0\u55d2\0\u0104\0\u5613\0\u0104"+
    "\0\u5654\0\u0104\0\u5695\0\u0104\0\u56d6\0\u0104\0\u5717\0\u5758"+
    "\0\u5799\0\u0104\0\u57da\0\u581b\0\u585c\0\u589d\0\u58de\0\u591f"+
    "\0\u5960\0\u0104\0\u59a1\0\u0104\0\u59e2\0\u0104\0\u5a23\0\u5a64"+
    "\0\u0104\0\u5aa5\0\u0104\0\u5ae6\0\u0104\0\u5b27\0\u0104\0\u5b68"+
    "\0\u0104\0\u5ba9\0\u5bea\0\u0104\0\u5c2b\0\u0104\0\u5c6c\0\u5cad"+
    "\0\u5cee\0\u5d2f\0\u5d70\0\u5db1\0\u5df2\0\u5e33\0\u5e74\0\u5eb5"+
    "\0\u5ef6\0\u5f37\0\u5f78\0\u5fb9\0\u0104\0\u5ffa\0\u0104\0\u603b"+
    "\0\u607c\0\u4ffb\0\u503c\0\u60bd\0\u60fe\0\u613f\0\u6180\0\u0104"+
    "\0\u61c1\0\u6202\0\u6243\0\u6284\0\u62c5\0\u6306\0\u6347\0\u6388"+
    "\0\u63c9\0\u640a\0\u644b\0\u0104\0\u648c\0\u0104\0\u64cd\0\u0104"+
    "\0\u650e\0\u654f\0\u581b\0\u585c\0\u6590\0\u65d1\0\u0104\0\u6612"+
    "\0\u6653\0\u6694\0\u0104\0\u66d5\0\u0104\0\u6716\0\u6757\0\u6798"+
    "\0\u67d9\0\u681a\0\u685b\0\u689c\0\u68dd\0\u691e\0\u695f\0\u69a0"+
    "\0\u69e1\0\u6a22\0\u6a63\0\u0104\0\u6aa4\0\u6ae5\0\u0104\0\u6b26"+
    "\0\u6b67\0\u0104\0\u6ba8\0\u6be9\0\u6c2a\0\u6c6b\0\u6cac\0\u6ced"+
    "\0\u0104\0\u6d2e\0\u6d6f\0\u6db0\0\u6df1\0\u6e32\0\u6e73\0\u6eb4"+
    "\0\u0104\0\u6ef5\0\u6f36\0\u6f77\0\u6fb8\0\u6ff9\0\u703a\0\u707b"+
    "\0\u70bc\0\u70fd\0\u0104\0\u713e\0\u717f\0\u71c0\0\u7201\0\u7242"+
    "\0\u6d6f\0\u6db0\0\u7283\0\u72c4\0\u0104\0\u7305\0\u7346\0\u7387"+
    "\0\u0104\0\u73c8\0\u7409\0\u744a\0\u748b\0\u74cc\0\u750d\0\u754e"+
    "\0\u758f\0\u75d0\0\u0104\0\u7611\0\u7652\0\u7693\0\u76d4\0\u7715"+
    "\0\u7756\0\u7797\0\u77d8\0\u7819\0\u785a\0\u789b\0\u78dc\0\u791d"+
    "\0\u795e\0\u799f\0\u79e0\0\u7a21\0\u7a62\0\u7aa3\0\u7ae4\0\u7b25"+
    "\0\u7b66\0\u7ba7\0\u7be8\0\u7c29\0\u7c6a\0\u0104\0\u7cab\0\u7cec"+
    "\0\u7d2d\0\u7d6e\0\u7daf\0\u7df0\0\u7e31\0\u7e72\0\u7eb3\0\u7ef4"+
    "\0\u7f35\0\u7f76\0\u7fb7\0\u7ff8\0\u8039\0\u807a\0\u80bb\0\u80fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[568];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\4\3\2\5\1\3\1\5\3\3\30\5"+
    "\1\3\5\5\2\3\11\5\1\3\2\5\1\6\1\3"+
    "\4\5\2\3\71\7\1\10\7\7\6\0\1\11\1\12"+
    "\1\13\1\14\4\0\1\11\1\12\1\13\1\15\1\0"+
    "\1\13\1\0\1\16\1\17\2\20\2\21\2\22\2\23"+
    "\2\24\2\25\2\26\10\0\2\27\2\30\14\0\2\31"+
    "\4\0\1\32\3\0\1\11\1\12\1\13\1\14\4\0"+
    "\1\11\1\12\1\13\1\15\1\0\1\13\1\0\1\16"+
    "\1\17\2\20\2\21\2\22\2\23\2\24\2\25\2\26"+
    "\10\0\2\27\2\30\14\0\2\31\111\0\1\11\1\12"+
    "\1\13\1\14\4\0\1\11\1\12\1\13\1\15\1\0"+
    "\1\13\1\0\1\16\1\17\2\20\2\21\2\22\2\23"+
    "\2\24\2\25\2\26\10\0\2\27\2\33\14\0\2\31"+
    "\56\0\1\34\51\0\2\35\77\0\2\36\2\0\2\37"+
    "\15\0\2\40\54\0\2\41\16\0\3\42\56\0\2\43"+
    "\6\0\2\44\2\0\2\45\2\0\3\46\2\47\54\0"+
    "\2\43\6\0\2\44\2\0\2\45\2\0\3\46\37\0"+
    "\1\50\1\51\6\0\1\50\1\51\30\0\2\52\35\0"+
    "\1\50\1\51\6\0\1\50\1\51\30\0\2\52\7\0"+
    "\2\53\53\0\2\54\77\0\2\55\11\0\2\56\54\0"+
    "\2\57\6\0\2\60\14\0\1\61\102\0\2\62\47\0"+
    "\2\63\16\0\3\64\106\0\2\65\53\0\2\66\15\0"+
    "\2\67\54\0\2\70\16\0\3\71\2\72\27\0\1\73"+
    "\1\74\4\73\2\0\1\73\1\0\3\73\10\0\2\75"+
    "\6\0\2\76\6\0\1\77\2\100\2\101\3\73\11\0"+
    "\1\73\2\0\2\73\4\0\2\73\31\0\2\102\12\0"+
    "\3\103\31\0\1\73\1\74\4\73\2\0\1\73\1\0"+
    "\3\73\10\0\2\75\6\0\2\76\6\0\1\77\2\100"+
    "\2\101\3\73\11\0\1\104\2\105\2\73\4\0\2\73"+
    "\57\0\2\106\31\0\1\107\7\0\1\107\67\0\1\110"+
    "\7\0\1\110\2\0\1\110\5\0\2\111\103\0\2\112"+
    "\121\0\2\113\51\0\2\114\24\0\2\115\57\0\2\116"+
    "\71\0\2\117\24\0\2\120\30\0\1\121\7\0\1\121"+
    "\2\0\1\121\5\0\2\122\75\0\2\123\105\0\2\124"+
    "\105\0\2\125\73\0\2\126\71\0\2\127\56\0\1\130"+
    "\7\0\1\130\2\0\1\130\116\0\2\131\44\0\1\132"+
    "\7\0\1\132\111\0\2\133\125\0\2\134\101\0\2\135"+
    "\26\0\1\136\7\0\1\136\63\0\2\61\2\0\1\137"+
    "\5\0\1\61\11\0\2\140\35\0\2\141\12\0\1\61"+
    "\45\0\3\142\60\0\2\143\12\0\2\144\10\0\2\145"+
    "\2\146\63\0\2\147\43\0\1\150\7\0\1\150\116\0"+
    "\2\151\6\0\3\152\41\0\1\153\7\0\1\153\2\0"+
    "\1\153\5\0\2\154\77\0\2\155\125\0\2\156\77\0"+
    "\2\157\46\0\1\160\54\0\1\73\23\0\1\160\67\0"+
    "\1\161\4\0\1\161\20\0\2\162\73\0\2\163\66\0"+
    "\1\160\2\164\77\0\2\164\125\0\2\165\67\0\3\166"+
    "\62\0\2\167\54\0\1\170\7\0\1\170\7\0\1\160"+
    "\60\0\1\170\7\0\1\170\150\0\3\171\60\0\2\172"+
    "\74\0\3\173\76\0\3\174\41\0\1\175\7\0\1\175"+
    "\2\0\1\175\72\0\1\176\4\0\1\176\25\0\2\177"+
    "\113\0\2\200\50\0\2\201\107\0\3\202\106\0\2\203"+
    "\57\0\2\204\101\0\2\205\101\0\2\206\115\0\2\207"+
    "\75\0\2\210\57\0\2\211\112\0\2\212\70\0\2\213"+
    "\101\0\2\214\101\0\3\215\101\0\2\216\56\0\2\217"+
    "\14\0\3\220\56\0\2\221\53\0\2\61\2\0\1\137"+
    "\5\0\1\61\11\0\2\140\30\0\2\222\3\0\2\141"+
    "\12\0\1\61\35\0\2\223\50\0\1\224\7\0\1\224"+
    "\132\0\2\225\27\0\1\226\2\0\74\226\61\0\2\227"+
    "\77\0\2\230\45\0\2\231\63\0\1\232\7\0\1\232"+
    "\104\0\2\233\115\0\2\234\65\0\2\235\54\0\1\236"+
    "\7\0\1\236\117\0\2\237\101\0\2\240\105\0\3\241"+
    "\70\0\2\242\65\0\2\243\117\0\3\244\112\0\2\53"+
    "\63\0\3\245\76\0\3\246\70\0\2\247\101\0\2\250"+
    "\45\0\1\251\7\0\1\251\122\0\2\252\73\0\2\253"+
    "\56\0\1\254\72\0\1\255\7\0\1\255\141\0\2\256"+
    "\77\0\2\257\20\0\1\260\1\261\4\260\2\0\1\260"+
    "\1\0\3\260\30\0\1\260\5\0\2\260\11\0\1\260"+
    "\2\0\2\260\4\0\2\260\37\0\2\262\65\0\2\263"+
    "\101\0\2\264\105\0\2\265\73\0\2\266\125\0\2\267"+
    "\45\0\2\270\103\0\2\271\73\0\2\272\101\0\2\273"+
    "\115\0\3\274\101\0\2\275\35\0\1\276\7\0\1\276"+
    "\70\0\1\277\7\0\1\277\77\0\1\300\4\0\1\300"+
    "\103\0\2\301\131\0\2\302\53\0\2\303\111\0\3\304"+
    "\101\0\2\305\27\0\1\306\1\307\4\306\2\0\1\306"+
    "\1\0\3\306\30\0\1\306\5\0\2\306\11\0\1\306"+
    "\2\0\2\306\4\0\2\306\35\0\2\61\57\0\1\310"+
    "\4\0\1\310\20\0\2\311\43\0\1\312\7\0\1\312"+
    "\71\0\1\313\7\0\1\313\2\0\1\313\56\0\2\226"+
    "\2\0\1\314\5\0\1\226\11\0\2\140\51\0\1\226"+
    "\45\0\3\315\76\0\3\316\37\0\1\317\7\0\1\317"+
    "\107\0\2\320\21\0\2\321\36\0\1\322\7\0\1\322"+
    "\61\0\1\323\2\0\74\323\47\0\3\324\74\0\2\325"+
    "\44\0\1\326\7\0\1\326\2\0\1\326\102\0\2\327"+
    "\60\0\1\330\7\0\1\330\155\0\2\331\12\0\1\332"+
    "\7\0\1\332\72\0\1\333\7\0\1\333\2\0\1\333"+
    "\125\0\2\334\35\0\1\335\7\0\1\335\117\0\2\336"+
    "\73\0\2\337\73\0\2\340\131\0\2\341\26\0\1\342"+
    "\7\0\1\342\66\0\1\343\1\0\2\343\1\0\1\343"+
    "\10\0\2\343\2\0\1\343\1\0\1\343\1\0\1\343"+
    "\1\0\1\343\1\0\1\343\1\0\1\343\1\0\1\343"+
    "\1\0\1\343\2\0\1\343\1\0\1\343\4\0\1\343"+
    "\1\0\1\343\1\0\2\343\1\0\1\343\2\0\1\343"+
    "\3\0\1\343\1\0\1\343\47\0\3\344\76\0\3\345"+
    "\33\0\1\260\143\0\3\346\37\0\1\347\7\0\1\347"+
    "\70\0\1\350\7\0\1\350\111\0\2\351\56\0\1\352"+
    "\7\0\1\352\127\0\3\353\31\0\1\354\1\355\4\354"+
    "\2\0\1\354\1\0\3\354\30\0\1\354\5\0\2\354"+
    "\11\0\1\354\2\0\2\354\4\0\2\354\55\0\2\356"+
    "\53\0\2\357\113\0\3\360\56\0\2\361\60\0\1\362"+
    "\7\0\1\362\77\0\1\363\4\0\1\363\103\0\2\364"+
    "\67\0\1\365\4\0\1\365\56\0\1\366\1\367\4\366"+
    "\2\0\1\366\1\0\3\366\30\0\1\366\5\0\2\366"+
    "\11\0\1\366\2\0\2\366\4\0\2\366\25\0\2\370"+
    "\77\0\2\371\122\0\2\372\35\0\1\373\7\0\1\373"+
    "\64\0\1\306\143\0\3\374\101\0\2\375\37\0\1\376"+
    "\7\0\1\376\2\0\1\376\120\0\2\377\42\0\1\u0100"+
    "\7\0\1\u0100\107\0\2\u0101\77\0\2\u0102\67\0\1\u0103"+
    "\4\0\1\u0103\22\0\3\u0104\37\0\1\u0105\7\0\1\u0105"+
    "\71\0\1\u0106\7\0\1\u0106\112\0\2\u0107\47\0\2\323"+
    "\2\0\1\u0108\1\11\1\u0109\1\u010a\1\u010b\1\0\1\323"+
    "\2\0\1\11\1\u0109\1\u010a\1\u010c\1\0\1\u010a\1\0"+
    "\1\u010d\1\u010e\2\20\2\u010f\2\u0110\2\0\2\u0111\2\0"+
    "\2\u0112\10\0\2\u0113\2\u0114\3\0\2\u0115\7\0\2\u0116"+
    "\1\0\1\323\25\0\2\u0117\117\0\3\u0118\2\u0119\72\0"+
    "\2\u011a\42\0\1\u011b\7\0\1\u011b\132\0\2\u011c\64\0"+
    "\2\u011d\112\0\2\u011e\64\0\2\u011f\42\0\1\u0120\1\u0121"+
    "\4\u0120\2\0\1\u0120\1\0\3\u0120\30\0\1\u0120\5\0"+
    "\2\u0120\11\0\1\u0120\2\0\2\u0120\4\0\2\u0120\25\0"+
    "\2\u0122\52\0\1\u0123\1\u0124\4\u0123\2\0\1\u0123\1\0"+
    "\3\u0123\30\0\1\u0123\5\0\2\u0123\11\0\1\u0123\2\0"+
    "\2\u0123\4\0\2\u0123\45\0\3\u0125\62\0\2\u0126\113\0"+
    "\3\u0127\46\0\1\u0128\4\0\1\u0128\62\0\1\343\1\0"+
    "\2\343\1\0\1\343\2\0\1\u0129\5\0\2\343\2\0"+
    "\1\343\1\0\1\343\1\0\1\343\1\0\1\343\1\0"+
    "\1\343\1\0\1\343\1\0\1\343\1\0\1\343\2\0"+
    "\1\343\1\0\1\343\4\0\1\343\1\0\1\343\1\0"+
    "\2\343\1\0\1\343\2\0\1\343\3\0\1\343\1\0"+
    "\1\343\2\0\1\u012a\1\u012b\4\u012a\2\0\1\u012a\1\0"+
    "\3\u012a\30\0\1\u012a\5\0\2\u012a\11\0\1\u012a\2\0"+
    "\2\u012a\4\0\2\u012a\37\0\2\u012c\65\0\2\u012d\122\0"+
    "\2\u012e\54\0\2\u012f\60\0\1\u0130\7\0\1\u0130\132\0"+
    "\2\u0131\54\0\2\u0132\54\0\1\354\146\0\2\u0133\54\0"+
    "\2\u0134\77\0\2\u0135\52\0\1\u0136\1\u0137\4\u0136\2\0"+
    "\1\u0136\1\0\3\u0136\30\0\1\u0136\5\0\2\u0136\11\0"+
    "\1\u0136\2\0\2\u0136\4\0\2\u0136\43\0\2\u0138\61\0"+
    "\2\u0139\52\0\1\u013a\1\u013b\4\u013a\2\0\1\u013a\1\0"+
    "\3\u013a\30\0\1\u013a\5\0\2\u013a\11\0\1\u013a\2\0"+
    "\2\u013a\4\0\2\u013a\45\0\5\u013c\31\0\1\366\76\0"+
    "\1\u013d\1\u013e\4\u013d\2\0\1\u013d\1\0\3\u013d\30\0"+
    "\1\u013d\5\0\2\u013d\11\0\1\u013d\2\0\2\u013d\4\0"+
    "\2\u013d\1\u013f\1\u0140\4\u013f\2\0\1\u013f\1\0\3\u013f"+
    "\30\0\1\u013f\5\0\2\u013f\11\0\1\u013f\2\0\2\u013f"+
    "\4\0\2\u013f\1\0\4\372\1\u0141\5\0\1\372\23\0"+
    "\2\u0142\37\0\1\372\35\0\2\u0143\67\0\2\u0144\52\0"+
    "\1\u0145\1\u0146\4\u0145\2\0\1\u0145\1\0\3\u0145\30\0"+
    "\1\u0145\5\0\2\u0145\11\0\1\u0145\2\0\2\u0145\4\0"+
    "\2\u0145\11\0\1\u0147\7\0\1\u0147\104\0\2\u0148\61\0"+
    "\1\u0149\7\0\1\u0149\61\0\1\u014a\1\u014b\3\u014c\1\u014d"+
    "\2\0\1\u014a\1\0\1\u014a\1\u014c\1\u014a\14\0\2\u014e"+
    "\12\0\1\u014a\5\0\2\u014a\11\0\1\u014a\2\0\2\u014a"+
    "\4\0\1\u014a\1\u014c\31\0\2\u014f\73\0\2\u0150\77\0"+
    "\2\u0151\117\0\3\u0152\56\0\2\u0153\117\0\3\u0154\37\0"+
    "\1\u0155\7\0\1\u0155\107\0\2\u0156\2\0\2\37\15\0"+
    "\2\40\54\0\2\u0157\77\0\2\43\6\0\2\44\11\0"+
    "\2\47\54\0\2\43\6\0\2\44\50\0\1\50\7\0"+
    "\1\50\31\0\2\52\35\0\1\50\7\0\1\50\31\0"+
    "\2\52\7\0\2\53\53\0\2\u0158\11\0\2\56\64\0"+
    "\2\u0159\67\0\2\u015a\103\0\2\u015b\15\0\2\u015c\74\0"+
    "\3\71\31\0\1\73\1\74\4\73\2\0\1\73\1\0"+
    "\3\73\10\0\2\u015d\6\0\2\76\6\0\1\73\4\0"+
    "\3\73\11\0\1\73\2\0\2\73\4\0\2\73\45\0"+
    "\3\u015e\76\0\3\103\31\0\1\u015f\1\u0160\4\u015f\2\0"+
    "\1\u015f\1\0\3\u015f\30\0\1\u015f\5\0\2\u015f\11\0"+
    "\1\u015f\2\0\2\u015f\4\0\2\u015f\6\0\1\u0161\7\0"+
    "\1\u0161\62\0\1\u0162\1\u0163\4\u0162\2\0\1\u0162\1\0"+
    "\3\u0162\30\0\1\u0162\5\0\2\u0162\11\0\1\u0162\2\0"+
    "\2\u0162\4\0\2\u0162\35\0\2\u0164\67\0\2\u0165\52\0"+
    "\1\u0166\1\u0167\4\u0166\2\0\1\u0166\1\0\3\u0166\30\0"+
    "\1\u0166\5\0\2\u0166\11\0\1\u0166\2\0\2\u0166\4\0"+
    "\2\u0166\1\u0168\1\u0169\4\u0168\2\0\1\u0168\1\0\3\u0168"+
    "\30\0\1\u0168\5\0\2\u0168\11\0\1\u0168\2\0\2\u0168"+
    "\4\0\2\u0168\1\u016a\1\u016b\4\u016a\2\0\1\u016a\1\0"+
    "\3\u016a\30\0\1\u016a\5\0\2\u016a\11\0\1\u016a\2\0"+
    "\2\u016a\4\0\2\u016a\1\u016c\1\u016d\4\u016c\2\0\1\u016c"+
    "\1\0\3\u016c\30\0\1\u016c\5\0\2\u016c\11\0\1\u016c"+
    "\2\0\2\u016c\4\0\2\u016c\2\0\1\u0120\76\0\1\u016e"+
    "\1\u016f\4\u016e\2\0\1\u016e\1\0\3\u016e\30\0\1\u016e"+
    "\5\0\2\u016e\11\0\1\u016e\2\0\2\u016e\4\0\2\u016e"+
    "\2\0\1\u0123\123\0\2\u0170\136\0\2\u0171\13\0\1\u0172"+
    "\1\u0173\3\u0174\1\u0175\2\0\1\u0172\1\0\1\u0172\1\u0174"+
    "\1\u0172\16\0\2\u0176\10\0\1\u0172\5\0\2\u0172\11\0"+
    "\1\u0172\2\0\2\u0172\4\0\1\u0172\1\u0174\35\0\2\u0177"+
    "\45\0\2\u0129\1\0\2\u0129\1\0\1\u0129\2\0\1\u0178"+
    "\5\0\2\u0129\2\0\1\u0129\1\0\1\u0129\1\0\1\u0129"+
    "\1\0\1\u0129\1\0\1\u0129\1\0\1\u0129\1\0\1\u0129"+
    "\1\0\1\u0129\2\0\1\u0129\1\0\2\u0129\3\0\1\u0129"+
    "\1\0\1\u0129\1\0\2\u0129\1\0\1\u0129\2\0\1\u0129"+
    "\3\0\1\u0129\1\0\1\u0129\4\0\1\u012a\123\0\2\u0179"+
    "\52\0\1\u017a\1\u017b\4\u017a\2\0\1\u017a\1\0\3\u017a"+
    "\30\0\1\u017a\5\0\2\u017a\11\0\1\u017a\2\0\2\u017a"+
    "\4\0\2\u017a\1\u017c\1\u017d\4\u017c\2\0\1\u017c\1\0"+
    "\3\u017c\30\0\1\u017c\5\0\2\u017c\11\0\1\u017c\2\0"+
    "\2\u017c\4\0\2\u017c\1\u017e\1\u017f\4\u017e\2\0\1\u017e"+
    "\1\0\3\u017e\30\0\1\u017e\5\0\2\u017e\11\0\1\u017e"+
    "\2\0\2\u017e\4\0\2\u017e\25\0\2\u0180\52\0\1\u0181"+
    "\1\u0182\4\u0181\2\0\1\u0181\1\0\3\u0181\30\0\1\u0181"+
    "\5\0\2\u0181\11\0\1\u0181\2\0\2\u0181\4\0\2\u0181"+
    "\1\u0183\1\u0184\4\u0183\2\0\1\u0183\1\0\3\u0183\30\0"+
    "\1\u0183\5\0\2\u0183\11\0\1\u0183\2\0\2\u0183\4\0"+
    "\2\u0183\1\u0185\1\u0186\4\u0185\2\0\1\u0185\1\0\3\u0185"+
    "\30\0\1\u0185\5\0\2\u0185\11\0\1\u0185\2\0\2\u0185"+
    "\4\0\2\u0185\1\u0187\1\u0188\4\u0187\2\0\1\u0187\1\0"+
    "\3\u0187\30\0\1\u0187\5\0\2\u0187\11\0\1\u0187\2\0"+
    "\2\u0187\4\0\2\u0187\1\u0189\1\u018a\4\u0189\2\0\1\u0189"+
    "\1\0\3\u0189\30\0\1\u0189\5\0\2\u0189\11\0\1\u0189"+
    "\2\0\2\u0189\4\0\2\u0189\2\0\1\u0136\133\0\2\u018b"+
    "\42\0\1\u018c\1\u018d\4\u018c\2\0\1\u018c\1\0\3\u018c"+
    "\30\0\1\u018c\5\0\2\u018c\11\0\1\u018c\2\0\2\u018c"+
    "\4\0\2\u018c\2\0\1\u013a\76\0\1\u018e\1\u018f\4\u018e"+
    "\2\0\1\u018e\1\0\3\u018e\30\0\1\u018e\5\0\2\u018e"+
    "\11\0\1\u018e\2\0\2\u018e\4\0\2\u018e\2\0\1\u013d"+
    "\100\0\1\u013f\104\0\1\u0190\7\0\1\u0190\107\0\2\u0191"+
    "\53\0\2\u0143\2\0\1\u0192\1\0\1\u0193\1\u0194\1\u0195"+
    "\1\0\1\u0143\3\0\1\u0193\1\u0194\1\u0195\1\0\1\u0194"+
    "\1\0\2\u0196\4\0\2\u0197\2\23\2\u0198\2\25\2\u0199"+
    "\10\0\2\u019a\2\u019b\14\0\2\u019c\1\0\1\u0143\1\u019d"+
    "\1\u019e\4\u019d\2\0\1\u019d\1\0\3\u019d\30\0\1\u019d"+
    "\5\0\2\u019d\11\0\1\u019d\2\0\2\u019d\4\0\2\u019d"+
    "\2\0\1\u0145\110\0\1\61\66\0\1\u019f\1\u01a0\4\u019f"+
    "\2\0\1\u019f\1\0\3\u019f\30\0\1\u019f\5\0\2\u019f"+
    "\11\0\1\u019f\2\0\2\u019f\4\0\2\u019f\10\0\1\u01a1"+
    "\7\0\1\u01a1\2\0\1\u01a1\56\0\1\u01a2\1\u014c\2\u01a2"+
    "\1\u01a3\5\0\1\u01a2\15\0\2\u014e\45\0\1\u01a2\1\0"+
    "\4\u01a2\1\u01a3\5\0\1\u01a2\15\0\2\u014e\45\0\1\u01a2"+
    "\6\0\1\u01a4\7\0\1\u01a4\132\0\2\u01a5\74\0\3\u01a6"+
    "\62\0\2\u01a7\46\0\1\u01a8\1\u01a9\4\u01a8\2\0\1\u01a8"+
    "\1\0\3\u01a8\30\0\1\u01a8\5\0\2\u01a8\11\0\1\u01a8"+
    "\2\0\2\u01a8\4\0\2\u01a8\25\0\2\u01aa\62\0\1\u01ab"+
    "\7\0\1\u01ab\2\0\1\u01ab\102\0\2\u01ac\61\0\1\u01ad"+
    "\7\0\1\u01ad\112\0\2\111\125\0\2\115\47\0\2\u01ae"+
    "\56\0\1\u01af\7\0\1\u01af\111\0\2\143\12\0\2\144"+
    "\10\0\2\u01b0\57\0\2\u01b1\6\0\3\152\62\0\2\154"+
    "\111\0\2\162\35\0\2\u015e\2\0\1\u01b2\1\11\1\u0109"+
    "\1\u010a\1\u010b\1\0\1\u015e\2\0\1\11\1\u0109\1\u010a"+
    "\1\u010c\1\0\1\u010a\1\0\1\u010d\1\u010e\2\20\2\u010f"+
    "\2\u0110\2\0\2\u0111\2\0\2\u0112\10\0\2\u0113\2\u0114"+
    "\14\0\2\u0116\1\0\1\u015e\2\0\1\u015f\146\0\2\u01b3"+
    "\31\0\1\u0162\76\0\1\u01b4\1\u01b5\4\u01b4\2\0\1\u01b4"+
    "\1\0\3\u01b4\30\0\1\u01b4\5\0\2\u01b4\11\0\1\u01b4"+
    "\2\0\2\u01b4\4\0\2\u01b4\1\u01b6\1\u01b7\4\u01b6\2\0"+
    "\1\u01b6\1\0\3\u01b6\30\0\1\u01b6\5\0\2\u01b6\11\0"+
    "\1\u01b6\2\0\2\u01b6\4\0\2\u01b6\2\0\1\u0166\100\0"+
    "\1\u0168\100\0\1\u016a\100\0\1\u016c\100\0\1\u016e\76\0"+
    "\1\u01b8\1\u01b9\4\u01b8\2\0\1\u01b8\1\0\3\u01b8\30\0"+
    "\1\u01b8\5\0\2\u01b8\11\0\1\u01b8\2\0\2\u01b8\4\0"+
    "\2\u01b8\45\0\3\u01ba\32\0\1\u01bb\1\u0174\2\u01bb\1\u01bc"+
    "\5\0\1\u01bb\17\0\2\u0176\43\0\1\u01bb\1\0\4\u01bb"+
    "\1\u01bc\5\0\1\u01bb\17\0\2\u0176\43\0\1\u01bb\6\0"+
    "\1\u01bd\7\0\1\u01bd\117\0\2\u01be\42\0\1\u01bf\1\u01c0"+
    "\4\u01bf\2\0\1\u01bf\1\0\3\u01bf\30\0\1\u01bf\5\0"+
    "\2\u01bf\11\0\1\u01bf\2\0\2\u01bf\4\0\2\u01bf\52\0"+
    "\1\u01c1\71\0\2\u01c2\36\0\1\u017a\100\0\1\u017c\100\0"+
    "\1\u017e\76\0\1\u01c3\1\u01c4\4\u01c3\2\0\1\u01c3\1\0"+
    "\3\u01c3\30\0\1\u01c3\5\0\2\u01c3\11\0\1\u01c3\2\0"+
    "\2\u01c3\4\0\2\u01c3\2\0\1\u0181\100\0\1\u0183\100\0"+
    "\1\u0185\100\0\1\u0187\100\0\1\u0189\76\0\1\u01c5\1\u01c6"+
    "\4\u01c5\2\0\1\u01c5\1\0\3\u01c5\30\0\1\u01c5\5\0"+
    "\2\u01c5\11\0\1\u01c5\2\0\2\u01c5\4\0\2\u01c5\2\0"+
    "\1\u018c\100\0\1\u018e\105\0\1\u01c7\7\0\1\u01c7\140\0"+
    "\2\u01c8\26\0\1\u01c9\7\0\1\u01c9\107\0\2\u01ca\77\0"+
    "\2\u01cb\16\0\3\42\72\0\2\45\2\0\3\46\40\0"+
    "\1\51\7\0\1\51\106\0\2\57\6\0\2\u01cc\14\0"+
    "\1\61\52\0\2\u01cd\103\0\2\u01ce\15\0\2\u01cf\54\0"+
    "\2\70\21\0\2\72\54\0\2\u01d0\16\0\3\100\2\101"+
    "\60\0\2\102\50\0\1\u019d\100\0\1\u019f\107\0\1\u01d1"+
    "\7\0\1\u01d1\66\0\1\u01d2\7\0\1\u01d2\136\0\2\u01d3"+
    "\22\0\1\u01d4\1\u01d5\4\u01d4\2\0\1\u01d4\1\0\3\u01d4"+
    "\30\0\1\u01d4\5\0\2\u01d4\11\0\1\u01d4\2\0\2\u01d4"+
    "\4\0\2\u01d4\50\0\2\u01d6\31\0\1\u01a8\76\0\1\u01d7"+
    "\1\u01d8\4\u01d7\2\0\1\u01d7\1\0\3\u01d7\30\0\1\u01d7"+
    "\5\0\2\u01d7\11\0\1\u01d7\2\0\2\u01d7\4\0\2\u01d7"+
    "\10\0\1\u01d9\7\0\1\u01d9\2\0\1\u01d9\55\0\1\u01da"+
    "\1\u01db\4\u01da\2\0\1\u01da\1\0\3\u01da\30\0\1\u01da"+
    "\5\0\2\u01da\11\0\1\u01da\2\0\2\u01da\4\0\2\u01da"+
    "\10\0\1\u01dc\7\0\1\u01dc\2\0\1\u01dc\104\0\2\217"+
    "\105\0\2\u01dd\53\0\1\u01de\7\0\1\u01de\65\0\1\u01df"+
    "\7\0\1\u01df\70\0\1\u01e0\7\0\1\u01e0\62\0\1\u01e1"+
    "\1\u01e2\3\u01e3\1\u01e4\2\0\1\u01e1\1\0\1\u01e1\1\u01e3"+
    "\1\u01e1\10\0\2\u01e5\16\0\1\u01e1\5\0\2\u01e1\11\0"+
    "\1\u01e1\2\0\2\u01e1\4\0\1\u01e1\1\u01e3\2\0\1\u01b4"+
    "\100\0\1\u01b6\100\0\1\u01b8\123\0\2\u01e6\61\0\1\u01e7"+
    "\7\0\1\u01e7\67\0\1\u01e8\7\0\1\u01e8\64\0\1\u01bf"+
    "\150\0\1\u01c1\17\0\1\u01e9\33\0\2\u01ea\54\0\1\u01c3"+
    "\100\0\1\u01c5\106\0\1\u01eb\7\0\1\u01eb\2\0\1\u01eb"+
    "\102\0\2\u01ec\61\0\1\u01ed\7\0\1\u01ed\71\0\1\110"+
    "\7\0\1\110\2\0\1\110\106\0\2\114\54\0\1\u01ee"+
    "\7\0\1\u01ee\137\0\2\u01ef\2\146\55\0\2\u01f0\52\0"+
    "\1\153\7\0\1\153\2\0\1\153\72\0\1\161\4\0"+
    "\1\161\70\0\1\226\76\0\1\u01f1\7\0\1\u01f1\2\0"+
    "\1\u01f1\102\0\2\u01f2\54\0\1\u01d4\76\0\1\u01f3\1\u01f4"+
    "\4\u01f3\2\0\1\u01f3\1\0\3\u01f3\30\0\1\u01f3\5\0"+
    "\2\u01f3\11\0\1\u01f3\2\0\2\u01f3\4\0\2\u01f3\2\0"+
    "\1\u01d7\146\0\2\u01f5\31\0\1\u01da\107\0\1\u01f6\7\0"+
    "\1\u01f6\74\0\1\310\4\0\1\310\126\0\2\321\72\0"+
    "\2\u01f7\43\0\1\u01f8\7\0\1\u01f8\62\0\1\u01f9\1\u01e3"+
    "\2\u01f9\1\u01fa\5\0\1\u01f9\11\0\2\u01e5\51\0\1\u01f9"+
    "\1\0\4\u01f9\1\u01fa\5\0\1\u01f9\11\0\2\u01e5\51\0"+
    "\1\u01f9\6\0\1\u01fb\7\0\1\u01fb\141\0\2\u01fc\20\0"+
    "\1\u01fd\1\u01fe\4\u01fd\2\0\1\u01fd\1\0\3\u01fd\30\0"+
    "\1\u01fd\5\0\2\u01fd\11\0\1\u01fd\2\0\2\u01fd\4\0"+
    "\2\u01fd\10\0\1\u01ff\7\0\1\u01ff\2\0\1\u01ff\112\0"+
    "\2\u0200\42\0\1\u0201\1\u0202\4\u0201\2\0\1\u0201\1\0"+
    "\3\u0201\30\0\1\u0201\5\0\2\u0201\11\0\1\u0201\2\0"+
    "\2\u0201\4\0\2\u0201\11\0\1\u0203\7\0\1\u0203\66\0"+
    "\1\u0204\7\0\1\u0204\71\0\1\u0205\7\0\1\u0205\2\0"+
    "\1\u0205\112\0\2\u0206\53\0\1\u0207\7\0\1\u0207\65\0"+
    "\1\u0208\7\0\1\u0208\73\0\1\u0209\7\0\1\u0209\106\0"+
    "\2\u020a\52\0\1\u01f3\76\0\1\u020b\1\u020c\4\u020b\2\0"+
    "\1\u020b\1\0\3\u020b\30\0\1\u020b\5\0\2\u020b\11\0"+
    "\1\u020b\2\0\2\u020b\4\0\2\u020b\12\0\1\323\136\0"+
    "\2\u0119\37\0\1\u020d\7\0\1\u020d\2\0\1\u020d\64\0"+
    "\1\u020e\7\0\1\u020e\124\0\2\u020f\36\0\1\u01fd\107\0"+
    "\1\u0210\7\0\1\u0210\74\0\1\u0211\4\0\1\u0211\60\0"+
    "\1\u0201\110\0\1\372\117\0\2\u0212\57\0\1\u0213\7\0"+
    "\1\u0213\122\0\2\311\61\0\2\320\115\0\2\u0214\46\0"+
    "\1\u01a2\74\0\1\u0215\7\0\1\u0215\64\0\1\u020b\107\0"+
    "\1\u0216\7\0\1\u0216\67\0\1\u0217\7\0\1\u0217\2\0"+
    "\1\u0217\125\0\2\u0218\41\0\1\u01bb\133\0\3\u0219\76\0"+
    "\3\u021a\43\0\1\u0143\133\0\3\u0118\56\0\2\u021b\64\0"+
    "\1\u015e\77\0\1\u021c\7\0\1\u021c\60\0\4\u0218\1\u021d"+
    "\5\0\1\u0218\11\0\2\u021e\51\0\1\u0218\25\0\2\u021f"+
    "\77\0\2\u0220\52\0\1\u014a\1\u0221\4\u014a\2\0\1\u014a"+
    "\1\0\3\u014a\30\0\1\u014a\5\0\2\u014a\11\0\1\u014a"+
    "\2\0\2\u014a\4\0\2\u014a\12\0\1\u01f9\74\0\1\u0222"+
    "\7\0\1\u0222\146\0\2\u0223\14\0\4\u021f\1\u0224\5\0"+
    "\1\u021f\13\0\2\u0225\47\0\1\u021f\1\u0226\1\u0227\4\u0226"+
    "\2\0\1\u0226\1\0\3\u0226\30\0\1\u0226\5\0\2\u0226"+
    "\11\0\1\u0226\2\0\2\u0226\4\0\2\u0226\2\0\1\u014a"+
    "\105\0\1\u0228\7\0\1\u0228\126\0\3\u0229\37\0\1\u022a"+
    "\7\0\1\u022a\127\0\3\u022b\33\0\1\u0226\106\0\1\u022c"+
    "\7\0\1\u022c\2\0\1\u022c\104\0\2\u022d\57\0\1\u022e"+
    "\7\0\1\u022e\122\0\2\u022f\47\0\1\u0230\7\0\1\u0230"+
    "\114\0\2\u0231\52\0\1\u0232\7\0\1\u0232\2\0\1\u0232"+
    "\134\0\2\u0233\32\0\1\u0218\66\0\1\u01e1\1\u0234\4\u01e1"+
    "\2\0\1\u01e1\1\0\3\u01e1\30\0\1\u01e1\5\0\2\u01e1"+
    "\11\0\1\u01e1\2\0\2\u01e1\4\0\2\u01e1\11\0\1\u0235"+
    "\7\0\1\u0235\124\0\3\u0236\33\0\1\u01e1\110\0\1\u021f"+
    "\113\0\2\u0237\52\0\1\u0172\1\u0238\4\u0172\2\0\1\u0172"+
    "\1\0\3\u0172\30\0\1\u0172\5\0\2\u0172\11\0\1\u0172"+
    "\2\0\2\u0172\4\0\2\u0172\2\0\1\u0172\76\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33085];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\11\1\1\1\11\1\1\244\0\1\11"+
    "\2\0\1\11\1\1\24\0\1\11\1\1\44\0\1\11"+
    "\1\1\10\0\1\11\1\1\50\0\1\11\1\1\1\0"+
    "\1\11\1\1\5\0\1\11\1\1\12\0\1\11\1\1"+
    "\2\0\1\11\1\1\1\0\1\11\1\1\1\11\1\1"+
    "\4\0\1\11\1\1\3\0\1\11\3\1\21\0\1\11"+
    "\1\1\1\0\1\11\1\1\2\0\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\2\0"+
    "\1\11\3\1\4\0\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\11\1\1\1\11"+
    "\1\1\15\0\1\11\1\1\1\11\1\1\7\0\1\11"+
    "\1\1\12\0\1\11\1\1\1\11\1\1\1\11\1\1"+
    "\5\0\1\11\1\1\2\0\1\11\1\1\1\11\1\1"+
    "\15\0\1\11\1\1\1\0\1\11\1\1\1\0\1\11"+
    "\1\1\5\0\1\11\3\1\4\0\1\11\11\0\1\11"+
    "\1\1\10\0\1\11\1\1\2\0\1\11\1\1\10\0"+
    "\1\11\1\1\24\0\1\1\4\0\1\11\1\1\14\0"+
    "\1\1\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[568];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	/* Custom java code */

    @Override
	public String language() { return "IT"; }

	@Override
	public String version() { return "0.6"; }


	/* An empty default constructor is required to comply with LinkolnService */
	
	public Geos() { }
	
	@Override
	public final boolean run() {
		
		try {
			
			yyreset(new StringReader(getInput()));
			yylex();
			
		} catch (IOException e) {

			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Geos(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 382) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext());
	position++;
            }
          case 54: break;
          case 2: 
            { addText(yytext());
		position++;
            }
          case 55: break;
          case 3: 
            { addText(yytext());
		position--; //account for the following {LKN_C} character
		yybegin(YYINITIAL);
            }
          case 56: break;
          case 4: 
            { annotate(new City(), "IT_BA", true, true);
            }
          case 57: break;
          case 5: 
            { annotate(new City(), "IT_RM", true, true);
            }
          case 58: break;
          case 6: 
            { annotate(new City(), "IT_PR", true, true);
            }
          case 59: break;
          case 7: 
            { annotate(new City(), "IT_AO", true, true);
            }
          case 60: break;
          case 8: 
            { annotate(new Region(), "IT_LAZ", true, true);
            }
          case 61: break;
          case 9: 
            { annotate(new City(), "IT_LE", true, true);
            }
          case 62: break;
          case 10: 
            { annotate(new City(), "IT_NA", true, true);
            }
          case 63: break;
          case 11: 
            { annotate(new Region(), "IT_PUG", true, true);
            }
          case 64: break;
          case 12: 
            { annotate(new City(), "IT_AN", true, true);
            }
          case 65: break;
          case 13: 
            { annotate(new City(), "IT_AQ", true, true);
            }
          case 66: break;
          case 14: 
            { annotate(new City(), "IT_GE", true, true);
            }
          case 67: break;
          case 15: 
            { annotate(new Region(), "IT_VEN", true, true);
            }
          case 68: break;
          case 16: 
            { annotate(new Region(), "IT_EMR", true, true);
            }
          case 69: break;
          case 17: 
            { annotate(new Region(), "IT_UMB", true, true);
            }
          case 70: break;
          case 18: 
            { annotate(new City(), "IT_TN", true, true);
            }
          case 71: break;
          case 19: 
            { annotate(new City(), "IT_TO", true, true);
            }
          case 72: break;
          case 20: 
            { annotate(new Region(), "IT_MAR", true, true);
            }
          case 73: break;
          case 21: 
            { annotate(new City(), "IT_MI", true, true);
            }
          case 74: break;
          case 22: 
            { annotate(new Region(), "IT_MOL", true, true);
            }
          case 75: break;
          case 23: 
            { annotate(new City(), "IT_LT", true, true);
            }
          case 76: break;
          case 24: 
            { annotate(new Region(), "IT_FVG", true, true);
            }
          case 77: break;
          case 25: 
            { annotate(new City(), "IT_BS", true, true);
            }
          case 78: break;
          case 26: 
            { annotate(new City(), "IT_BZ", true, true);
            }
          case 79: break;
          case 27: 
            { annotate(new City(), "IT_BO", true, true);
            }
          case 80: break;
          case 28: 
            { annotate(new City(), "IT_SA", true, true);
            }
          case 81: break;
          case 29: 
            { annotate(new Region(), "IT_SIC", true, true);
            }
          case 82: break;
          case 30: 
            { annotate(new City(), "IT_PA", true, true);
            }
          case 83: break;
          case 31: 
            { annotate(new City(), "IT_PE", true, true);
            }
          case 84: break;
          case 32: 
            { annotate(new City(), "IT_PG", true, true);
            }
          case 85: break;
          case 33: 
            { annotate(new City(), "IT_PZ", true, true);
            }
          case 86: break;
          case 34: 
            { annotate(new Region(), "IT_ABR", true, true);
            }
          case 87: break;
          case 35: 
            { annotate(new City(), "IT_VE", true, true);
            }
          case 88: break;
          case 36: 
            { annotate(new Region(), "IT_VDA", true, true);
            }
          case 89: break;
          case 37: 
            { annotate(new City(), "IT_CT", true, true);
            }
          case 90: break;
          case 38: 
            { annotate(new City(), "IT_TS", true, true);
            }
          case 91: break;
          case 39: 
            { annotate(new Region(), "IT_TOS", true, true);
            }
          case 92: break;
          case 40: 
            { annotate(new Region(), "IT_LIG", true, true);
            }
          case 93: break;
          case 41: 
            { annotate(new City(), "IT_FI", true, true);
            }
          case 94: break;
          case 42: 
            { annotate(new Region(), "IT_SAR", true, true);
            }
          case 95: break;
          case 43: 
            { annotate(new Region(), "IT_PIE", true, true);
            }
          case 96: break;
          case 44: 
            { annotate(new City(), "IT_CA", true, true);
            }
          case 97: break;
          case 45: 
            { annotate(new Region(), "IT_CAM", true, true);
            }
          case 98: break;
          case 46: 
            { annotate(new Region(), "IT_CAL", true, true);
            }
          case 99: break;
          case 47: 
            { annotate(new Region(), "IT_TAA", true, true);
            }
          case 100: break;
          case 48: 
            { addText(yytext()); 
	yybegin(lkn);
            }
          case 101: break;
          case 49: 
            { annotate(new City(), "IT_CZ", true, true);
            }
          case 102: break;
          case 50: 
            { annotate(new Region(), "IT_LOM", true, true);
            }
          case 103: break;
          case 51: 
            { annotate(new Region(), "IT_BAS", true, true);
            }
          case 104: break;
          case 52: 
            { annotate(new City(), "IT_CB", true, true);
            }
          case 105: break;
          case 53: 
            { annotate(new City(), "IT_RC", true, true);
            }
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Geos [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Geos scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Geos(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
