/* The following code was generated by JFlex 1.7.0 */

package it.cnr.igsg.linkoln.service.impl.it;

import java.io.IOException;
import java.io.StringReader;

import it.cnr.igsg.linkoln.entity.*;
import it.cnr.igsg.linkoln.service.*;

/*
This grammar was added in order to compensate for the cities not recognized by Linkoln 2 (and 3).
It was necessary to add a new grammar because the authors (at the time of writing this grammar) have not made the
JFlex sources public (upon my explicit request, they refused to share them, citing the reason
that the sources were not of sufficiently good quality).

ATTENTION:
- The grammar was drafted with the help of Claude/ChatGPT, attempting to deduce the most plausible structure from the
Java code (note that it is NOT possible to reverse engineer a JFlex grammar from the generated Java code);
- The generated Java class MUST BE inserted into the pipeline BEFORE the STOP WORDS; otherwise, the grammar would need
to be more complex by accounting for the possibility of existing annotations for the STOP WORDS (e.g., in the text
"court of marsala", the preposition is considered as a "stop word");
- I don't know why it's necessary to repeat all the patterns in two rules, and I haven't had the time to optimize.

BUILD:
to generate the Java class execute:
mvn exec:java -Dexec.mainClass="jflex.Main" -Dexec.args="-d src/main/java/it/cnr/igsg/linkoln/service/impl/it src/main/java/it/cnr/igsg/linkoln/service/impl/it/Geos2.jflex"

TEST:
Unit Tests are coded in the class it.cnr.igsg.linkoln.LinkolnTest.
*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/main/java/it/cnr/igsg/linkoln/service/impl/it/Geos2.jflex</tt>
 */
public class Geos2 extends LinkolnAnnotationService {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int lkn = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\2\1\33\1\33\1\1\22\0\1\3\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\4\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\12\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\5\1\17\1\21\1\23\1\13\1\30\1\24\1\27\1\10"+
    "\2\0\1\11\1\31\1\15\1\16\1\22\1\6\1\20\1\26\1\25"+
    "\1\7\1\12\3\0\1\14\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\5\1\17\1\21\1\23\1\13\1\30\1\24\1\27\1\10\2\0"+
    "\1\11\1\31\1\15\1\16\1\22\1\6\1\20\1\26\1\25\1\7"+
    "\1\12\3\0\1\14\1\0\1\0\1\0\1\0\6\0\1\33\106\0"+
    "\1\32\37\0\1\32\103\0\2\10\115\0\1\26\u1ea8\0\1\33\1\33"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\20\1\125\0\1\2\3\0\1\3\16\0\1\4"+
    "\20\0\1\5\6\0\1\6\1\7\1\0\1\10\12\0"+
    "\1\11\1\12\1\13\1\0\1\14\3\0\1\15\5\0"+
    "\1\16\1\0\1\17\2\0\1\20\1\21\4\0\1\22"+
    "\16\0\1\23\13\0\1\24\14\0\1\25\1\0\1\26"+
    "\2\0\1\27\1\0\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\1\0\1\35\3\0\1\36\4\0\1\37\6\0"+
    "\1\40\1\41\1\42\36\0\1\43\20\0\1\44\3\0"+
    "\1\45\1\0\1\46\1\47\16\0\1\50\3\0\1\51"+
    "\2\0\1\52\7\0\1\53\1\0\1\54\13\0\1\55"+
    "\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[357];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\124\0\160\0\214\0\250\0\304"+
    "\0\340\0\374\0\u0118\0\u0134\0\u0150\0\u016c\0\u0188\0\u01a4"+
    "\0\u01c0\0\u01dc\0\u01f8\0\u0214\0\u0230\0\u024c\0\u0268\0\u0284"+
    "\0\u02a0\0\u02bc\0\u02d8\0\u02f4\0\u0310\0\u032c\0\u0348\0\u0364"+
    "\0\u0380\0\u039c\0\u03b8\0\u03d4\0\u03f0\0\u040c\0\u0428\0\u0444"+
    "\0\u0460\0\u047c\0\u0498\0\u04b4\0\u04d0\0\u04ec\0\u0508\0\u0524"+
    "\0\u0540\0\u055c\0\u0578\0\u0594\0\u05b0\0\u05cc\0\u05e8\0\u0604"+
    "\0\u0620\0\u063c\0\u0658\0\u0674\0\u0690\0\u06ac\0\u06c8\0\u06e4"+
    "\0\u0700\0\u071c\0\u0738\0\u0754\0\u0770\0\u078c\0\u07a8\0\u07c4"+
    "\0\u07e0\0\u07fc\0\u0818\0\u0834\0\u0850\0\u086c\0\u0888\0\u08a4"+
    "\0\u08c0\0\u08dc\0\u08f8\0\u0914\0\u0930\0\u094c\0\u0968\0\u0984"+
    "\0\u09a0\0\u09bc\0\u09d8\0\u09f4\0\u0a10\0\u0a2c\0\u0a48\0\u0a64"+
    "\0\u0a80\0\u0a9c\0\u0ab8\0\u0ad4\0\u0af0\0\u0b0c\0\34\0\u0b28"+
    "\0\u0b44\0\u0b60\0\34\0\u0b7c\0\u0b98\0\u0bb4\0\u0bd0\0\u0bec"+
    "\0\u0c08\0\u0c24\0\u0c40\0\u0c5c\0\u0c78\0\u0c94\0\u0cb0\0\u0ccc"+
    "\0\u0ce8\0\34\0\u0d04\0\u0d20\0\u0d3c\0\u0d58\0\u0d74\0\u0d90"+
    "\0\u0dac\0\u0dc8\0\u0de4\0\u0e00\0\u0e1c\0\u0e38\0\u0e54\0\u0e70"+
    "\0\u0e8c\0\u0ea8\0\34\0\u0ec4\0\u0ee0\0\u0efc\0\u0f18\0\u0f34"+
    "\0\u0f50\0\34\0\34\0\u0f6c\0\34\0\u0f88\0\u0fa4\0\u0fc0"+
    "\0\u0fdc\0\u0ff8\0\u1014\0\u1030\0\u104c\0\u1068\0\u1084\0\34"+
    "\0\34\0\34\0\u10a0\0\34\0\u10bc\0\u10d8\0\u10f4\0\34"+
    "\0\u1110\0\u112c\0\u1148\0\u1164\0\u1180\0\34\0\u119c\0\34"+
    "\0\u11b8\0\u11d4\0\34\0\34\0\u11f0\0\u120c\0\u1228\0\u1244"+
    "\0\34\0\u1260\0\u127c\0\u1298\0\u12b4\0\u12d0\0\u12ec\0\u1308"+
    "\0\u1324\0\u1340\0\u135c\0\u1378\0\u1394\0\u13b0\0\u13cc\0\34"+
    "\0\u13e8\0\u1404\0\u1420\0\u143c\0\u1458\0\u1474\0\u1490\0\u14ac"+
    "\0\u14c8\0\u14e4\0\u1500\0\34\0\u151c\0\u1538\0\u1554\0\u1570"+
    "\0\u158c\0\u15a8\0\u15c4\0\u15e0\0\u15fc\0\u1618\0\u1634\0\u1650"+
    "\0\34\0\u166c\0\34\0\u1688\0\u16a4\0\34\0\u16c0\0\34"+
    "\0\34\0\34\0\34\0\u16dc\0\34\0\u16f8\0\34\0\u1714"+
    "\0\u1730\0\u174c\0\34\0\u1768\0\u1784\0\u17a0\0\u17bc\0\34"+
    "\0\u17d8\0\u17f4\0\u1810\0\u182c\0\u1848\0\u1864\0\34\0\34"+
    "\0\34\0\u1880\0\u189c\0\u18b8\0\u18d4\0\u18f0\0\u190c\0\u1928"+
    "\0\u1944\0\u1960\0\u197c\0\u1998\0\u19b4\0\u19d0\0\u19ec\0\u1a08"+
    "\0\u1a24\0\u1a40\0\u1a5c\0\u1a78\0\u1a94\0\u1ab0\0\u1acc\0\u1ae8"+
    "\0\u1b04\0\u1b20\0\u1b3c\0\u1b58\0\u1b74\0\u1b90\0\u1bac\0\34"+
    "\0\u1bc8\0\u1be4\0\u1c00\0\u1c1c\0\u1c38\0\u1c54\0\u1c70\0\u1c8c"+
    "\0\u1ca8\0\u1cc4\0\u1ce0\0\u1cfc\0\u1d18\0\u1d34\0\u1d50\0\u1d6c"+
    "\0\34\0\u1d88\0\u1da4\0\u1dc0\0\34\0\u1ddc\0\34\0\34"+
    "\0\u1df8\0\u1e14\0\u1e30\0\u1e4c\0\u1e68\0\u1e84\0\u1ea0\0\u1ebc"+
    "\0\u1ed8\0\u1ef4\0\u1f10\0\u1f2c\0\u1f48\0\u1f64\0\34\0\u1f80"+
    "\0\u1f9c\0\u1fb8\0\34\0\u1fd4\0\u1ff0\0\34\0\u200c\0\u2028"+
    "\0\u2044\0\u2060\0\u207c\0\u2098\0\u20b4\0\34\0\u20d0\0\34"+
    "\0\u20ec\0\u2108\0\u2124\0\u2140\0\u215c\0\u2178\0\u2194\0\u21b0"+
    "\0\u21cc\0\u21e8\0\u2204\0\34\0\34";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[357];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\3\2\1\4\2\2\1\5\1\6\1\7"+
    "\2\2\1\10\1\2\1\11\1\12\1\13\1\14\1\2"+
    "\1\15\1\16\1\17\1\2\1\20\1\21\1\2\37\0"+
    "\1\2\37\0\1\22\3\0\1\23\33\0\1\24\25\0"+
    "\1\25\1\26\5\0\1\27\2\0\1\30\22\0\1\31"+
    "\5\0\1\32\36\0\1\33\22\0\1\34\1\0\1\35"+
    "\37\0\1\36\2\0\1\37\22\0\1\40\2\0\1\41"+
    "\30\0\1\42\10\0\1\43\1\0\1\44\26\0\1\45"+
    "\30\0\1\46\2\0\1\47\2\0\1\50\1\0\1\51"+
    "\20\0\1\52\1\0\1\53\11\0\1\54\1\55\24\0"+
    "\1\56\2\0\1\57\22\0\1\60\35\0\1\61\37\0"+
    "\1\62\40\0\1\63\20\0\1\64\31\0\1\65\11\0"+
    "\1\66\2\0\1\67\3\0\1\70\4\0\1\71\23\0"+
    "\1\72\33\0\1\73\1\0\1\74\21\0\1\75\14\0"+
    "\1\76\16\0\1\77\33\0\1\100\7\0\1\101\32\0"+
    "\1\102\41\0\1\103\31\0\1\104\21\0\1\105\32\0"+
    "\1\106\14\0\1\107\17\0\1\110\32\0\1\111\4\0"+
    "\1\112\6\0\1\113\33\0\1\114\13\0\1\115\37\0"+
    "\1\116\34\0\1\117\41\0\1\120\33\0\1\121\20\0"+
    "\1\122\43\0\1\123\27\0\1\124\32\0\1\125\41\0"+
    "\1\126\35\0\1\127\33\0\1\130\33\0\1\131\1\132"+
    "\4\0\1\133\15\0\1\134\37\0\1\135\32\0\1\136"+
    "\26\0\1\22\53\0\1\137\14\0\1\140\11\0\1\141"+
    "\22\0\1\142\41\0\1\143\30\0\1\144\41\0\1\145"+
    "\32\0\1\146\23\0\1\147\34\0\1\150\47\0\1\151"+
    "\17\0\1\152\27\0\1\153\41\0\1\154\41\0\1\155"+
    "\37\0\1\156\32\0\1\157\22\0\1\160\45\0\1\161"+
    "\33\0\1\162\1\163\15\0\1\164\54\0\1\165\13\0"+
    "\1\166\47\0\1\167\21\0\1\170\45\0\1\171\13\0"+
    "\1\172\44\0\1\173\46\0\1\174\22\0\1\175\30\0"+
    "\1\176\4\0\1\177\36\0\1\200\37\0\1\201\7\0"+
    "\1\202\37\0\1\203\53\0\1\204\13\0\1\205\50\0"+
    "\1\206\20\0\1\207\46\0\1\210\16\0\1\211\36\0"+
    "\1\212\24\0\1\213\50\0\1\214\37\0\1\215\15\0"+
    "\1\216\40\0\1\217\33\0\1\220\32\0\1\221\35\0"+
    "\1\222\25\0\1\223\41\0\1\224\33\0\1\225\30\0"+
    "\1\226\40\0\1\227\26\0\1\230\36\0\1\231\25\0"+
    "\1\232\43\0\1\233\20\0\1\234\46\0\1\235\23\0"+
    "\1\236\50\0\1\237\16\0\1\240\30\0\1\241\36\0"+
    "\1\242\40\0\1\243\34\0\1\244\26\0\1\245\32\0"+
    "\1\246\36\0\1\247\30\0\1\250\30\0\1\251\33\0"+
    "\1\252\44\0\1\253\36\0\1\254\25\0\1\255\36\0"+
    "\1\256\25\0\1\257\21\0\1\260\6\0\1\261\46\0"+
    "\1\262\20\0\1\263\33\0\1\264\33\0\1\265\41\0"+
    "\1\266\33\0\1\267\25\0\1\270\44\0\1\271\30\0"+
    "\1\272\30\0\1\273\26\0\1\274\55\0\1\275\13\0"+
    "\1\276\37\0\1\277\25\0\1\300\46\0\1\301\30\0"+
    "\1\302\44\0\1\303\25\0\1\304\32\0\1\305\23\0"+
    "\1\306\42\0\1\307\27\0\1\310\40\0\1\311\21\0"+
    "\1\312\45\0\1\313\21\0\1\314\45\0\1\315\37\0"+
    "\1\316\37\0\1\317\12\0\1\260\40\0\1\320\27\0"+
    "\1\321\43\0\1\322\32\0\1\323\27\0\1\324\40\0"+
    "\1\325\42\0\1\326\14\0\1\327\51\0\1\330\30\0"+
    "\1\331\16\0\1\332\41\0\1\333\27\0\1\334\31\0"+
    "\1\335\55\0\1\336\16\0\1\337\35\0\1\340\37\0"+
    "\1\341\27\0\1\342\26\0\1\343\36\0\1\344\30\0"+
    "\1\345\36\0\1\346\54\0\1\347\7\0\1\350\33\0"+
    "\1\351\44\0\1\352\22\0\1\353\53\0\1\354\24\0"+
    "\1\355\25\0\1\356\41\0\1\357\35\0\1\360\16\0"+
    "\1\361\43\0\1\362\30\0\1\363\33\0\1\364\41\0"+
    "\1\365\35\0\1\366\36\0\1\367\26\0\1\370\35\0"+
    "\1\371\23\0\1\372\36\0\1\373\23\0\1\374\45\0"+
    "\1\375\23\0\1\376\33\0\1\377\33\0\1\u0100\44\0"+
    "\1\u0101\42\0\1\u0102\17\0\1\u0103\37\0\1\u0104\33\0"+
    "\1\u0105\44\0\1\u0106\15\0\1\u0107\41\0\1\u0108\26\0"+
    "\1\u0109\43\0\1\u010a\22\0\1\u010b\40\0\1\u010c\36\0"+
    "\1\u010d\26\0\1\u010e\31\0\1\u010f\52\0\1\u0110\10\0"+
    "\1\u0111\36\0\1\u0112\26\0\1\u0113\45\0\1\u0114\27\0"+
    "\1\u0115\43\0\1\u0116\43\0\1\u0117\11\0\1\u0118\34\0"+
    "\1\u0119\43\0\1\u011a\20\0\1\u011b\41\0\1\u011c\23\0"+
    "\1\u011d\44\0\1\u011e\40\0\1\u011f\25\0\1\u0120\25\0"+
    "\1\u0121\55\0\1\u0122\17\0\1\u0123\35\0\1\u0124\23\0"+
    "\1\u0125\57\0\1\u0126\5\0\1\u0127\50\0\1\u0128\35\0"+
    "\1\u0129\21\0\1\u012a\30\0\1\u012b\46\0\1\u012c\23\0"+
    "\1\u012d\43\0\1\u012e\27\0\1\u012f\22\0\1\u0130\43\0"+
    "\1\u0131\31\0\1\u0132\32\0\1\u0133\41\0\1\u0134\33\0"+
    "\1\u0135\26\0\1\u0136\32\0\1\u0137\30\0\1\u0138\41\0"+
    "\1\u0139\30\0\1\u013a\44\0\1\u013b\21\0\1\u013c\42\0"+
    "\1\u013d\31\0\1\u013e\24\0\1\u013f\54\0\1\u0140\12\0"+
    "\1\u0141\33\0\1\u0142\47\0\1\u0143\32\0\1\u0144\27\0"+
    "\1\u0145\36\0\1\u0146\27\0\1\u0147\45\0\1\u0148\30\0"+
    "\1\u0149\16\0\1\u014a\41\0\1\u014b\36\0\1\u014c\35\0"+
    "\1\u014d\20\0\1\u014e\35\0\1\u014f\41\0\1\u0150\21\0"+
    "\1\u0151\40\0\1\u0152\30\0\1\u0153\36\0\1\u0154\46\0"+
    "\1\u0155\15\0\1\u0156\31\0\1\u0157\35\0\1\u0158\36\0"+
    "\1\u0159\35\0\1\u015a\24\0\1\u015b\43\0\1\u015c\44\0"+
    "\1\u015d\34\0\1\u015e\24\0\1\u015f\30\0\1\u0160\45\0"+
    "\1\u0161\26\0\1\u0162\40\0\1\u0163\21\0\1\u0164\36\0"+
    "\1\u0165\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8736];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\17\1\125\0\1\11\3\0\1\11\16\0"+
    "\1\11\20\0\1\11\6\0\2\11\1\0\1\11\12\0"+
    "\3\11\1\0\1\11\3\0\1\11\5\0\1\11\1\0"+
    "\1\11\2\0\2\11\4\0\1\11\16\0\1\11\13\0"+
    "\1\11\14\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\4\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\1\11\6\0\3\11\36\0\1\11\20\0\1\11\3\0"+
    "\1\11\1\0\2\11\16\0\1\11\3\0\1\11\2\0"+
    "\1\11\7\0\1\11\1\0\1\11\13\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[357];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();

     public Geos2() {}

     @Override
      protected boolean run() {
        try {
          yyreset(new StringReader(getInput()));
          yylex();
          return true;
        } catch (IOException e) {
          e.printStackTrace();
          return false;
        }
      }

      @Override
      public String language() {
        return "IT";
      }

      @Override
      public String version() {
        return "1.1";
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Geos2(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addText(yytext()); position++;
            } 
            // fall through
          case 47: break;
          case 2: 
            { annotate(new City(), "IT_LO", false, false);
            } 
            // fall through
          case 48: break;
          case 3: 
            { annotate(new City(), "IT_F924", false, false);
            } 
            // fall through
          case 49: break;
          case 4: 
            { annotate(new City(), "IT_D960", false, false);
            } 
            // fall through
          case 50: break;
          case 5: 
            { annotate(new City(), "IT_E379", false, false);
            } 
            // fall through
          case 51: break;
          case 6: 
            { annotate(new City(), "IT_LC", false, false);
            } 
            // fall through
          case 52: break;
          case 7: 
            { annotate(new City(), "IT_D976", false, false);
            } 
            // fall through
          case 53: break;
          case 8: 
            { annotate(new City(), "IT_E372", false, false);
            } 
            // fall through
          case 54: break;
          case 9: 
            { annotate(new City(), "IT_G288", false, false);
            } 
            // fall through
          case 55: break;
          case 10: 
            { annotate(new City(), "IT_G317", false, false);
            } 
            // fall through
          case 56: break;
          case 11: 
            { annotate(new City(), "IT_G377", false, false);
            } 
            // fall through
          case 57: break;
          case 12: 
            { annotate(new City(), "IT_PO", false, false);
            } 
            // fall through
          case 58: break;
          case 13: 
            { annotate(new City(), "IT_L328", false, false);
            } 
            // fall through
          case 59: break;
          case 14: 
            { annotate(new City(), "IT_FM", false, false);
            } 
            // fall through
          case 60: break;
          case 15: 
            { annotate(new City(), "IT_D704", false, false);
            } 
            // fall through
          case 61: break;
          case 16: 
            { annotate(new City(), "IT_F023", false, false);
            } 
            // fall through
          case 62: break;
          case 17: 
            { annotate(new City(), "IT_AQ", false, false);
            } 
            // fall through
          case 63: break;
          case 18: 
            { annotate(new City(), "IT_E456", false, false);
            } 
            // fall through
          case 64: break;
          case 19: 
            { annotate(new City(), "IT_L182", false, false);
            } 
            // fall through
          case 65: break;
          case 20: 
            { annotate(new City(), "IT_E447", false, false);
            } 
            // fall through
          case 66: break;
          case 21: 
            { annotate(new City(), "IT_C034", false, false);
            } 
            // fall through
          case 67: break;
          case 22: 
            { annotate(new City(), "IT_PZ", false, false);
            } 
            // fall through
          case 68: break;
          case 23: 
            { annotate(new City(), "IT_TP", false, false);
            } 
            // fall through
          case 69: break;
          case 24: 
            { annotate(new City(), "IT_I804", false, false);
            } 
            // fall through
          case 70: break;
          case 25: 
            { annotate(new City(), "IT_I523", false, false);
            } 
            // fall through
          case 71: break;
          case 26: 
            { annotate(new City(), "IT_I921", false, false);
            } 
            // fall through
          case 72: break;
          case 27: 
            { annotate(new City(), "IT_E974", false, false);
            } 
            // fall through
          case 73: break;
          case 28: 
            { annotate(new City(), "IT_A515", false, false);
            } 
            // fall through
          case 74: break;
          case 29: 
            { annotate(new City(), "IT_E435", false, false);
            } 
            // fall through
          case 75: break;
          case 30: 
            { annotate(new City(), "IT_L722", false, false);
            } 
            // fall through
          case 76: break;
          case 31: 
            { annotate(new City(), "IT_H612", false, false);
            } 
            // fall through
          case 77: break;
          case 32: 
            { annotate(new City(), "IT_MC", false, false);
            } 
            // fall through
          case 78: break;
          case 33: 
            { annotate(new City(), "IT_SP", false, false);
            } 
            // fall through
          case 79: break;
          case 34: 
            { annotate(new City(), "IT_E409", false, false);
            } 
            // fall through
          case 80: break;
          case 35: 
            { annotate(new City(), "IT_B429", false, false);
            } 
            // fall through
          case 81: break;
          case 36: 
            { annotate(new City(), "IT_M208", false, false);
            } 
            // fall through
          case 82: break;
          case 37: 
            { annotate(new City(), "IT_B300", false, false);
            } 
            // fall through
          case 83: break;
          case 38: 
            { annotate(new City(), "IT_C349", false, false);
            } 
            // fall through
          case 84: break;
          case 39: 
            { annotate(new City(), "IT_C773", false, false);
            } 
            // fall through
          case 85: break;
          case 40: 
            { annotate(new City(), "IT_L112", false, false);
            } 
            // fall through
          case 86: break;
          case 41: 
            { annotate(new City(), "IT_F912", false, false);
            } 
            // fall through
          case 87: break;
          case 42: 
            { annotate(new City(), "IT_L245", false, false);
            } 
            // fall through
          case 88: break;
          case 43: 
            { annotate(new City(), "IT_RC", false, false);
            } 
            // fall through
          case 89: break;
          case 44: 
            { annotate(new City(), "IT_L628", false, false);
            } 
            // fall through
          case 90: break;
          case 45: 
            { annotate(new City(), "IT_I234", false, false);
            } 
            // fall through
          case 91: break;
          case 46: 
            { annotate(new City(), "IT_M228", false, false);
            } 
            // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
